<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CSS3完全学习笔记一:选择器]]></title>
      <url>/2017/12/25/CSS3%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="CSS3完全学习笔记一-选择器"><a href="#CSS3完全学习笔记一-选择器" class="headerlink" title="CSS3完全学习笔记一:选择器"></a>CSS3完全学习笔记一:选择器</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul>
<li>.class   .intro 选择所有class中包含该值的元素</li>
<li>#id #intro  选择所有id=intro的元素</li>
<li>* 所有元素</li>
<li>element p 选择所有的p元素</li>
<li>,   div,p 选择所有的div元素和p元素</li>
<li>elment element 选择子(包含直接子元素和孙元素等)元素</li>
<li>> 直接子元素</li>
<li>+ 紧挨着前者的后者(直接弟节点)</li>
<li>[attribute] 包含该属性的</li>
<li>[attribute=value] 属性值为value的元素,加不加引号都可以</li>
<li>[attribute~=value] 属性值中包含该部分,类似于文本的匹配</li>
<li>[attribute|=value] 选择指定属性具有指定值开始(以-分隔开)的元素,可以没有后续部分</li>
<li>:link 未访问链接<a id="more"></a></li>
<li>:visited 访问过的链接</li>
<li>:active 活动链接,当点击链接时,该链接变为活动链接</li>
<li>:hover 鼠标在链接上边时</li>
<li>:focus  获得焦点的输入元素</li>
<li>:first-letter 第一个字母<blockquote>
<p>只能设置以下属性: font properties;color properties ;background properties;margin properties;padding properties;border properties;text-decoration;vertical-align (only if float is ‘none’);text-transform;line-height;float;clear</p>
</blockquote>
</li>
</ul>
<p>这个地方的具体选择元素仍有困惑,比如设置为div:first-letter时,内直接嵌套p,那么p的首字母可以表现,而在p之前填充其他span、img标签则p没有表现.</p>
<ul>
<li>:first-line 第一行</li>
<li>:first-child  p:first-child  当p元素是父元素的第一个子元素时</li>
<li>:before 在元素之前添加内容,使用content 属性来指定要插入的内容。</li>
<li>:after 之后</li>
<li>:lang(language) p:lang(it) lang属性值的起始值为it的p元素</li>
</ul>
<hr>
<p>之后为css3新定义选择器</p>
<ul>
<li>element1~element2 p~ul p元素同一父元素之后的每一个ul元素. 与+类似,非直接弟节点</li>
<li>[attribute^=value] 属性以value开头,与|=类似,但是不要求以-分割</li>
<li>[attribute$=value] 结尾</li>
<li>[attribute*=value] 包含子串</li>
<li>:first-of-type  p:first-of-type, 是其父元素的第一个p子元素,与:nth-of-type(1)相同</li>
<li>:last-of-type,与:nth-last-of-type(1)相同</li>
<li>:only-of-type 唯一,不排除其他元素</li>
<li>:only-child 是父亲的唯一子元素</li>
<li>:nth-child(n) 是父亲的第n的子元素<blockquote>
<p>选择父元素E的第n个子元素F。其中n可以是整数（1，2，3）、关键字（even，odd）、可以是公式（2n+1）,而且n值起始值为1，而不是0.</p>
</blockquote>
</li>
<li>:last-child 最后一个子元素</li>
<li>:nth-last-child(n) 倒数第n</li>
<li>:nth-of-type(n)。第n个该类型的</li>
<li>:nth-last-of-type(n) 倒数第n</li>
<li>:root。根元素,在html中始终是<html></html></li>
<li>:empty 没有子元素和文本节点</li>
<li>:target//??? 匹配hash与id相对应的元素,但是safari、chrome没有效果</li>
<li>:enabled 启用的输入元素</li>
<li>:disabled</li>
<li>:checked 选中的输入元素</li>
<li>:not(selector)     排除</li>
<li>::selection 被选中的部分<blockquote>
<p>只可以应用于少数的CSS属性：color, background, cursor,和outline。</p>
</blockquote>
</li>
<li>:out-of-range 匹配值在指定区间之外的input元素</li>
<li>:in-range    </li>
<li>:read-write  用于匹配可读及可写的元素/区别于只读元素</li>
<li>:read-only 匹配设置 “readonly”（只读） 属性的元素</li>
<li>:optional 可选的输入元素,区别于required</li>
<li>:required </li>
<li>:valid 输入值合法的元素</li>
<li>:invalid 输入值不合法的元素</li>
</ul>
<hr>
<h2 id="Css选择器的分类"><a href="#Css选择器的分类" class="headerlink" title="Css选择器的分类:"></a>Css选择器的分类:</h2><p><img src="http://ozc9m7ly1.bkt.clouddn.com/282324267509975.jpg" alt=""></p>
<h2 id="伪-pseudo-类和伪选择器"><a href="#伪-pseudo-类和伪选择器" class="headerlink" title="伪(pseudo)类和伪选择器:"></a>伪(pseudo)类和伪选择器:</h2><p>伪类:对现有元素进行筛选;伪选择器:创造出不存在的新元素.</p>
<blockquote>
<p>The pseudo-class concept is introduced to permit selection based on information that lies outside of the document tree or that cannot be expressed using the other simple selectors.</p>
<p>Pseudo-elements create abstractions about the document tree beyond those specified by the document language. For instance, document languages do not offer mechanisms to access the first letter or first line of an element’s content. Pseudo-elements allow authors to refer to this otherwise inaccessible information. Pseudo-elements may also provide authors a way to refer to content that does not exist in the source document.</p>
</blockquote>
<p>伪类总是以一个冒号开头。伪元素通常以两个冒号开头。在 CSS2 时代，伪元素和伪类均是以一个冒号开头的；在 CSS2.1 之后，为了对伪元素和伪类加以区分，规定伪类继续以一个冒号开头，而伪元素改为以两个冒号开头。但是为了向前兼容，浏览器同样接受 CSS2 时代已经存在的伪元素（它们包括:before, :after, :first-line, :first-letter）的单冒号写法。但是对于 CSS2 之后所有新增的伪元素（例如::selection），必须采用双冒号写法。</p>
<p>一些老旧的浏览器不支持双冒号的写法，因此如果必须兼容旧浏览器，则应该使用单冒号写法。IE 从 9 开始支持双冒号写法。//是否意味着ie9之前的浏览器无法使用::selection?</p>
<p>参考资料:</p>
<ul>
<li><a href="https://www.cnblogs.com/AllenChou/p/4684753.html" target="_blank" rel="noopener">最全CSS3选择器 - AllenChou - 博客园</a></li>
<li><a href="https://www.renfei.org/blog/css-pseudo-class-and-pseudo-element.html" target="_blank" rel="noopener">CSS 伪类和伪元素的区别 - Blog - Renfei Song</a></li>
<li><a href="http://www.runoob.com/cssref/css-ref-aural.html" target="_blank" rel="noopener">CSS 听觉参考手册 | 菜鸟教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT]]></title>
      <url>/2017/12/25/http%E6%97%A0%E7%8A%B6%E6%80%81%E5%92%8C%E9%89%B4%E6%9D%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-cookie%E3%80%81session%E3%80%81token%E3%80%81oauth2%E5%8F%8AJWT/</url>
      <content type="html"><![CDATA[<h1 id="http无状态和鉴权解决方案-cookie、session、token、oauth2及JWT"><a href="#http无状态和鉴权解决方案-cookie、session、token、oauth2及JWT" class="headerlink" title="http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT"></a>http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT</h1><p>http协议本身是无状态的,但是在实际的web开发中常有一些操作需要有状态.比如想要访问一些私人访问权限的文章,或者这种操作需要明确当前用户身份.</p>
<p>显然,最简单的方案就是每次都发送账户和密码,但是这样重复操作用用户并不友好,对服务器页增添了额外的压力.为了解决无状态带来的鉴权问题,一般有以下几种解决方案:cookie、session、token.至于标题中提及的outh2、jwt本质上也是token方案.</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie是储存在客户端的一串字符,一般说来大小不超过4kb.比如我们常见的记住密码功能,或者一些基于之前输入的提醒和默认配置,就是通过cookie来实现的,cookie简单说来就是一种本地存储方法.但是这里存储的信息常用来进行鉴权操作.cookie只能保存文本信息,浏览器可以禁止cookie.cookie的期限可以被自由设定,可以是仅仅一次浏览起效,也可以长达一年.如果是短期的,那么这些信息会被存储在内存中,如果是长期则会存储在硬盘上.cookie的起效范围是路径下的所有子路径.不允许其他来源的访问.</p>
<p>单纯的采用cookie来认证身份会带来一个比较麻烦的问题,就是伪造比较容易.因为这样处理,cookie中必然要带有身份信息,但是服务器也要解析这个身份信息,所以必然要在原理上支持双向的编码和解码,那么这个信息很容易被破解和进一步伪造.想一想,如果想要解决这个问题,我们常用的方案应该是加一个secret,而这个secret应该是放在服务器上的,服务器返回这样一个<code>带有secret编码的字符串</code>,而在服务器端再带上这个secret反向解密,如此一来,问题不就解决了吗?确实如此,但是这不代表cookie就安全,因为这已经不叫cookie了,而是我们要讲的第二个对象:session.<br><a id="more"></a></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>通过上面说的东西,我们已经能够获得身份信息,额外的,我们还可以把更复杂形式的信息都存储进来,因为这里没有cookie的纯文本限制.但是刚才说的<code>带有secret编码的字符串</code>也就是sessionid,依然要存储在客户端.是不是意味着session必定要依赖cookie呢?不是!想一想,我们实际上需要的是在每一次请求(至少是需要判定身份状态的请求中),都带上这个字符串,我们有以下这几种解决方案:</p>
<ul>
<li>cookie</li>
<li>表单隐藏字段:在form中放置一个隐藏的域</li>
<li>url重写:在url后边加上session的query段</li>
</ul>
<p>Session也可以设定有效时间.其实际的存储可以在内存、缓存、文件中.通过类似//可能具体实现不同.//hash表的数据结构存储.cookie是一个存在的实体,session是一种机制.</p>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>对token的理解还不够,可能多有纰漏之处,待之后再进行修改.</p>
<p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>
<ul>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端<br>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>
</ul>
<p>可以看出来,这里的token与sessionid有些类似,其区别:</p>
<ul>
<li>sessionid是带着之前的状态的,在服务器端可以getSession(sessionid)</li>
<li>token是在登录验证之后发放的一个包含着用户基本信息的较长的字符串,用处是验证身份以及简化后续获取信息的难度.</li>
<li>token机制更灵活,可以实现跨域</li>
</ul>
<h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><p>Jwt简单说来是一种token的具体实现规范!</p>
<p>Jwt标准的token有三个部分,中间用点分隔开，并且都会使用 Base64 编码:</p>
<ul>
<li>header<blockquote>
<p>header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法</p>
</blockquote>
</li>
<li>Payload <blockquote>
<p>里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容</p>
</blockquote>
</li>
<li>Signature<blockquote>
<p>编码以上两个部分并且加入一个secret使用信息摘要算法得出一个字符串</p>
</blockquote>
</li>
</ul>
<h3 id="oauth2"><a href="#oauth2" class="headerlink" title="oauth2"></a>oauth2</h3><p>简单来说,oauth是用来向第三方平台提供可以细致的权限管理的一种方案.</p>
<p>如何直接向第三方提供账号和密码,可能存在的问题有:</p>
<ul>
<li>不安全</li>
<li>无法更细致的限制授权范围和有效期</li>
<li>只有修改密码才能收回权限</li>
<li>一个第三方程序被破解将会导致用户密码泄漏</li>
</ul>
<p>OAuth的基本思路如下:</p>
<blockquote>
<p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。”客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这篇文章讲解的三种方案:cookie、session、token的理解可能会有问题,尤其是token和session很容易让人觉得token就是一种sessionid而已.简单的理解方式:</p>
<ul>
<li>Cookie 就是一个写着自己是谁的小纸条.共产党看到你,就无条件相信了你是狗蛋</li>
<li>Session是加入了领导最喜欢的一首诗的名字,然后和同志姓名拼起来编码成了一个字符串交给你.当共产党拿到的时候要先反向破解,然后认定你就是狗蛋,再去查找记事本上狗蛋的编制给他发了这个月的口粮.</li>
<li>Token是组织上经过审查认定你就是狗蛋,为了嫌麻烦不想下次再查记事本,所以把你的编制信息直接拼起来编码发给你,下次去的时候他们翻译出来你的编制直接给你发.</li>
</ul>
<p>目前对于这篇文章的内容依然有不理解之处,等待进一步修改.</p>
<p>参考资料:</p>
<ul>
<li><a href="https://my.oschina.net/biezhi/blog/490242#OSC_h2_3" target="_blank" rel="noopener">Http Session和Cookie - _</a></li>
<li><a href="http://blog.csdn.net/java_faep/article/details/78082802" target="_blank" rel="noopener">服务器端Session和客户端Session（和Cookie区别） - 曾梦想仗剑走天涯的博客 - CSDN博客</a></li>
<li><a href="https://www.zhihu.com/question/31079651" target="_blank" rel="noopener">https://www.zhihu.com/question/31079651</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">http://blog.leapoahead.com/2015/09/06/understanding-jwt/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0 - 阮一峰的网络日志</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28295641" target="_blank" rel="noopener">Web App Token 鉴权方案的设计与思考</a></li>
<li><a href="https://www.zhihu.com/question/39137156/answer/80228149" target="_blank" rel="noopener">app开发token、cookie的区别，账号密码加密又是如何保证安全？ - 知乎</a></li>
<li><a href="http://tech.colla.me/zh/show/token_session_cookie" target="_blank" rel="noopener">cookie &amp; session &amp; token的简单理解 | colla.me</a></li>
<li><a href="https://ninghao.net/blog/2834" target="_blank" rel="noopener">基于 Token 的身份验证 - 宁皓网</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> http </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记四：api全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aapi%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记四：api全解"><a href="#HTML5完全学习笔记四：api全解" class="headerlink" title="HTML5完全学习笔记四：api全解"></a>HTML5完全学习笔记四：api全解</h1><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>地理位置 API 通过 navigator.geolocation 提供。默认不开启,需要请求.<br>Geolocation API 的数据来源可能是 GPS、IP 地址、RFID、WiFi、蓝牙 MAC 地址、GSM/CDMA 卡 ID 等。</p>
<p>方法如下:</p>
<ul>
<li>Geolocation.getCurrentPosition():获取位置返回position对象</li>
</ul>
<blockquote>
<p>这会异步地请求获取用户位置，并查询定位硬件来获取最新信息。当定位被确定后，定义的回调函数就会被执行。您可以选择性地提供第二个回调函数，当有错误时会被执行。第三个参数也是可选的，您可以通过该对象参数设定最长可接受的定位返回时间、等待请求的时间和是否获取高精度定位。</p>
</blockquote>
<a id="more"></a>
<pre><code class="javascript">var options = {
  enableHighAccuracy: true,
  timeout: 5000,
  maximumAge: 0
};

function success(pos) {
  var crd = pos.coords;
  console.log(&#39;Your current position is:&#39;);
  console.log(&#39;Latitude : &#39; + crd.latitude);
  console.log(&#39;Longitude: &#39; + crd.longitude);
  console.log(&#39;More or less &#39; + crd.accuracy + &#39; meters.&#39;);
};

function error(err) {
  console.warn(&#39;ERROR(&#39; + err.code + &#39;): &#39; + err.message);
};
</code></pre>
<ul>
<li>Geolocation.watchPosition():位置监听器,每当改变,返回一个long类型的监听器id,用来传递给clearwatch停止监听.</li>
<li>Geolocation.clearWatch():取消由 watchPosition()注册的位置监听器。</li>
</ul>
<p>关于getCurrentPosition返回undefined的原因:</p>
<blockquote>
<p>This is because navigator.geolocation.getCurrentPosition is asynchronous. The getGeoLocation function returns before the anonymous callback function passed to getCurrentPosition has been executed, and since the getGeoLocation function has no return statement, it returns undefined.</p>
</blockquote>
<p>这是一个异步执行的函数,由于本身没有返回值,所以返回了undefined.</p>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>H5的本地存储方案主要分为两类:webStorage和IndexedDB.其中webStorage分为localStorage和sessionStorage.indexedDB则是web SQL的替代方案.</p>
<h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><p>localStorage和sessionStorage的操作一致,主要区别是在保存时间上,前者可以一直保存,后者只保存在一个session内.大小限制视不同浏览器在5-20M之间.内部保存方式都是字符串方式,如果需要保存其他类型的数据需要自行转换.方法如下:</p>
<ul>
<li>保存数据：localStorage.setItem(key,value);</li>
<li>读取数据：localStorage.getItem(key);</li>
<li>删除单个数据：localStorage.removeItem(key);</li>
<li>删除所有数据：localStorage.clear();</li>
<li>得到某个索引的key：localStorage.key(index);</li>
</ul>
<h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>IndexedDB是为了能够在客户端存储大量的结构化数据，并且使用索引高效检索的API。采用异步API,其存储方式类似于Nosql.存储空间一般来说不少于250MB。支持事务和二进制存储.</p>
<blockquote>
<p>indexedDB 对象在旧版本的浏览器上是带有前缀的 (在 Gecko &lt; 16的情况下是 mozIndexedDB 属性，Chrome 中是 webkitIndexedDB ，以及IE10 的 msIndexedDB )。</p>
</blockquote>
<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p>
<p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</p>
<p>manifest 文件可分为三个部分：</p>
<ul>
<li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li>
<li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li>
<li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li>
</ul>
<p>一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。</p>
<h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>web worker 是运行在后台的 JavaScript,独立于UI进程,可以用来做一些高度消耗CPU的工作.</p>
<p>在外部文件中用postMessage来传送消息,在原文件用onmessage获取消息. <code>w=new Worker(&quot;demo_workers.js&quot;);</code>创建worker,<code>w.terminate();</code>终止worker.</p>
<h2 id="Server-Sent-Events"><a href="#Server-Sent-Events" class="headerlink" title="Server-Sent Events"></a>Server-Sent Events</h2><p>实现服务器向浏览器的推送.SSE使用的是http协议,而WebSocket 是一个独立协议.其用来传送文本信息,可以自定义发送的消息类型.SSE 要求服务器与浏览器保持连接.</p>
<blockquote>
<p>严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>
</blockquote>
<h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><p><code>var source = new EventSource(url, { withCredentials: true });</code>生成示例,可以跨域.连接一旦建立，就会触发open事件，可以在onopen属性定义回调函数。客户端收到服务器发来的数据，就会触发message事件，可以在onmessage属性的回调函数。<code>source.close();</code>关闭连接.</p>
<pre><code class="javascript">source.onmessage = function (event) {
  var data = event.data;
  // handle message
};
</code></pre>
<p>默认情况下，服务器发来的数据，总是触发浏览器EventSource实例的message事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发message事件。</p>
<h3 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h3><p>Content-Type必须指定 MIME 类型为event-steam.每一次发送的信息，由若干个message组成，每个message之间用\n\n分隔。每个message内部由若干行组成，每一行都是如下格式:<code>[data/event/id/retry]: value\n</code>,此外，还可以有冒号开头的行，表示注释。如果data很长，可以分成多行，最后一行用\n\n结尾，前面行都用\n结尾。数据标识符用id字段表示，相当于每一条数据的编号。event字段表示自定义的事件类型，默认是message事件。服务器可以用retry字段，指定浏览器重新发起连接的时间间隔。</p>
<blockquote>
<p>浏览器用lastEventId属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的Last-Event-ID头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>
</blockquote>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。     </p>
<pre><code class="javascript">var ws = new WebSocket(&quot;wss://echo.websocket.org&quot;);
ws.onopen = function(evt) { 
  console.log(&quot;Connection open ...&quot;); 
  ws.send(&quot;Hello WebSockets!&quot;);
};
ws.onmessage = function(evt) {
  console.log( &quot;Received Message: &quot; + evt.data);
  ws.close();
};
ws.onclose = function(evt) {
  console.log(&quot;Connection closed.&quot;);
};
</code></pre>
<p>服务器数据可能是文本，也可能是二进制数据（blob对象或Arraybuffer对象）。实例对象的bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p>
<p>参考资料:</p>
<ul>
<li><a href="http://javascript.ruanyifeng.com/bom/indexeddb.html" target="_blank" rel="noopener">IndexedDB：浏览器端数据库 — JavaScript 标准参考教程（alpha）</a></li>
<li><a href="http://www.runoob.com/html/html5-webstorage.html" target="_blank" rel="noopener">HTML5 Web 存储 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/LuckyWinty/p/5699117.html" target="_blank" rel="noopener">前端HTML5几种存储方式的总结 - 小蚊 - 博客园</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers" target="_blank" rel="noopener">Functions and classes available to Web Workers - Web APIs | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation" target="_blank" rel="noopener">Geolocation - Web API 接口 | MDN</a></li>
<li><a href="http://www.alloyteam.com/2015/11/deep-in-web-worker/" target="_blank" rel="noopener">【转向Javascript系列】深入理解Web Worker | AlloyTeam</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noopener">Server-Sent Events 教程 - 阮一峰的网络日志</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程 - 阮一峰的网络日志</a></li>
<li><a href="http://websocketd.com" target="_blank" rel="noopener">websocketd</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记三：canvas全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9Acanvas%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记三：canvas全解"><a href="#HTML5完全学习笔记三：canvas全解" class="headerlink" title="HTML5完全学习笔记三：canvas全解"></a>HTML5完全学习笔记三：canvas全解</h1><p>Canvas用于通过js绘制图片和动画。最早由apple引入webkit。</p>
<p>Canvas元素只有width和height属性，默认情况下的值为300*150.该元素可以使用CSS来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。尽量使用width和height来设定canvas的形状大小而非css。</p>
<h2 id="getContext"><a href="#getContext" class="headerlink" title="getContext"></a>getContext</h2><p>访问绘图上下文，检测是否支持canvas也可以通过检测getcontext。</p>
<pre><code>var canvas = document.getElementById(&#39;tutorial&#39;);

if (canvas.getContext){
  var ctx = canvas.getContext(&#39;2d&#39;);
} else {
}
</code></pre><a id="more"></a>
<h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><p>Canvas只支持一种原生的图像绘制，就是矩形。其他图形的绘制都需要路径实现。</p>
<p>绘制矩形的方式：</p>
<ul>
<li>fillRect(x, y, width, height)//fill表示填充</li>
<li>strokeRect(x, y, width, height)//stroke表示边框</li>
<li>clearRect(x, y, width, height)//清除使之变透明</li>
<li>rect(x, y, width, height)//该方法执行时，笔触自动回复道默认位置//？执行时？是指绘制完之后再绘制下一个的时候吗？</li>
</ul>
<h2 id="通过路径绘图"><a href="#通过路径绘图" class="headerlink" title="通过路径绘图"></a>通过路径绘图</h2><ul>
<li>首先，你需要创建路径起始点。<blockquote>
<p>beginPath()：当前路径为空，即调用beginPath()之后，或者canvas刚建的时候，第一条路径构造命令通常被视为是moveTo（），无论最后的是什么。出于这个原因，你几乎总是要在设置路径之后专门指定你的起始位置。</p>
</blockquote>
</li>
<li>然后你使用画图命令去画出路径。</li>
<li>之后你把路径封闭。<blockquote>
<p>cloasepath（）：绘制一条从当前点到开始点的直线来闭合图形。如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做。</p>
</blockquote>
</li>
<li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形。<blockquote>
<p>当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。</p>
</blockquote>
</li>
</ul>
<h3 id="移动笔触"><a href="#移动笔触" class="headerlink" title="移动笔触"></a>移动笔触</h3><p>moveTo（x，y）：用来绘制不连续的路径。</p>
<h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><p>lineTo（x，y）：绘制从当前到目的坐标的直线。</p>
<h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><p>arc(x, y, radius, startAngle, endAngle, anticlockwise)：画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</p>
<p>其中的角度单位是弧度而非度数。<code>radians=(Math.PI/180)*degrees</code>。</p>
<h3 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h3><p>quadraticCurveTo(cp1x, cp1y, x, y)：绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</p>
<p>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)：绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</p>
<h2 id="path2D"><a href="#path2D" class="headerlink" title="path2D"></a>path2D</h2><p>Path2D用来缓存或记录绘画命令。简单来说，可以认为它用来存储一系列的绘画指令，用以简化重复操作。</p>
<pre><code class="javascript">function draw() {
  var canvas = document.getElementById(&#39;canvas&#39;);
  if (canvas.getContext){
    var ctx = canvas.getContext(&#39;2d&#39;);

    var rectangle = new Path2D();
    rectangle.rect(10, 10, 50, 50);

    var circle = new Path2D();
    circle.moveTo(125, 35);
    circle.arc(100, 35, 25, 0, 2 * Math.PI);

    ctx.stroke(rectangle);
    ctx.fill(circle);
  }
}
</code></pre>
<h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><p>fillStyle = color：设置图形的填充颜色；strokeStyle = color：设置图形轮廓的颜色。</p>
<blockquote>
<p>注意: 一旦您设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值。如果你要给每个图形上不同的颜色，你需要重新设置 fillStyle 或 strokeStyle 的值。</p>
<p>globalAlpha = transparencyValue；可选的范围是0.0-1.0，会设置之后所有被绘制的canvas图形的透明度。但是由于支持rgba格式的颜色，所以这个方法并不必要。</p>
</blockquote>
<h2 id="线型"><a href="#线型" class="headerlink" title="线型"></a>线型</h2><ul>
<li>lineWidth = value<br>设置线条宽度。</li>
<li>lineCap = type<br>设置线条末端样式。butt(默认)，round 和 square。<br><img src="https://developer.mozilla.org/@api/deki/files/88/=Canvas_linecap.png" alt=""></li>
<li>lineJoin = type<br>设定线条与线条间接合处的样式。round, bevel 和 miter(默认).<br><img src="https://developer.mozilla.org/@api/deki/files/89/=Canvas_linejoin.png" alt=""></li>
<li>miterLimit = value<br>限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度。</li>
<li>getLineDash()<br>返回一个包含当前虚线样式，长度为非负偶数的数组。</li>
<li>setLineDash(segments)<br>设置当前虚线样式。<br>这里的参数一般情况下应该为两个，表示线长和间隔长度，其他情况时代表从左侧到右侧的每一块长度的循环单元，这里的长度块既包含线也包含间隔。</li>
<li>lineDashOffset = value<br>设置虚线样式的起始偏移量。</li>
</ul>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>我们用下面的方法新建一个 canvasGradient 对象，并且赋给图形的 fillStyle 或 strokeStyle 属性。</p>
<p>createLinearGradient(x1, y1, x2, y2)：createLinearGradient 方法接受 4 个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。<br>createRadialGradient(x1, y1, r1, x2, y2, r2)：createRadialGradient 方法接受 6 个参数，前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。</p>
<p>创建出 canvasGradient 对象后，我们就可以用 addColorStop 方法给它上色了。</p>
<p>gradient.addColorStop(position, color)：addColorStop 方法接受 2 个参数，position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。color 参数必须是一个有效的 CSS 颜色值（如 #FFFFFF rgba(0,0,0,1)，等等）。这里的相对位置就是图形化后的色标位置。</p>
<pre><code class="javascript">var lineargradient = ctx.createLinearGradient(0,0,150,150);
lineargradient.addColorStop(0,&#39;white&#39;);
lineargradient.addColorStop(1,&#39;black&#39;);
</code></pre>
<h2 id="图案样式"><a href="#图案样式" class="headerlink" title="图案样式"></a>图案样式</h2><p>createPattern(image, type)：该方法接受两个参数。Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。<br><strong><em> 使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</em></strong></p>
<pre><code class="javascript">function draw() {
  var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);
  // 创建新 image 对象，用作图案
  var img = new Image();
  img.src = &#39;images/wallpaper.png&#39;;
  img.onload = function(){
    // 创建图案
    var ptrn = ctx.createPattern(img,&#39;repeat&#39;);
    ctx.fillStyle = ptrn;
    ctx.fillRect(0,0,150,150);

  }
}
</code></pre>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><ul>
<li>shadowOffsetX = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li>
<li>shadowOffsetY = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li>
<li>shadowBlur = float<br>shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。</li>
<li>shadowColor = color<br>shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</li>
</ul>
<h2 id="填充规则"><a href="#填充规则" class="headerlink" title="填充规则"></a>填充规则</h2><p>用fill、clip、ispointinpath时可以选择填充规则：nonzero（默认）/evenodd<br>（填充中间部分）</p>
<h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>fillText(text, x, y [, maxWidth]):在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的.<br>strokeText(text, x, y [, maxWidth]):在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的.</p>
<p>文本还可以设置样式：</p>
<ul>
<li>font = value<br>当前我们用来绘制文本的样式. 这个字符串使用和 CSS font 属性相同的语法. 默认的字体是 10px sans-serif。</li>
<li>textAlign = value<br>文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。</li>
<li>textBaseline = value<br>基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li>
<li>direction = value<br>文本方向。可能的值包括：ltr, rtl, inherit。默认值是 inherit。</li>
</ul>
<p>文本测量：measureText()：将返回一个 TextMetrics对象的宽度、所在像素，这些体现文本特性的属性。</p>
<h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p>在绘制之前，要先通过dom方法来获取图片/视频的帧/canvas对象。</p>
<p>drawImage(image, x, y):其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。</p>
<pre><code class="javascript">function draw() {
    var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);
    var img = new Image();
    img.onload = function(){
      ctx.drawImage(img,0,0);
      ctx.beginPath();
      ctx.moveTo(30,96);
      ctx.lineTo(70,66);
      ctx.lineTo(103,76);
      ctx.lineTo(170,15);
      ctx.stroke();
    }
    img.src = &#39;images/backdrop.png&#39;;
  }
</code></pre>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>drawImage(image, x, y, width, height)：这个方法多了2个参数：width 和 height，这两个参数用来控制 当像canvas画入时应该缩放的大小。</p>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)：第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用。其它8个参数，前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。</p>
<h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><p>save()restore()：save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>
<blockquote>
<p>Canvas状态存储在栈中，每当save()方法被调用后，当前的状态就被推送到栈中保存。一个绘画状态包括：当前应用的变形（即移动，旋转和缩放，见下）strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin,miterLimit,shadowOffsetX, shadowOffsetY, shadowBlur,shadowColor,globalCompositeOperation 的值当前的裁切路径（clipping path）</p>
</blockquote>
<pre><code class="javascript">function draw() {
  var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);

  ctx.fillRect(0,0,150,150);   // 使用默认设置绘制一个矩形
  ctx.save();                  // 保存默认状态

  ctx.fillStyle = &#39;#09F&#39;       // 在原有配置基础上对颜色做改变
  ctx.fillRect(15,15,120,120); // 使用新的设置绘制一个矩形

  ctx.save();                  // 保存当前状态
  ctx.fillStyle = &#39;#FFF&#39;       // 再次改变颜色配置
  ctx.globalAlpha = 0.5;    
  ctx.fillRect(30,30,90,90);   // 使用新的配置绘制一个矩形

  ctx.restore();               // 重新加载之前的颜色状态
  ctx.fillRect(45,45,60,60);   // 使用上一次的配置绘制一个矩形

  ctx.restore();               // 加载默认颜色配置
  ctx.fillRect(60,60,30,30);   // 使用加载的配置绘制一个矩形
}
</code></pre>
<p><img src="https://mdn.mozillademos.org/files/249/Canvas_savestate.png" alt=""></p>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>translate(x, y)：translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。用来移动 canvas 和它的原点到一个不同的位置。</p>
<p>translate和moveto的区别是什么？</p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>rotate(angle)：这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。旋转的中心点始终是 canvas 的原点，如果要改变它，我们需要用到 translate 方法。</p>
<h3 id="缩放-1"><a href="#缩放-1" class="headerlink" title="缩放"></a>缩放</h3><p>scale(x, y)：scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。</p>
<h3 id="变形-1"><a href="#变形-1" class="headerlink" title="变形"></a>变形</h3><p>transform(m11, m12, m21, m22, dx, dy)</p>
<pre><code>m11 m21 dx
m12 m22 dy
0     0     1
</code></pre><p>用以上矩阵进行图像变换。</p>
<p>setTransform()：将当前的变换矩阵设置为默认的单位矩阵，然后在单位矩阵之上运用用户指定的变换。</p>
<p>resetTransform()：重置为单位矩阵。</p>
<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>globalCompositeOperation：覆盖规则，当其为“source-over”，后来者居上，当其为“destination-over”则相反。</p>
<h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><blockquote>
<p>clip()方法从原始画布中剪切任意形状和尺寸。提示：一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）</p>
</blockquote>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>requestAnimationFrame(callback)</p>
<blockquote>
<p>。这个方法提供了更加平缓并更加有效率的方式来执行动画，当系统准备好了重绘条件的时候，才调用绘制动画帧。一般每秒钟回调函数执行60次，也有可能会被降低。<br>回调函数只会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame 序列化的函数队列被触发的时间。即使经过了许多对之前回调的计算工作时间，单个帧中的多个回调也都将被传入相同的时间戳。此数值是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。</p>
</blockquote>
<h2 id="ImageData-对象"><a href="#ImageData-对象" class="headerlink" title="ImageData 对象"></a>ImageData 对象</h2><p>其包含的内容有:width、height、data:Uint8ClampedArray 类型</p>
<p>createImageData(width, height):创建对象,颜色为黑色.</p>
<p>getImageData(left, top, width, height):这个方法会返回一个ImageData对象，它代表了画布区域的对象数据.</p>
<p>putImageData(myImageData, dx, dy):对场景进行像素数据的写入.</p>
<h2 id="反锯齿"><a href="#反锯齿" class="headerlink" title="反锯齿"></a>反锯齿</h2><p>imageSmoothingEnabled属性//默认情况下启用(true)</p>
<p>参考资料：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes" target="_blank" rel="noopener">使用canvas来绘制图形 - Web API 接口 | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas" target="_blank" rel="noopener">像素操作 - Web API 接口 | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记二：events全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9Aevents%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记二：events全解"><a href="#HTML5完全学习笔记二：events全解" class="headerlink" title="HTML5完全学习笔记二：events全解"></a>HTML5完全学习笔记二：events全解</h1><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><p>适用于body标签</p>
<ul>
<li>onafterprint<blockquote>
<p>注意： 目前只有 Internet Explorer 和 Firefox 浏览器支持 onafterprint 事件属性。在 IE 浏览器中, onafterprint 属性在打印对话框之前执行Javascript而不是之后。//?是否意味着在ie中onafterprint=onberforeprint</p>
<a id="more"></a></blockquote>
</li>
<li>onbeforeprint</li>
<li>onbeforeunload    <blockquote>
<p> 在onload之前执行，可以阻止unload的执行，在页面关闭页面或者刷新时执行</p>
</blockquote>
</li>
<li>onblur</li>
<li>onerror<blockquote>
<p>此外，onerror方法还提供了三个参数用来确定错误确切的信息，分别是：1）message：一个字符串，声明了出现的错误的信息(不同的浏览器中返回的消息内容略有差异)。2）url：一个字符串，声明了出现错误的文档的URL。3）line：一个数字，声明了出现错误的代码行的行号。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>当JavaScript运行时错误（包括语法错误）发生时，window会触发一个ErrorEvent接口的error事件，并执行window.onerror()。当一项资源（如<img>或<script>）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。这些error事件不会向上冒泡到window，不过（至少在Firefox中）能被单一的window.addEventListener捕获。</p>
<ul>
<li>onfocus</li>
<li>onhaschange<br>锚改变时触发，有两个属性newURL和oldURL。</li>
<li>onload<br>onload 通常用于 <body> 元素，在页面完全载入后(包括图片、css文件等等。)执行脚本代码。</li>
<li>onmessage<br>Web Workers </li>
<li>onoffline</li>
<li>ononline<br>使用navigator.onLine 也可以检测是否在线</li>
<li>onpagehide</li>
<li>onpageshow<br>onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发。</li>
<li>onpopstate<br>每当处于激活状态的历史记录条目发生变化时,popstate事件就会在对应window对象上触发. 如果当前处于激活状态的历史记录条目是由history.pushState()方法创建,或者由history.replaceState()方法修改过的, 则popstate事件对象的state属性包含了这个历史记录条目的state对象的一个拷贝.调用history.pushState()或者history.replaceState()不会触发popstate事件. popstate事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用history.back()、history.forward()、history.go()方法).当网页加载时,各浏览器对popstate事件是否触发有不同的表现,Chrome 和 Safari会触发popstate事件, 而Firefox不会.</li>
<li>onredo</li>
<li>onresize</li>
<li>onstorage<br>web存储区域（DOM Storage）更新时触发onstorage事件。如果变更了Storage对象的属性值，或者调用了setItem()、removeItem()等方法，就会触发onstorage事件。//这里的或者是什么意思，如果调用setitem但并不更改值只是设定为和之前的值一样，是否会触发这个事件。</li>
<li>onundo</li>
<li>onunload</li>
</ul>
</blockquote>
<p>//有些类似于生命周期函数或者就是生命周期函数？</p>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>适用于在form内部的所有元素</p>
<ul>
<li>onblur</li>
<li>onchange</li>
<li>oncontextmenu<blockquote>
<p>此事件会发生在没有阻止右键事件的情况下而且这不取决于此元素是否拥有了”contextmenu”属性.</p>
</blockquote>
</li>
<li>onfocus</li>
<li>onformchange</li>
<li>onforminput</li>
<li>oninput</li>
<li>oninvalid</li>
<li>onselect</li>
<li>onsubmit</li>
</ul>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul>
<li>onkeydown</li>
<li>onkeypress</li>
<li>onkeyup</li>
</ul>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><ul>
<li>onclick</li>
<li>ondbclick</li>
<li>ondrag</li>
<li>ondragend</li>
<li>ondragenter</li>
<li>ondragleave</li>
<li>ondragover</li>
<li>ondragstart</li>
<li>ondrop</li>
<li>onmousedown</li>
<li>onmousemove</li>
<li>onmouseout</li>
<li>onmouseover</li>
<li>onmouseup</li>
<li>onmousewheel</li>
<li>onscrolll</li>
</ul>
<h2 id="多媒体事件"><a href="#多媒体事件" class="headerlink" title="多媒体事件"></a>多媒体事件</h2><ul>
<li>onabort</li>
<li>oncanplay</li>
<li>oncanplaythrough</li>
<li>ondurationchange</li>
<li>onemptied</li>
<li>onended</li>
<li>onerror</li>
<li>onloadeddata</li>
<li>onloadedmetadata</li>
<li>onloadstart</li>
<li>onpause</li>
<li>onplay</li>
<li>onplaying</li>
<li>onprogress</li>
<li>onratechange</li>
<li>onreadystatechange</li>
<li>onseeked</li>
<li>onseeking</li>
<li>onstalled</li>
<li>onsuspend</li>
<li>ontimeupdate</li>
<li>onvolumechage</li>
<li>onwaiting</li>
</ul>
<h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><ul>
<li>onshow：menu显示时触发，兼容性不佳</li>
<li>ontoggle：打开或关闭details时触发</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.runoob.com/tags/ref-eventattributes.html">HTML 事件 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/arinna/archive/2011/08/08/2130629.html">JavaScript中的onerror事件 - arinna - 博客园</a></li>
</ul>
</script></p></blockquote>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记一：element全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9Aelement%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记一：element全解"><a href="#HTML5完全学习笔记一：element全解" class="headerlink" title="HTML5完全学习笔记一：element全解"></a>HTML5完全学习笔记一：element全解</h1><h2 id="lt-DOCTYPE-gt"><a href="#lt-DOCTYPE-gt" class="headerlink" title="&lt;!DOCTYPE&gt;"></a>&lt;!DOCTYPE&gt;</h2><h3 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h3><p>Doctype并不是html标签，它是一个声明，必须在html文件第一行，告诉浏览器用哪种模式进行渲染。对大小写不敏感。</p>
<h3 id="H4和h5中的不同："><a href="#H4和h5中的不同：" class="headerlink" title="H4和h5中的不同："></a>H4和h5中的不同：</h3><p>在html4中，需要引用DTD，因为html4基于SGML，在h5中则不需要引用DTD。在html4中有三种声明，在h5中只有一种声明，即<code>&lt;!DOCTYPE html&gt;</code>。</p>
<h3 id="浏览器的三种模式："><a href="#浏览器的三种模式：" class="headerlink" title="浏览器的三种模式："></a>浏览器的三种模式：</h3><p>浏览器有三种模式：怪异模式（Quirks mode）、接近标准模式（Almost standards mode）、以及标准模式（Standards mode）。</p>
<p>怪异模式，有时也称混合模式，是为了解决在W3C标准制定之前的页面兼容问题，而标准模式则会以W3C标准进行解析。接近标准模式和标准模式几乎一样。当doctype有问题或者不存在时会启动怪异模式。</p>
<p>除了doctype以外，还可以通过<code>x-ua-compatible</code>来进行文档类型的判定。这种设定要比doctype的优先级高。既可以写在head里，也可以在发送请求时写在header里。</p>
<p>怪异模式和标准模式的区别主要有盒模型、内联元素、溢出处理等处。<br><a id="more"></a></p>
<h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><p>盒模型有两种：IE盒模型和标准盒模型。</p>
<p> IE盒模型将盒子的padding和border都算入了盒子的尺寸里。在这种情况下：<br>box width = content width + padding left + padding right + border left + border right；<br>box height = content height + padding top + padding bottom + border top + border bottom；</p>
<p>在标准盒模型中，box的大小就是content的大小。</p>
<p>具体而言，你设置的块级元素的width和height就是box 的width和height。</p>
<h4 id="图片元素的垂直对齐方式"><a href="#图片元素的垂直对齐方式" class="headerlink" title="图片元素的垂直对齐方式"></a>图片元素的垂直对齐方式</h4><p>CSS有一个<code>vertical-align</code>属性，用来设置inline和table-cell元素的垂直对齐方式。其取值默认为baseline，可取的值还有bottom、middle等。</p>
<p>当行内元素只有图片，那么标准模式下的属性值默认为bottom，因此会在图片底部显示几px的空间。//此处存在疑问，IBM的教材和大多数地方都表明是怪异模式下有几个px空间，而IBM的示例图片和少数文章表明是标准模式下存在问题。</p>
<p>这里实测在标准模式下，默认应该为baseline，存在空白，当设置为bottom时不存在空白部分。怪异模式下baseline和bottom的表现都一样，不存在空白。</p>
<blockquote>
<p>之所以有这个问题，可以想象原本图片后边有文字，那么按照默认的消除空白的方式有，将外层块设置<code>font-size:0</code>，或者<code>line-height</code>足够小。<a href="https://www.zybuluo.com/yangfch3/note/669414" target="_blank" rel="noopener">vertical-align 与 web 图文排版 - 作业部落 Cmd Markdown 编辑阅读器</a>  </p>
</blockquote>
<h4 id="table元素中的字体"><a href="#table元素中的字体" class="headerlink" title="table元素中的字体"></a>table元素中的字体</h4><p>CSS中字体的相关属性有font-family、font-style、font-weight、font-size。在标准模式下，table将会继承上一层的字体样式，而在怪异模式下，字体的某些属性将不会被继承，特别是font-size属性。</p>
<h4 id="内联元素的尺寸"><a href="#内联元素的尺寸" class="headerlink" title="内联元素的尺寸"></a>内联元素的尺寸</h4><p>首先介绍下inline元素的类别：non-replaced和replaced。简单而言，默认具有css样式的就是replaced元素，比如input、select。none-replaced元素比如span。</p>
<p>标准模式下non-replaced无法自定义大小，而怪异模式下，可以通过width和height修改。</p>
<h4 id="元素的百分比高度"><a href="#元素的百分比高度" class="headerlink" title="元素的百分比高度"></a>元素的百分比高度</h4><p>标准模式下的元素高度尤其包含的内容决定，如果父元素没有设置高度，子元素设置一个百分比高度是无效的。实测怪异模式下如果子元素设置百分比高度，那么最终高度实际上是相对于整个文档高度？也可能是视窗高度？但是父元素的高度上实际上还是被子元素撑满。</p>
<h4 id="元素溢出的处理"><a href="#元素溢出的处理" class="headerlink" title="元素溢出的处理"></a>元素溢出的处理</h4><p>标准模式下的overflow默认取值为visible，也就是溢出内容可以显示，但是看起来是显示在元素框之外。但是在怪异模式下，当溢出时则会把元素框撑开。</p>
<h4 id="图像padding"><a href="#图像padding" class="headerlink" title="图像padding"></a>图像padding</h4><p>怪异模式下的图像padding会失效。//部分文章有这一条，但是实测和IBM教程没有。</p>
<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>用来表示超链接。<br>三种形式：</p>
<ul>
<li><code>&lt;a href=&quot;[URI]&quot;&gt;[Anchor text or image tag]&lt;/a&gt;</code></li>
<li><code>&lt;a id=&quot;#[identifier]&quot;&gt;[Anchor text or image tag]&lt;/a&gt;</code></li>
<li><p><code>&lt;a&gt;[Anchor text or image tag]&lt;/a&gt;</code></p>
<p>属性：</p>
</li>
<li>download：可以声明为下载链接，在chrome下可以直接下载，还可以指定文件名</li>
<li>href：可以为链接也可以设置为页内锚点，对于h4来说需要name属性，对于h5来说使用id</li>
<li>hreflang：iso语言代码</li>
<li>rel：规定被链接网页和当前网页的关系</li>
<li>target：在何处打开文档，在不使用frame的情况下，除了_blank之外的其他属性表现都相同，在当前页面直接打开，而_blank会打开一个新的标签页。</li>
<li>media：说明被链接的页面是为什么媒介优化的，存在运算符</li>
<li>type：被链接文档的MIME类型</li>
</ul>
<p>其中如果没有href属性，那么不能使用hreflang、media、rel、target、type属性。<br>//在最新的html5.2的标准文档中提及的属性存在差异。</p>
<h2 id="abbr"><a href="#abbr" class="headerlink" title="abbr"></a>abbr</h2><p>用来表示一个缩写。在某些浏览器中，当使用某些浏览器时，abbr的title属性可以用来展示完整版本。</p>
<h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><p>用来表示文档作者/所有者的联系信息。注意这里的联系信息并非只包括邮政地址。当它在article标签中表示这个文章的所有者，当在body标签中，表示文档的所有者。</p>
<h2 id="area"><a href="#area" class="headerlink" title="area"></a>area</h2><p>定义图像映射内部区域，必须包含在map标签内</p>
<p>属性：</p>
<ul>
<li>alt:代替文本，存在href时必须存在这个属性//不写也没问题，不知这是不是代码规范的要求</li>
<li>coords：规定区域的坐标</li>
<li>href</li>
<li>hreflang</li>
<li>media</li>
<li>rel</li>
<li>shape：规定了区域的形状，如rect、circle。默认值是default，其具体表现取决于coords的表示方式。</li>
<li>target</li>
<li>type</li>
</ul>
<p>很明显，area标签和a标签有很多类似的属性，两者的实现方式应该有相同之处。</p>
<h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><p>定义独立的内容如：帖子、博客文章、评论。<br>//由于我以往的理解认为article就是包含文章内容，所以对评论产生怀疑，查阅了相关资料得到的结论是section是一个有一定关联度的块，而article则更关联，当仅仅是需要添加一个整体的样式时，则应该直接使用div。可以说，这里让我对h5的语义化产生了一定的疑问，因为这种定义并不明确，更像是在做阅读理解。</p>
<h2 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h2><p>与article有关但是是article之外的部分，可以是文章的附属信息，也可以是网站的侧栏。<br>//！！！完全不知所云，具体应用情景到底是什么？需要阅读W3C规范还是看一下相关的书呢？</p>
<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>定义音乐。支持的文件格式有mp3、wav、ogg。不同浏览器支持的格式有区别，同时包含mp3和ogg可以解决主流浏览器的兼容问题。<br>在audio标签内写文本可以显示在不支持audio标签的浏览器上。//如果是图片可以吗？或者其他标签？canvas中至少支持图片.</p>
<p>属性：</p>
<ul>
<li>autoplay：存在该属性时音频马上播放。</li>
<li>controls：存在该属性显示音频控件。</li>
<li>loop：重新播放</li>
<li>muted： 静音</li>
<li>preload：音乐加载方式，如果存在autoplay，则忽略该属性。//那么实际上是怎样的方式，是auto吗？可选的有：auto、meta、none。</li>
<li>src：如果想要兼容使用多个可选值，那么需要使用source标签。</li>
</ul>
<h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>粗体文本。</p>
<blockquote>
<p>根据 HTML 5 的规范，<b> 标签应该做为最后的选择，只有在没有其他标记比较合适时才使用它。HTML 5 规范声明：标题应该用 <h1> - <h6> 标签表示，被强调的文本应该用 <em> 标签表示，重要的文本应该用 <strong> 标签表示，被标记的或者高亮显示的文本应该用 <mark> 标签表示。—菜鸟教程<br>//那么b的具体使用情景到底是什么？</mark></strong></em></h6></h1></b></p>
</blockquote>
<h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><p>相对链接的基准url。一个文档中最多一个，必须在head中。最好放在head的第一个。base必须要href属性或者target属性的至少一个。</p>
<p>属性：</p>
<ul>
<li>href</li>
<li>target</li>
</ul>
<h2 id="bdi"><a href="#bdi" class="headerlink" title="bdi"></a>bdi</h2><p>双向隔离元素，隔离可能以不同方向进行格式化的外部文本。浏览器兼容差。//没理解应用场景，似乎是和bdo搭配？</p>
<h2 id="bdo"><a href="#bdo" class="headerlink" title="bdo"></a>bdo</h2><p>用来覆盖默认的文本方向。用在多语言混合编排当中。</p>
<p>属性：</p>
<ul>
<li>dir：文本方向。rtl/ltr</li>
</ul>
<h2 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h2><p>引用，且是长引用，与q区别开。blockquote有缩进，是块级元素。q自带引号。</p>
<p>属性：</p>
<ul>
<li>cite：引用来源。</li>
</ul>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>文档的主体。</p>
<h2 id="br"><a href="#br" class="headerlink" title="br"></a>br</h2><p>换行符，空标签。</p>
<h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><p>按钮。不要在表单中使用button，应当使用input，否则导致问题：IE提交button之间的文本，其他浏览器提交value。//？不要使用指的是把button作为表段？</p>
<p>form中的button将默认作为submit。</p>
<blockquote>
<p>内部可以放置文本和图像，这是和input元素创建按钮的不同之处。 — 菜鸟教程</p>
<p>请始终为按钮规定 type 属性：Internet Explorer 的默认类型是 “button”，而其他浏览器中（包括 W3C 规范）的默认值是 “submit”。 —csdn</p>
</blockquote>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>disabled</li>
<li>form：规定按钮属于某个或多个表单。填写id值，多个用空格隔开。</li>
<li>formaction：提交表单的地址。与type=submit合作使用//？之前提到了button 放在form内默认是submit，是否不需要？</li>
<li>formenctype：编码。可选值：application/x-www-form-urlencoded；multipart/form-data（文件上传）；text/plain。<a href="http://www.runoob.com/tags/att-form-enctype.html" target="_blank" rel="noopener">HTML form enctype 属性 | 菜鸟教程</a></li>
<li>formmethod：http方法</li>
<li>formnovalidate：提交时不验证。对input诸如type=email而言。</li>
<li>formtarget：打开方式。</li>
<li>name</li>
<li>type：类型：button、reset、submit</li>
<li>value</li>
</ul>
<p>Button的关于form的属性可以覆盖掉form的属性。有关form的属性都需要跟type==submit配合。</p>
<h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><p>通过脚本绘制图形。canvas中的文本会显示在不支持的浏览器内。</p>
<h2 id="caption"><a href="#caption" class="headerlink" title="caption"></a>caption</h2><p>Table的标题，紧挨着table放置。</p>
<h2 id="cite"><a href="#cite" class="headerlink" title="cite"></a>cite</h2><p>作品标题。//具体应用场景？文章的标题应该用h1而非cite吧？</p>
<p>H4中cite表示引用。</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>代码块。</p>
<h2 id="col"><a href="#col" class="headerlink" title="col"></a>col</h2><p>包裹在colgroup，定义table每一列的样式。//是否违反了语义化的要求？</p>
<p>属性：</p>
<ul>
<li>span：应该包含的列数</li>
</ul>
<h2 id="colgroup"><a href="#colgroup" class="headerlink" title="colgroup"></a>colgroup</h2><p>在table之内，caption之后，thead、tbody、tfoot、tr之前使用。</p>
<p>属性：</p>
<ul>
<li>span：列数</li>
</ul>
<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>除了IE9，其他都不支持。不做了解。</p>
<h2 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h2><p>规定input值的选项列表，提供自动完成的特性。需要使用input的list属性绑定datalist的id值。内部包含option标签。</p>
<h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>自定义列表中的具体描述。与dl、dt一起使用。用于标题/内容的组合列表。与ul等的区别是，ul只包含列表项，而没有标题/内容的定义。</p>
<h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><p>删除的文本。和ins使用表示文档的删除和更正。</p>
<p>属性：</p>
<ul>
<li>cite：解释删除原因的URl</li>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD。被删除的时间</li>
</ul>
<h2 id="details"><a href="#details" class="headerlink" title="details"></a>details</h2><p>和summary一起使用，summary定义一个标题，details定义具体解释内容。结合起来的效果类似手风琴组件。使用的方法是details在外，summary是第一个子元素。</p>
<p>兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>open：是否可见</li>
</ul>
<h2 id="dfn"><a href="#dfn" class="headerlink" title="dfn"></a>dfn</h2><p>定义项目。//具体使用情景？</p>
<h2 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h2><p>定义一个对话框、确认框或者窗口。//？</p>
<p>兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>open：是否可交互</li>
</ul>
<h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>文档的一个分割区块。常用于组合块级元素，以便通过css添加样式。</p>
<h2 id="dl"><a href="#dl" class="headerlink" title="dl"></a>dl</h2><p>与dt、dd一起使用，定义一个描述列表。</p>
<h2 id="dt"><a href="#dt" class="headerlink" title="dt"></a>dt</h2><p>描述列表的名字。</p>
<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p>表示强调。</p>
<h2 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h2><p>用来嵌入外部应用或者互动程序。//部分文章指出其有更多属性，但是菜鸟教程没有更多说明。<a href="http://www.jianshu.com/p/a702ab3530f6" target="_blank" rel="noopener">HTML embed标签使用方法和属性详解 - 简书</a></p>
<p>属性：</p>
<ul>
<li>src</li>
<li>type：MIME类型</li>
</ul>
<h2 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h2><p>对form的相关元素进行分组，并且绘制边框。</p>
<p>属性：</p>
<ul>
<li>Disabled：该组中的表单是否可用。</li>
<li>form: form id</li>
<li>name</li>
</ul>
<h2 id="figcaption"><a href="#figcaption" class="headerlink" title="figcaption"></a>figcaption</h2><p>和figure一起使用，为figure定义标题。放在figure的第一个或者最后一个位置。//figure的必要性：img加title是否并不能显示，figcaption显示在图片下方。</p>
<h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><p>定义独立的流内容，如图像图表代码等。//？图表自己有caption，用figure包裹后还需要添加figcaption吗？</p>
<h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><p>文档或或文档一部分的页脚//文档一部分如何理解？一个文档可以包含多个footer。这个部分应该包括作者名字、版权信息、条款、联系方式。如果需要联系方式，应该通过address来实现。</p>
<h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p>表单。应该包含以下一个或者多个表单元素：</p>
<ul>
<li>input</li>
<li>textarea</li>
<li>button</li>
<li>select</li>
<li>option</li>
<li>optgruop ??</li>
<li>fieldset</li>
<li>label</li>
</ul>
<p>属性：</p>
<ul>
<li>accept-charset：可以处理的表单数据字符集</li>
<li>action</li>
<li>autocomplete： on|off</li>
<li>enctype：编码方法</li>
<li>method</li>
<li>name</li>
<li>novalidate</li>
<li>target</li>
</ul>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>头部元素容器。包含以下内容，其中title必须。</p>
<ul>
<li>title</li>
<li>style</li>
<li>base</li>
<li>link</li>
<li>meta</li>
<li>script</li>
<li>noscript</li>
</ul>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>文档或文档一部分的页眉。作为介绍内容或者导航的容器。<br>不能放置在footer、address、header之中。</p>
<h2 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a>hgroup</h2><p>存在副标题时对标题元素进行分组。</p>
<h2 id="h1-h6"><a href="#h1-h6" class="headerlink" title="h1-h6"></a>h1-h6</h2><p>各级标题，h1重要等级最高。</p>
<h2 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h2><p>水平线，用来分隔内容。</p>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>用来表示和其余部分不同的文本，显示为斜体//各种富有语义、样式化的文本标签的区别是什么？</p>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>规定一个内联框架，在当前html文档中嵌入另一个文档。在之间的文本可以显示在不支持该标签的浏览器中。</p>
<p>属性：</p>
<ul>
<li>name：用于在js中引用，或者作为a、form的target属性或者input、button的formtarget</li>
<li>sandbox：额外限制。取值包括：“”，allow-forms（允许表单提交）,allow-same-origin（视作普通来源？//没有任何限制？）,allow-scripts（允许脚本执行）,allow-top-navigation（可以加载内容到顶级上下文）.</li>
<li>seamless：使得看起来更像父文档的一部分//？无边框或者滚动条 浏览器支持不佳</li>
<li>src</li>
<li>srcdoc：直接写html</li>
</ul>
<h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p><img> 标签有两个必需的属性：src 和 alt。</p>
<blockquote>
<p>从技术上讲，图像并不会插入 HTML 页面中，而是链接到 HTML 页面上。<img> 标签的作用是为被引用的图像创建占位符。—-菜鸟教程</p>
</blockquote>
<p>属性：</p>
<ul>
<li>alt：替代文本</li>
<li>crossorigin：跨域属性：anonymous 、use-credentials//?</li>
<li>ismap：服务器端图像映射?<blockquote>
<p>ismap 属性将图像定义为服务器端图像映射（图像映射指的是带有可点击区域的图像）。当点击一个服务器端图像映射时，点击坐标会以 URL 查询字符串的形式发送到服务器。注意：只有当 <img> 元素属于带有有效 href 属性的 <a> 元素的后代时，才允许使用 ismap 属性。      —菜鸟教程</a></p>
</blockquote>
</li>
<li>src</li>
<li>usemap：客户器端图像映射，与mao对应</li>
</ul>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>输入字段。没有闭合标签。</p>
<p>属性：</p>
<ul>
<li>accept：audio/<em> video/</em> image/* MIME_type 只针对type=file</li>
<li>alt：只针对type=image</li>
<li>autocomplete</li>
<li>autofocus</li>
<li>checked：只针对type=checkbox/radio</li>
<li>disabled</li>
<li>form：form_id</li>
<li>formaction：针对type=submit/image</li>
<li>formenctype</li>
<li>formmethod</li>
<li>fomnovalidate</li>
<li>form_target：针对type=submit/image</li>
<li>list：datalist_id</li>
<li>max</li>
<li>maxlength</li>
<li>min</li>
<li>multiple：允许输入多个值，针对type=email/file</li>
<li>name</li>
<li>pattern：用于验证的正则表达式</li>
<li>placeholder</li>
<li>readonly</li>
<li>required</li>
<li>size：以字符数算的宽度</li>
<li>src：type=image</li>
<li>step：数字步长</li>
<li>type：button <ul>
<li>checkbox </li>
<li>color </li>
<li>date </li>
<li>datetime </li>
<li>datetime-local </li>
<li>email </li>
<li>file </li>
<li>hidden </li>
<li>image </li>
<li>month </li>
<li>number </li>
<li>password </li>
<li>radio </li>
<li>range </li>
<li>reset </li>
<li>search </li>
<li>submit </li>
<li>tel </li>
<li>text </li>
<li>time </li>
<li>url </li>
<li>week</li>
</ul>
</li>
<li>value</li>
</ul>
<h2 id="ins"><a href="#ins" class="headerlink" title="ins"></a>ins</h2><p>插入文本，与del配合</p>
<p>属性：</p>
<ul>
<li>cite：url</li>
<li>datetime</li>
</ul>
<h2 id="kbd"><a href="#kbd" class="headerlink" title="kbd"></a>kbd</h2><p>格式化文本。用于表示用户输入，通常是键盘输入，也可以包括语音输入。</p>
<h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>为input定义标注。当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>
<p>属性：</p>
<ul>
<li>for：element_id</li>
<li>form</li>
</ul>
<h2 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h2><p>为fileset设定标题。</p>
<h2 id="li"><a href="#li" class="headerlink" title="li"></a>li</h2><p>列表项目，可以用在ol、menu、ul之中。</p>
<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p>定义外部资源，主要用来加载css。只能存在于head部分。</p>
<p>属性：</p>
<ul>
<li>href</li>
<li>hreflang</li>
<li>media：media_query</li>
<li>rel </li>
<li>sizes：链接属性大小，只对rel=link起作用。//几乎不被支持</li>
<li>type：MIME_type</li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>客户端图像映射，带有可点击区域的图像。</p>
<blockquote>
<p><img>中的 usemap 属性可引用 <map> 中的 id 或 name 属性（取决于浏览器），所以我们应同时向 <map> 添加 id 和 name 属性。—-菜鸟教程</map></map></p>
</blockquote>
<p>属性：</p>
<ul>
<li>name：必须，为img-map规定名称。</li>
</ul>
<h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>带记号的突出文本。自带背景颜色。//！！这么多类似的标签需要分类对比，w3c的标准文件有详细的分类。</p>
<h2 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h2><p>定义命令列表或者菜单。主流浏览器不支持。</p>
<p>属性：</p>
<ul>
<li>label：描述</li>
<li>type：context、toolbar、list 菜单类型。</li>
</ul>
<h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>元数据，不会显示在客户端，会被浏览器解析。META元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。</p>
<p>通常位于head内//？也可以不在？</p>
<p>属性：</p>
<ul>
<li>charset</li>
<li>content：定义http-equiv或者name属性相关的元信息</li>
<li>http-equiv：content-type；default-style；refresh</li>
<li>name：application-name；author；description；generator；keywords</li>
</ul>
<h2 id="meter"><a href="#meter" class="headerlink" title="meter"></a>meter</h2><p>展示给定的数据范围，类似progress条。但标准认为它不应该用做进度条而是类似于磁盘使用情况，查询结果相关性。可以认为是表示了度量关系的非进度信息。</p>
<p>属性：</p>
<ul>
<li>form</li>
<li>high</li>
<li>low：认定为低的值，但是这里并不会影响meter的表示，例如不会因此而显示为红色</li>
<li>max</li>
<li>min</li>
<li>optimum：最优</li>
<li>value</li>
</ul>
<h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p>导航连接。//与menu的区别是什么</p>
<h2 id="noscript"><a href="#noscript" class="headerlink" title="noscript"></a>noscript</h2><p>在不支持script的时候显示其中的文本。</p>
<blockquote>
<p>无法识别 <script> 标签的浏览器会把标签的内容显示到页面上。为了避免浏览器这样做，您应当在注释标签中隐藏脚本。老式的（无法识别 <script> 标签的）浏览器会忽略注释，这样就不会把标签的内容写到页面上，而新式的浏览器则懂得执行这些脚本，即使它们被包围在注释标签中！</p>
</blockquote>
<h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>定义一个嵌入的对象，插入多媒体。//与embed的不同？在不支持该元素的时候会把其中的文本显示出来。</p>
<p>属性：</p>
<ul>
<li>data：url//href、src和data的区别是什么</li>
<li>form</li>
<li>type：MIME</li>
<li>usemap：#mapname</li>
</ul>
<h2 id="ol"><a href="#ol" class="headerlink" title="ol"></a>ol</h2><p>有序列表。</p>
<p>属性：</p>
<ul>
<li>reversed：列表倒序</li>
</ul>
<p>start和type建议使用css代替。</p>
<h2 id="optgroup"><a href="#optgroup" class="headerlink" title="optgroup"></a>optgroup</h2><p>把相关的选项组合起来。内部包含option。会在option选项之上显示一个描述，如果有label的话。</p>
<p>属性：</p>
<ul>
<li>label</li>
<li>diabled</li>
</ul>
<h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><p>下拉列表的一个选项。作为select或者datalist的元素使用。</p>
<p>属性：</p>
<ul>
<li>disabled</li>
<li>label：显示出来的值，value是实际的值，如果没有显式指定label，则显示为value</li>
<li>selected</li>
<li>value</li>
</ul>
<h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>输出结果。IE不支持。</p>
<p>属性：</p>
<ul>
<li>for：element_id，结果的得出与什么有关系，不需要用#指明</li>
<li>form</li>
<li>name</li>
</ul>
<h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><p>段落。</p>
<h2 id="param"><a href="#param" class="headerlink" title="param"></a>param</h2><blockquote>
<p><param>元素允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 <object> 或者 <applet> 标签提供参数。<br>简单说来，是为object提供参数的另一种写法。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>name</li>
<li>value：值</li>
</ul>
<h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><p>与格式化文本，保留空格和换行符，文本显示为等宽字体。常用来表示源代码。</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>最外层，除了doctype之外的容器。</p>
<p>属性：</p>
<ul>
<li>manifest：url，在链接文件中定义如何缓存。每个页面需要单独声明。//？是否适合单页面应用。</li>
</ul>
<h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><p>任务进度。使用场景与meter要分开。//不需要使用原始的width，但是如何实现平滑的过渡效果呢？</p>
<p>属性：</p>
<ul>
<li>max</li>
<li>value</li>
</ul>
<h2 id="q"><a href="#q" class="headerlink" title="q"></a>q</h2><p>短引用。对于来自另一个源的块引用使用blockquote。自带引号。</p>
<p>属性：</p>
<ul>
<li>cite//既然这里要定义来源，那么也就是允许其他来源的，所以除了长短之外 q和 blockquote的区别到底是什么？</li>
</ul>
<h2 id="rp"><a href="#rp" class="headerlink" title="rp"></a>rp</h2><p>Ruby注释。用来在不支持ruby的时候显示里边的内容。//此ruby非彼ruby！</p>
<h2 id="rt"><a href="#rt" class="headerlink" title="rt"></a>rt</h2><p>定义字符的解释或者发音。rt显示在头部。</p>
<blockquote>
<p><ruby> 元素由一个或多个需要解释/发音的字符和一个提供该信息的 <rt> 元素组成，还包括可选的 <rp> 元素，定义当浏览器不支持 “ruby” 元素时显示的内容。</p>
</blockquote>
<h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><p>注音或者字符注释。</p>
<h2 id="s"><a href="#s" class="headerlink" title="s"></a>s</h2><p>标记不正确的文本。与del表现相同。//与del的区别？</p>
<h2 id="samp"><a href="#samp" class="headerlink" title="samp"></a>samp</h2><p>短语标签，定义计算机程序的样本文本。</p>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>脚本。当src使用时，内容必须为空。</p>
<blockquote>
<p>有多种执行外部脚本的方法：如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）;如果不使用 async 且 defer=”defer”：脚本将在页面完成解析时执行;如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>async：外部脚本异步执行</li>
<li>charset：外部脚本字符编码</li>
<li>deffer：外部脚本页面解析后执行</li>
<li>src</li>
<li>type：MIME，默认为text/javascript</li>
</ul>
<h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><p>文章的某块区域。</p>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>下拉选项。</p>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>disabled</li>
<li>form：form_id</li>
<li>multiple</li>
<li>name</li>
<li>required</li>
<li>size：可见选项的数目。如果 size 属性的值大于 1，但是小于列表中选项的总数目，浏览器会显示出滚动条，表示可以查看更多选项。//safari实测直接把所有选项显示出来了。chrome正常。</li>
</ul>
<h2 id="small"><a href="#small" class="headerlink" title="small"></a>small</h2><p>小型文本。</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>为video和audio定义媒体资源。</p>
<p>属性：</p>
<ul>
<li>media：都不支持</li>
<li>src</li>
<li>type</li>
</ul>
<h2 id="span"><a href="#span" class="headerlink" title="span"></a>span</h2><p>对行内元素进行组合。不带有任何自带的样式。</p>
<h2 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h2><p>加粗。</p>
<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>样式。</p>
<blockquote>
<p>注释：如果没有使用 “scoped” 属性，则每一个 <style> 标签必须位于 head 头部区域。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>media：为不同的媒体类型规定不同的样式</li>
<li>scoped：仅应用到父元素及其子元素//？不包含子元素的子元素吗？及其子元素是兄弟元素吗？//仅有firefox支持该属性</li>
<li>type：text/css</li>
</ul>
<h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>下标。</p>
<blockquote>
<p>下标文本将会显示在当前文本流中字符高度的一半为基准线的下方，但是与当前文本流中文字的字体和字号都是一样的。下标文本能用来表示化学公式，比如 H2O。        //但是实测字号要小，而且<code>高度的一半为基准</code>是不是病句？</p>
</blockquote>
<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>和details一起使用，为details的第一个元素。浏览器支持不佳。</p>
<h2 id="sup"><a href="#sup" class="headerlink" title="sup"></a>sup</h2><p>上标。</p>
<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>表格。一个表格应该包含table、tr、th、td元素。</p>
<p>属性：</p>
<ul>
<li>border：是否有边框：“”，1//这是不是历史遗留问题，用on、off、tf或者只要有属性就可以的这几种方式的区别是什么。safari没看到显示效果。</li>
</ul>
<h2 id="tbody"><a href="#tbody" class="headerlink" title="tbody"></a>tbody</h2><blockquote>
<p><tbody> 元素应该与 <thead> and <tfoot> 元素结合起来使用，用来规定表格的各个部分（主体、表头、页脚）。通过使用这些元素，使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。<tbody> 标签必须被用在以下情境中：作为 <table> 元素的子元素，出现在 <caption>、<colgroup> 和 <thead> 元素之后。</p>
</blockquote>
<p>可以简单认为组合多个tr。</p>
<h2 id="td"><a href="#td" class="headerlink" title="td"></a>td</h2><p>标准单元格，和th创建的表头单元格区分。</p>
<p>属性：</p>
<ul>
<li>colspan</li>
<li>headers：ele_id,相关联的一个或者多个表头</li>
<li>rowspan</li>
</ul>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><p>多行文本输入。其中的文本的默认字体是等宽字体，通常是 Courier。</p>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>cols</li>
<li>disabled</li>
<li>form</li>
<li>maxlength</li>
<li>name</li>
<li>placeholder</li>
<li>readonly</li>
<li>required</li>
<li>roes</li>
<li>wrap：提交表单该如何换行：hard，soft。hard将包含换行符，必须制定cols才可以用。</li>
</ul>
<h2 id="tfoot"><a href="#tfoot" class="headerlink" title="tfoot"></a>tfoot</h2><p>表格的页脚。固定在下方不动。</p>
<h2 id="th"><a href="#th" class="headerlink" title="th"></a>th</h2><p>表头单元格。粗体居中。而td中的是普通文本左对齐。</p>
<p>属性：</p>
<ul>
<li>colspan</li>
<li>headers//？同级之间也可以相互关联？这些都有dom api支持吗</li>
<li>rowspan</li>
<li>scope：规定表头单元格是否是行、列、行组或列组的头部。col；colgroup；row；rowgroup//只在屏幕阅读器中起作用。</li>
</ul>
<h2 id="thead"><a href="#thead" class="headerlink" title="thead"></a>thead</h2><p>组合表头内容。</p>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</p>
<p>属性：</p>
<ul>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD//也可以使用内容定义，并且内容优先级更高。//？总是显示datetime的内容而非这一属性，当设定内容为日期时取datetime会取到内容的值吗？</li>
</ul>
<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>标题。</p>
<h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>表格当中的行。</p>
<h2 id="track"><a href="#track" class="headerlink" title="track"></a>track</h2><p>定义媒体元素的外部文本轨道。//兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>default</li>
<li>kind：文本类型：captions，chapters，descriptions，metadata，subtitles</li>
</ul>
<h2 id="u"><a href="#u" class="headerlink" title="u"></a>u</h2><p>定义与常规文本风格不同的文本，像拼写错误的单词或者汉语中的专有名词。//？语焉不详！！💩</p>
<blockquote>
<p>注释：HTML5 规范建议开发者尽量使用其他元素替代 <u> 元素。—菜鸟教程</p>
</blockquote>
<h2 id="ul"><a href="#ul" class="headerlink" title="ul"></a>ul</h2><p>无序列表。</p>
<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>对变量格式化。表现为斜体。</p>
<h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>视频标签。支持的格式有MP4、WebM、Ogg。其中mp4支持最好。在video中的内容会在不支持该标签时显示出来。</p>
<p>属性：</p>
<ul>
<li>autoplay//资源的加载顺序是什么？</li>
<li>controls</li>
<li>loop</li>
<li>muted</li>
<li>poster：规定视频正在下载时显示的图像，直到用户点击播放按钮。//或者设置了自动播放？</li>
<li>preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。auto；metadata；none//？</li>
<li>src</li>
</ul>
<h2 id="wbr"><a href="#wbr" class="headerlink" title="wbr"></a>wbr</h2><p>规定当窗口小到需要进行换行时在文本中的何处适合添加换行符。</p>
<hr>
<p>常见分类：</p>
<ul>
<li>document metadata</li>
<li>sections</li>
<li>grouping</li>
<li>text-level</li>
<li>embedded</li>
<li>tabular</li>
<li>forms</li>
</ul>
<hr>
<p>全局属性：</p>
<ul>
<li>Accesskey: 键盘快捷键</li>
<li>class</li>
<li>contenteditabled：可编辑</li>
<li>contextmenu：右键点击该元素的上下文菜单，绑定menuid//支持不佳</li>
<li>data-*：自定义存储数据</li>
<li>dir：文本方向//是否违反结构和样式分离的原则</li>
<li>draggable：是否可以拖动</li>
<li>dropzone：是否将数据复制，移动，或链接，或删除//不知所云，都不支持</li>
<li>hidden</li>
<li>id</li>
<li>lang</li>
<li>spellcheck：检测拼写错误，显示红色虚下划线</li>
<li>style</li>
<li>tabindex</li>
<li>title：鼠标移动到上方时显示额外信息</li>
<li>translate：都不支持</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/index.html">怪异模式（Quirks Mode）对 HTML 页面的影响</a></li>
<li><a href="http://www.runoob.com/tags/tag-abbr.html">HTML <abbr> 标签 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/tags/ref-standardattributes.html">HTML 全局属性 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/yxm440/p/7667539.html">HTML哪些是块级元素，哪些是行内元素、 - Dear阿萌 - 博客园</a></li>
<li><a href="http://www.runoob.com/tags/ref-eventattributes.html">HTML 事件 | 菜鸟教程</a></li>
<li><a href="http://blog.csdn.net/tsxw24/article/details/8315672">html5 中创建manifest缓存以及更新方法 - CSDN博客</a></li>
<li><a href="http://www.runoob.com/tags/att-source-media.html">HTML source media 属性 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/Leo_wl/p/5936919.html">WebComponent - HackerVirus - 博客园</a></li>
</ul>
</script></p></blockquote>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[制作第一个hexo主题]]></title>
      <url>/2017/12/19/%E5%88%B6%E4%BD%9C%E7%AC%AC%E4%B8%80%E4%B8%AAhexo%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="制作第一个hexo主题"><a href="#制作第一个hexo主题" class="headerlink" title="制作第一个hexo主题"></a>制作第一个hexo主题</h1><p>Hexo是一个知名的静态博客生成工具，尤其在github用户中广为人知。hexo的主题可以自由变换，但是想要找到一个完全合自己心意的主题仿佛大海捞针。与其不停寻找，不如自己动手制作一个主题，既解决了自己看什么主题都不合心的问题，还能在其中学习更多知识。  </p>
<p>这里是我写的主题<a href="https://github.com/Vevlins/hexo-theme-toki" target="_blank" rel="noopener">toki</a>以及<a href="https://vevlins.github.io">预览</a>。如果你觉得这篇文章对你起到了一点作用，欢迎你star或者fork进行进一步的学习，不必担心难度，因为这也是我第一个hexo主题。</p>
<h2 id="hexo主题结构"><a href="#hexo主题结构" class="headerlink" title="hexo主题结构"></a>hexo主题结构</h2><p>目录结构如下：</p>
<pre><code> .
├── _config.yml   
├── layout        
│   └── _partial  
└── source        
    ├── css
    ├── fonts
    └── js
</code></pre><p>其中config文件是存储与主题相关的变量，如点赞、评论功能是否开启，在整个站点下也有一个config文件，它是用来存储一些和整个站点有关的，比如站点的标题。而并非所有的hexo主题都支持点赞，所以点赞功能的开启放在具体的theme下更合适。  </p>
<p>Layout文件夹下存放的是布局模板文件，可以用ejs、jade等编写，里边包含index、post等hexo中默认使用的模板，也可以编写一个自己额外定义的页面，比如about页。对于这些自己额外编写的模板，需要用户自己执行<code>hexo new [layout] &lt;title&gt;</code>中声明<code>layout:about</code>才可以。_partial子文件夹中存放的是一些可以服用的组件或者想要细分的部分，如打赏部分、点赞部分，可以分离出来，使得结构更加清晰明了。</p>
<p>Source文件夹下存放的是资源文件，比如css文件，字体文件，图片文件等。source文件在最后生成的时候会把其中的文件都直接放在根目录下，所以在文件中引用地址的时候不需要写<code>source</code>，而是直接写<code>./css/app.css</code>就可以。</p>
<h2 id="hexo变量和函数"><a href="#hexo变量和函数" class="headerlink" title="hexo变量和函数"></a>hexo变量和函数</h2><p>想要编写一个hexo模板，我们在其中必定要添加一些hexo站点下的信息，如网站的title。还有我们之前提到的主题下也有一个config文件，其中的变量我们也需要调用。除了以上两个部分，hexo还提供了一些用来简化操作的辅助函数。<br>具体的变量和辅助函数可以访问<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a>。这里只介绍一些常用的。</p>
<p>变量： </p>
<ul>
<li>page.title</li>
<li>site.posts</li>
<li>page.excerpt<br>关于整个站点下的config文件需要通过config.xxx来进行调用，对于这个主题的config文件需要通过theme.xxx来调用。而诸如page、site等就是hexo自身的一些变量了。</li>
</ul>
<p>函数：</p>
<ul>
<li>&lt;%- list_categories([options]) %&gt;</li>
<li>&lt;%- titlecase(string) %&gt;</li>
</ul>
<h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><p>Hexo已经定义的模板文件有以下几个：</p>
<ul>
<li>index</li>
<li>post</li>
<li>page</li>
<li>archive</li>
<li>category</li>
<li>tag<br>特别的还有一个layout文件，可以在layout文件中编写一些公共部分，实现在其他页面中的复用，如果你对模板引擎并不了解，我建议你先学习相关知识是非常必要的，不过不用太多，花十几分钟大概理解一下就可以。<br>当然你并不需要都要包括这些模板，只是写了这些模板文件后，你不需要<code>hexo new</code>它，它也有固定的页面地址。每个主题最少可以只包括一个index页面即可。但是为了功能上比较完善，我还是建议最少编写index、post、archive这三个页面。<br>在hexo中编写文件，需要选择一种模板引擎，这里我使用的ejs,hexo自己提供的ejs的支持，而且理解起来也很容易，没什么选择其他的理由。当然如果你想要编写的主题比较庞大，那还是选择自己最顺手的好。<br>我们分别讲解index、post、archive的编写，然后在进行拓展。</li>
</ul>
<h3 id="layout页面"><a href="#layout页面" class="headerlink" title="layout页面"></a>layout页面</h3><p>这一页要包含菜单、页脚声明。</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;
             &lt;!-- 引入站点的标题--&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        &lt;%- css(&#39;./css/app.css&#39;) %&gt;
          &lt;!-- 这里的css 就是一个辅助函数--&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;%- partial(&#39;_partial/header&#39;) %&gt;
            &lt;!-- 引入其他部分--&gt;
            &lt;main&gt;
                 &lt;%- body %&gt;
                &lt;!-- 这里会将其他页面的内容填充进来组成一个完整的页面 --&gt;
            &lt;/main&gt;
    &lt;%- partial(&#39;_partial/footer&#39;) %&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="index页面"><a href="#index页面" class="headerlink" title="index页面"></a>index页面</h3><p>显然的，这是我们进入网站看到的第一个页面，一般来说，这个页面要包含最近的文章展示，根据个人喜好，也可以添加标签云、最新评论等。</p>
<pre><code class="html">&lt;section class=&quot;posts&quot;&gt;
    &lt;% page.posts.each(function (post) { %&gt;
        &lt;article class=&quot;post&quot;&gt;
            &lt;h1&gt;
                &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt; 
                    &lt;%= post.title %&gt; 
                &lt;/a&gt;
            &lt;/h1&gt;
            &lt;%- partial(&#39;_partial/meta&#39;,{page:post}) %&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;% if(post.excerpt) {%>
                <%- post.excerpt="" %="">
                <%} else{="" %&gt;="" &lt;%-="" post.content="" &lt;%="" }="" &lt;="" div&gt;="" &lt;div="" class="&quot;continue&quot;&gt;" &lt;a="" href="&quot;&lt;%-" url_for(post.path)="" %&gt;&quot;&gt;="" __(&#39;post.continue&#39;)="" -%&gt;="" &lt;i="" fa-angle-right&quot;="" aria-hidden="&quot;true&quot;&gt;&lt;/i&gt;" a&gt;="" article&gt;="" })="" section&gt;="" partial(&#39;_partial="" paginator&#39;)="" <="" code=""></%}></%-></code></pre>
<p>这个页面看起来要复杂了许多。我们从大到小入手：通过page.posts我们获取到了文章列表，对于其中的post，又有title、tag、category等量。content四获取文章的内容，而excerpt是用来获取摘要。如果在书写markdown 文章时加入<code>&lt;!-- more --&gt;</code>那么在这之前的内容将会被视为摘要，如果你懒得做，也可以使用自动生成摘要的插件。<br><code>&lt;%- partial(&#39;_partial/meta&#39;,{page:post}) %&gt;</code>这段代码中比layout页面中的引入要多出了一个参数，这里是将meta这个页面中的page都赋值为post。主要是用来进行参数传递作用，这里是因为meta不仅在主页要用，在文章页也要使用，而文章页中我们时通过page.tags来取得内容的。<br><code>&lt;%- __(&#39;Post.Continue&#39;) -%&gt;</code>这个写法看起来有些奇怪，它也是一个辅助函数吗？虽然在hexo的文档中没有把它明确为一个辅助函数，但实际上这确实是一个函数，它的作用是进行站点国际化。听起来很高大上吧！不过其实实现很简单，在上述的项目结构中我们还可以增加一个language目录，其中针对每一种语言增加一个yml文件，把需要国际化的量储存在里边，根据整个站点config中的language声明的语言而进行动态调整。比如，我们在en.yml 将Continue声明为continue，在zh-CN.yml中声明为继续阅读。<br><code>&lt;%- partial(&#39;_partial/paginator&#39;) %&gt;</code>这里我们引入了一个paginator组件，它是用来分页的，跟普通的分页不同，hexo中分页的实际工作我们丝毫没有涉及，只需要简单地使用辅助函数就可以：</p>
<pre><code class="html">&lt;%- paginator({
      prev_text: &quot;&amp;laquo; &quot;+  __(&#39;Paginator.Prev&#39;),
      next_text: __(&#39;Paginator.Next&#39;)+&quot; &amp;raquo;&quot;
  }) %&gt;
</code></pre>
<h3 id="post页面"><a href="#post页面" class="headerlink" title="post页面"></a>post页面</h3><p>有了前面两个页面的基础，这里就不废话了。</p>
<pre><code class="html">&lt;article class=&quot;post&quot;&gt;
            &lt;h1&gt;
                &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(page.path) %&gt;&quot;&gt; 
                    &lt;%= page.title %&gt; 
                &lt;/a&gt;
            &lt;/h1&gt;
&lt;%- partial(&#39;_partial/meta&#39;) %&gt;
&lt;%- partial(&#39;_partial/toc&#39;) %&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;%- page.content %&gt;
            &lt;/div&gt;
&lt;%- partial(&#39;_partial/copyright&#39;) %&gt;
&lt;/article&gt;
</code></pre>
<h3 id="archive页面"><a href="#archive页面" class="headerlink" title="archive页面"></a>archive页面</h3><pre><code class="html">&lt;section class=&quot;archive&quot;&gt;
  &lt;ul class=&quot;post-archive&quot;&gt;
    &lt;% var last = 1997 %&gt;
    &lt;% page.posts.each(function (post) { %&gt;
    &lt;% if (last != post.date.year()){ %&gt;
     &lt;span class=&quot;year&quot;&gt; &lt;a&gt;&lt;%=post.date.year()%&gt;&lt;/a&gt;&lt;/span&gt;
      &lt;% last = post.date.year()%&gt;
    &lt;%}%&gt;
      &lt;li class=&quot;post-item&quot;&gt;
        &lt;span class=&quot;date&quot;&gt;&lt;%= date(post.date, &quot;MM-DD&quot;) %&gt;&lt;/span&gt;
        &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;
      &lt;/li&gt;
    &lt;% }) %&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;%- partial(&#39;_partial/paginator&#39;) %&gt;
</code></pre>
<p>对这个页面，我们只讲解一下<code>&lt;% var last = 1997 %&gt;</code>,这里参考了hexo自带主题landscape的方案。为了实现按照不同年份归档，先定义一个很小的年份值，如果以后的年份不同于之前的值，那就把last置为它，并且显示一个较大的年份块。</p>
<h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>这里我们选用的是stylus来书写css，选择它的原因也很简单，因为hexo自带。</p>
<p>这里已经没什么需要额外讲解的了，css总不会也跟其他的有不同吧。只是请注意，为了保证你的主题能够被更多人使用，请务必做好不同浏览器的兼容。类似地，你也应该在配置文件中增加更多的自定义开关，你不能默认认为用户总是想向你提供两个打赏的二维码，所以一个二维码的样式呢？或者索性不想要打赏呢？</p>
<h2 id="提交主题"><a href="#提交主题" class="headerlink" title="提交主题"></a>提交主题</h2><p>经历了以上这些，你的主题已经基本具有可用性了，但是如何让更多人知道并且使用你的主题呢？你可以通过在各种技术型社区发帖，也可以发动身边的人使用。更官方的方案，是向hexo提交自己的主题。你具体可以参考这里<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">主题| Hexo</a>。准备好一份截图，fork一份<a href="https://github.com/hexojs/site" target="_blank" rel="noopener">hexojs/site</a>添加自己的主题信息和截图后再向官方提出pull request请求，不必担心，因为他们真的很友善。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/12/14/Hello-World/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hello </tag>
            
            <tag> world </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一份简历]]></title>
      <url>/2017/12/14/%E4%B8%80%E4%BB%BD%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<p><img src="http://images.ifanr.cn/wp-content/uploads/2015/12/typer.jpg" alt="">  </p>
<p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>
<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=450567505&auto=0&height=66"></iframe>

<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>
<p>举个例子，下边内容是虚构的：</p>
<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（这部分是大家都会写的）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（通过量化的数字来增强可信度）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。）。</p>
<p><strong>具体</strong>、量化、有说服力，是技术简历特别需要注重的地方。</p>
<p>以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>
]]></content>
      
        <categories>
            
            <category> 求职 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dillinger]]></title>
      <url>/2017/12/14/Dillinger/</url>
      <content type="html"><![CDATA[<h1 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a>Dillinger</h1><p><a href="https://nodesource.com/products/nsolid" target="_blank" rel="noopener"><img src="http://cdn2.jianshu.io/assets/web/web-note-ad-1-10f08e404d3887d2d45a4bc8f1831403.png" alt="N|Solid"></a></p>
<p>Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor.</p>
<ul>
<li>Type some Markdown on the left</li>
<li>See HTML in the right</li>
<li>Magic </li>
</ul>
<a id="more"></a>
<h1 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features!"></a>New Features!</h1><ul>
<li>Import a HTML file and watch it magically convert to Markdown</li>
<li>Drag and drop images (requires your Dropbox account be linked)</li>
</ul>
<p>You can also:</p>
<ul>
<li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li>
<li>Drag and drop markdown and HTML files into Dillinger</li>
<li>Export documents as Markdown, HTML and PDF</li>
</ul>
<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As <a href="http://daringfireball.net" target="_blank" rel="noopener">John Gruber</a> writes on the <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown site</a></p>
<blockquote>
<p>The overriding design goal for Markdown’sformatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.</p>
</blockquote>
<p>This text you see here is <em>actually</em> written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right.</p>
<h3 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h3><p>Dillinger uses a number of open source projects to work properly:</p>
<ul>
<li><a href="http://angularjs.org" target="_blank" rel="noopener">AngularJS</a> - HTML enhanced for web apps!</li>
<li><a href="http://ace.ajax.org" target="_blank" rel="noopener">Ace Editor</a> - awesome web-based text editor</li>
<li><a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener">markdown-it</a> - Markdown parser done right. Fast and easy to extend.</li>
<li><a href="http://twitter.github.com/bootstrap/" target="_blank" rel="noopener">Twitter Bootstrap</a> - great UI boilerplate for modern web apps</li>
<li><a href="http://nodejs.org" target="_blank" rel="noopener">node.js</a> - evented I/O for the backend</li>
<li><a href="http://expressjs.com" target="_blank" rel="noopener">Express</a> - fast node.js network app framework <a href="http://twitter.com/tjholowaychuk" target="_blank" rel="noopener">@tjholowaychuk</a></li>
<li><a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp</a> - the streaming build system</li>
<li><a href="http://breakdance.io" target="_blank" rel="noopener">Breakdance</a> - HTML to Markdown converter</li>
<li><a href="http://jquery.com" target="_blank" rel="noopener">jQuery</a> - duh</li>
</ul>
<p>And of course Dillinger itself is open source with a <a href="https://github.com/joemccann/dillinger" target="_blank" rel="noopener">public repository</a><br> on GitHub.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Dillinger requires <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> v4+ to run.</p>
<p>Install the dependencies and devDependencies and start the server.</p>
<pre><code class="sh">$ cd dillinger
$ npm install -d
$ node app
</code></pre>
<p>For production environments…</p>
<pre><code class="sh">$ npm install --production
$ NODE_ENV=production node app
</code></pre>
<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>README</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dropbox</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md" target="_blank" rel="noopener">plugins/dropbox/README.md</a></td>
</tr>
<tr>
<td>Github</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md" target="_blank" rel="noopener">plugins/github/README.md</a></td>
</tr>
<tr>
<td>Google Drive</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md" target="_blank" rel="noopener">plugins/googledrive/README.md</a></td>
</tr>
<tr>
<td>OneDrive</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md" target="_blank" rel="noopener">plugins/onedrive/README.md</a></td>
</tr>
<tr>
<td>Medium</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md" target="_blank" rel="noopener">plugins/medium/README.md</a></td>
</tr>
<tr>
<td>Google Analytics</td>
<td><a href="https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md" target="_blank" rel="noopener">plugins/googleanalytics/README.md</a></td>
</tr>
</tbody>
</table>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><p>Want to contribute? Great!</p>
<p>Dillinger uses Gulp + Webpack for fast developing.<br>Make a change in your file and instantanously see your updates!</p>
<p>Open your favorite Terminal and run these commands.</p>
<p>First Tab:</p>
<pre><code class="sh">$ node app
</code></pre>
<p>Second Tab:</p>
<pre><code class="sh">$ gulp watch
</code></pre>
<p>(optional) Third:</p>
<pre><code class="sh">$ karma test
</code></pre>
<h4 id="Building-for-source"><a href="#Building-for-source" class="headerlink" title="Building for source"></a>Building for source</h4><p>For production release:</p>
<pre><code class="sh">$ gulp build --prod
</code></pre>
<p>Generating pre-built zip archives for distribution:</p>
<pre><code class="sh">$ gulp build dist --prod
</code></pre>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Dillinger is very easy to install and deploy in a Docker container.</p>
<p>By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.</p>
<pre><code class="sh">cd dillinger
docker build -t joemccann/dillinger:${package.json.version}
</code></pre>
<p>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p>
<p>Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):</p>
<pre><code class="sh">docker run -d -p 8000:8080 --restart=&quot;always&quot; &lt;youruser&gt;/dillinger:${package.json.version}
</code></pre>
<p>Verify the deployment by navigating to your server address in your preferred browser.</p>
<pre><code class="sh">127.0.0.1:8000
</code></pre>
<h4 id="Kubernetes-Google-Cloud"><a href="#Kubernetes-Google-Cloud" class="headerlink" title="Kubernetes + Google Cloud"></a>Kubernetes + Google Cloud</h4><p>See <a href="https://github.com/joemccann/dillinger/blob/master/KUBERNETES.md" target="_blank" rel="noopener">KUBERNETES.md</a></p>
<h3 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h3><ul>
<li>Write MORE Tests</li>
<li>Add Night Mode</li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
<p><strong>Free Software, Hell Yeah!</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> Dillinger </tag>
            
            <tag> Online </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to MWeb]]></title>
      <url>/2017/12/14/Welcome-to-MWeb/</url>
      <content type="html"><![CDATA[<h1 id="Welcome-to-MWeb"><a href="#Welcome-to-MWeb" class="headerlink" title="Welcome to MWeb"></a>Welcome to MWeb</h1><p>What is MWeb? MWeb is a Pro Markdown writing, note taking and static blog generator App.</p>
<p>MWeb has two Mode, External Mode and Library Mode.<br>In External Mode, you can edit classic text and markdown files from anywhere on your Mac. As an example, you can point MWeb to a folder on Dropbox. Shortcuts <code>CMD + E</code> or <code>View</code> - <code>Open External</code> to open External Mode.<br>Library Mode design for note taking and static blog/website generator. Shortcuts <code>CMD + L</code> or <code>View</code> - <code>Open Library</code> to open Library Mode.<br>External Mode’s folders and Library Mode are supported <strong>Full Text Search</strong>, drag &amp; drop or paste to insert images.</p>
<a id="more"></a>
<h2 id="View-Mode-and-Live-Preview"><a href="#View-Mode-and-Live-Preview" class="headerlink" title="View Mode and Live Preview"></a>View Mode and Live Preview</h2><p>For Minimal UI, MWeb’s interface only has a few buttons. The right-top corner buttons shortcuts: <code>CMD + 7/8/9</code>. <code>CMD + 7</code> is Library Mode only. For enable Typewriter Scrolling, Dark Mode and switch panes, please check the <code>View</code> menu.</p>
<ul>
<li>Shortcut: <code>CMD + 1</code> to toggle Editor Only and Three Panes.</li>
<li>Shortcut: <code>CMD + 2</code> to toggle Two Panes and Editor Only.</li>
<li>Shortcut: <code>CMD + 3</code> to toggle Three Panes and Editor Only.</li>
<li>Shortcut: <code>CMD + 4</code> to toggle Editor/Preview and Three Panes.</li>
<li>Shortcut: <code>CMD + R</code> to toggle Editor and Live Preview.</li>
</ul>
<p><strong>Note</strong>: When <code>Preferences</code> - <code>General</code> - <code>Resize window when hide pane</code> is enable, shortcuts <code>CMD + 1/2/3/4</code> behavior will be changed. You can enable this option and try it. When the <code>Live Preview (CMD + R) open new window</code> is enable, shortcut <code>CMD + R</code> will open new window for Live Preview.</p>
<h2 id="More-about-MWeb"><a href="#More-about-MWeb" class="headerlink" title="More about MWeb"></a>More about MWeb</h2><ul>
<li>MWeb used Github Flavored Markdown syntax, please open <code>Help</code> - <code>Markdown syntax</code> for detail.</li>
<li>MWeb official website: <a href="http://www.mweb.im" target="_blank" rel="noopener">http://www.mweb.im</a></li>
<li>MWeb documents: <code>Help</code> - <code>Help...</code> or <a href="http://www.mweb.im/help.html" target="_blank" rel="noopener">http://www.mweb.im/help.html</a>.</li>
</ul>
<h2 id="Help-us-to-make-MWeb-better"><a href="#Help-us-to-make-MWeb-better" class="headerlink" title="Help us to make MWeb better!"></a>Help us to make MWeb better!</h2><ol>
<li>Tell your friends about MWeb.</li>
<li>Send a feedback: <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#99;&#x6f;&#100;&#101;&#114;&#x66;&#111;&#114;&#97;&#114;&#116;&#x2b;&#50;&#x33;&#x33;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#99;&#x6f;&#100;&#101;&#114;&#x66;&#111;&#114;&#97;&#114;&#116;&#x2b;&#50;&#x33;&#x33;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></li>
<li>Leave a review or at least a rating in Mac App Store.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MWeb </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎使用MWeb]]></title>
      <url>/2017/12/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8MWeb/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用-MWeb"><a href="#欢迎使用-MWeb" class="headerlink" title="欢迎使用 MWeb"></a>欢迎使用 MWeb</h1><p>首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。</p>
<p>然后这里<strong>重点说明</strong>一下：MWeb 有<strong>两个模式</strong>，外部模式和文档库模式。外部模式中把本地硬盘或 Dropbox 等网盘的文件夹引入，就可以使用 MWeb 的拖拽、粘贴插入图片、图床等特色功能。文档库模式设计为用于记笔记和静态博客生成。对于有<strong>同步和协作需求</strong>的朋友，请使用外部模式！使用视图菜单或者快捷键 <code>CMD + E</code> 可以打开外部模式，<code>CMD + L</code> 可以打开文档库。</p>
<a id="more"></a>
<h2 id="MWeb-大概用法、视图模式和预览界面"><a href="#MWeb-大概用法、视图模式和预览界面" class="headerlink" title="MWeb 大概用法、视图模式和预览界面"></a>MWeb 大概用法、视图模式和预览界面</h2><p>MWeb 使用菜单、快捷键和少量按钮完成所有操作，一般常用的操作都会有快捷键。整个界面使用三栏式结构，非常简洁。左边的第一第二栏是使用<strong>右键</strong>和底部的几个按钮操作，另外就是右上角有三个按钮了（外部模式是两个），快捷键分别是：<code>CMD + 7/8/9</code>。另外就是切换视图模式的快捷键了，建议看一下 <code>标记</code> 菜单和 <code>视图</code> 菜单。</p>
<ul>
<li>快捷键：<code>CMD + 1</code> 是在仅编辑器模式和三栏模式中切换。</li>
<li>快捷键：<code>CMD + 2</code> 是在二栏模式和仅编辑器模式中切换。</li>
<li>快捷键：<code>CMD + 3</code> 是在三栏模式和仅编辑器模式中切换。</li>
<li>快捷键：<code>CMD + 4</code> 是在编辑器/预览模式和三栏模式中切换。</li>
<li>快捷键：<code>CMD + R</code> 是在编辑器和预览模式中切换。</li>
</ul>
<p><strong>特别说明</strong>：当 <code>偏好设置</code> - <code>通用设置</code> 中 <code>切换视图模式（二三栏）时，保持编辑器大小不变</code> 被勾选后，<code>CMD + 1/2/3/4</code> 的行为会发生变化，具体如何，可以尝试一下。而 <code>在新窗口中打开实时预览（CMD + R）</code> 这个选项被选中后，快捷键 <code>CMD + R</code> 会打开新的窗口来预览文档。</p>
<h2 id="更多的了解-MWeb"><a href="#更多的了解-MWeb" class="headerlink" title="更多的了解 MWeb"></a>更多的了解 MWeb</h2><ul>
<li>MWeb 使用的是 Github Flavored Markdown 语法，请一定要打开 <code>帮助</code> - <code>Markdown 语法</code> 菜单看一下。</li>
<li>请一定要去官网首页看看，网址：<a href="http://zh.mweb.im" target="_blank" rel="noopener">http://zh.mweb.im</a>。</li>
<li>请一定要看一下官网的帮助，用菜单 <code>帮助</code> - <code>帮助...</code> 即可打开，也可以用网址：<a href="http://zh.mweb.im/help.html" target="_blank" rel="noopener">http://zh.mweb.im/help.html</a>。</li>
</ul>
<h2 id="帮助我们改进-MWeb"><a href="#帮助我们改进-MWeb" class="headerlink" title="帮助我们改进 MWeb"></a>帮助我们改进 MWeb</h2><p>如果你喜欢 MWeb，想让它变得更好，你可以：</p>
<ol>
<li>推荐 MWeb，让更多的人知道。</li>
<li>给我们发反馈和建议：<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x63;&#x6f;&#100;&#101;&#114;&#102;&#x6f;&#x72;&#97;&#x72;&#x74;&#43;&#50;&#x33;&#51;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x63;&#x6f;&#100;&#101;&#114;&#102;&#x6f;&#x72;&#97;&#x72;&#x74;&#43;&#50;&#x33;&#51;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></li>
<li>在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MWeb </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎使用马克飞象]]></title>
      <url>/2016/12/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>
<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>
<ul>
<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>
<li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li>
<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>
</ul>
<hr>
<h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code class="python">@requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None
class SomeClass:
    pass
&gt;&gt;&gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
</code></pre>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 马克飞象 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
