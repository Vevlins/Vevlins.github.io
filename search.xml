<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[从零制作网页样式库]]></title>
      <url>/2018/03/07/%E4%BB%8E%E9%9B%B6%E5%88%B6%E4%BD%9C%E7%BD%91%E9%A1%B5%E6%A0%B7%E5%BC%8F%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="广告-amp-教材"><a href="#广告-amp-教材" class="headerlink" title="广告&amp;教材"></a>广告&amp;教材</h2><p><a href="https://github.com/Vevlins/ponyo" target="_blank" rel="noopener">GitHub - Vevlins/ponyo: 一个puputongtong的前端样式库</a></p>
<p>这是我自己做的练习，包含若干基本元素和组件的样式控制，压缩后的体积只有25kb，项目结构和代码都比较清晰，加上这一系列的文章，应该很好理解。</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>不说废话，先来看看项目结构。最主要的部分是<code>src</code>/<code>dist</code>/<code>gulpfile.js</code>。</p>
<ul>
<li>src 是dist中的sass和pug编译之后的文件，为常规的css和html文件。</li>
<li>dist是sass文件和pug文件，sass是用来编写样式的工具，pug是为了编写实例网页，方便我们在开发中实时看到效果。</li>
<li>gulpfile.js是前端工程自动化的文件，通过gulp这个工具控制sass和pug的编译、css的压缩、浏览器自动刷新等。通过它，我们对源文件进行更改后按下<code>crtl+s</code>就可以在浏览器中看到更改后的样式，而不需要在命令行下手工编译，再在浏览器中刷新。</li>
</ul>
<a id="more"></a>
<p>至于src中sass文件的组成，在以下目录树中有相关注释说明。</p>
<pre><code>├── LICENSE
├── README.md
├── dist //pug和sass输出到dist目录
│   ├── css
│   │   ├── ponyo.css
│   │   └── ponyo.min.css
│   └── example
│      └── index.html
├── docs //托管在github pages的文档
│   ├── index.html
│   └── ponyo.min.css
├── gulpfile.js //！重要，前端工程自动化文件
├── package-lock.json
├── package.json
└── src
    ├── css
    │   ├── base//全局的基础样式控制
    │   │   ├── base.scss
    │   │   ├── normalize.scss
    │   │   ├── print.scss
    │   │   └── typography.scss
    │   ├── component//由多个标签或者标签加脚本组成的组件
    │   │   ├── alert.scss
    │   │   ├── annimation.scss
    │   │   ├── article.scss
    │   │   ├── modal.scss
    │   │   ├── navbar.scss
    │   │   ├── notice.scss
    │   │   ├── pagination.scss
    │   │   ├── panel.scss
    │   │   ├── progress.scss
    │   │   ├── tab.scss
    │   │   └── tip.scss
    │   ├── element//单一标签
    │   │   ├── badge.scss
    │   │   ├── button.scss
    │   │   ├── form.scss
    │   │   ├── icon.scss
    │   │   ├── img.scss
    │   │   ├── list.scss
    │   │   └── table.scss
    │   ├── layout//布局上的样式
    │   │   ├── grid.scss//栅格系统
    │   │   └── util.scss
    │   ├── ponyo.scss
    │   └── variable.scss
    ├── example
    │   └── index.pug
    └── js
        ├── component
        │   ├── alert.js
        │   ├── collapse.js
        │   ├── modal.js
        │   ├── progress.js
        │   └── tip.js
        └── ponyo.js
</code></pre><h2 id="gulp文件"><a href="#gulp文件" class="headerlink" title="gulp文件"></a>gulp文件</h2><p>越是庞大的工程，越要从头开始认真搭建骨架。</p>
<pre><code>gulp.task(&#39;build:scss&#39;, function () {
    return gulp.src(&#39;./src/css/ponyo.scss&#39;)
        .pipe(sourcemaps.init())//sourcemap,调试时用来定位压缩后的文件
        .pipe(header(banner, { pkg : pkg } ))
        .pipe(autoprefixer({//浏览器兼容问题，自动加私有前缀
            browsers: [&#39;since 2010&#39;],
            cascade: false
        }))
        .pipe(sass().on(&#39;error&#39;, sass.logError))
        .pipe(sourcemaps.write())
        .pipe(gulp.dest(&#39;./dist/css/&#39;));
});

gulp.task(&#39;compress:scss&#39;,function(){
    return gulp.src(&#39;./src/css/ponyo.scss&#39;)
    .pipe(header(banner, { pkg : pkg } ))
    .pipe(autoprefixer({
        browsers: [&#39;since 2010&#39;],
        cascade: false
    }))
    .pipe(sass({outputStyle: &#39;compressed&#39;}).on(&#39;error&#39;, sass.logError))
    .pipe(cleanCSS())//压缩css
    .pipe(rename(&quot;ponyo.min.css&quot;))
    .pipe(gulp.dest(&#39;./dist/css/&#39;));
})

gulp.task(&#39;build:pug&#39;,function(){
    return gulp.src(&#39;./src/example/index.pug&#39;)
        .pipe(pug().on(&#39;error&#39;,function(){}))
        .pipe(gulp.dest(&#39;./dist/example/&#39;));
})

gulp.task(&#39;connect&#39;,function() {//在dist目录下创建一个本地服务器
    connect.server({
        root: &#39;dist/&#39;,
        livereload: true
    });
})

gulp.task(&#39;reload:html&#39;,[&#39;build:pug&#39;],function(){
    return gulp.src(&#39;./dist/example/**/*.html&#39;)
    .pipe(connect.reload());
})

gulp.task(&#39;reload:css&#39;,[&#39;build:scss&#39;,&#39;compress:scss&#39;],function(){
    return gulp.src(&#39;./src/**/*.scss&#39;)
    .pipe(connect.reload());
})

gulp.task(&#39;watch&#39;,[&#39;connect&#39;],function(){
    gulp.watch(&#39;./src/**/*.scss&#39;,[&#39;reload:css&#39;]);//当css文件变化时服务器刷新
    gulp.watch(&#39;./src/example/index.pug&#39;,[&#39;reload:html&#39;]);//当html文件变化时服务器刷新
})

gulp.task(&#39;default&#39;,[&#39;connect&#39;,&#39;watch&#39;])
</code></pre>]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[见微知著,还是新式连坐?]]></title>
      <url>/2018/03/05/%E8%A7%81%E5%BE%AE%E7%9F%A5%E8%91%97-%E8%BF%98%E6%98%AF%E6%96%B0%E5%BC%8F%E8%BF%9E%E5%9D%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>合肥女教师阻拦高铁发车一事不断发酵，社会舆论也是甚嚣尘上。该教师的单位对其进行停职处分，央视专门进入地方教育局调查。而后《新京报》则发文表示应该保护该女子。（澎湃新闻，1月12号）</p>
</blockquote>
<p>对于此事，笔者关注了一个点，即该女子的教师身份和舆论因其身份而导致的师德缺失，不配做老师的观点。</p>
<p>据永红路小学官方网站信息显示，2009年罗海丽所带班级荣获区级优秀中队，2010年她又被评为区级德育先进个人，2011年被评委区级优秀班主任。她连续3年荣获辅导学生作文比赛金奖，2011年8月教授的阅读录像课获得安徽省录像课一等奖，2011年12月荣获区级语文教学能手。</p>
<p>对于这些荣誉，有好事者问大家如何看待，也有网友慷慨激昂，批评该女子完全没有师德，不配教育学生，应当彻底开除。还有部分人恶意揣测这些荣誉都是凭着心机争抢来的。<br><a id="more"></a><br>孙中山抛弃原配妻子，仍被称作国父；郭沫若圆滑世故，不失为一代大师；小鲜肉私生活不检，还有脑残粉吹捧。为何教师身份一出，就要被全体抨击，并且“见微知著”，判定其师德缺失，之前的荣誉也都不是正常途径获得的呢？这种有罪的推定与文革时期的全民狂热是否有些许相似？</p>
<p>各种成功学书籍都极力吹捧以小事识人。然后这种极端情况下情绪处理不当所做的行动当真就可以作为罪证，判人“死刑”吗？单从理性的角度思考，这件事情的发生是有特定条件的，即丈夫晚点但是列车还未离站，情急之下有不明智的举动当然仍是违法行为，但是这种情况下的表现难道就是单位生活中的她吗？先是从小见大批判这个人道德有问题，接着又是从大到小，质疑一切取得的身份、荣誉。这也能算是有理有据吗？这不是规则，这是暴力。</p>
<p>“师德”这两个字一出，好似千斤大鼎，压的人喘不过气来。不错，教师这种特殊职业需要有更严格的行为准则规范，但是凡事要讲求规则，上车晚点不应该蛮横无理阻拦列车，媒体和司法也不能因为一件事引起舆论关注就越权行使权力，迎合公众。</p>
<p>道德和职业是两部分，私德和职业道德也是两部分。教师行业特殊，但是也是对于其职业道德的要求，不应该收红包、歧视学生等。假如因为一个教师身份便要求是道德上的圣人，那身为政治家的孙中山，是不是因为抛弃原配也要被怀疑以后便会抛弃国家？身为文学家的郭沫若，是不是因为圆滑世故也要被怀疑令后代文人没有骨气？身为演员的小鲜肉，是不是因为私生活不检点也要被怀疑粉丝也会有样学样？</p>
<p>因为一件事，便定罪整个人，这不是新式连坐吗？</p>
]]></content>
      
        <categories>
            
            <category> 杂感 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 连坐 </tag>
            
            <tag> 师德 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络基础]]></title>
      <url>/2018/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h1><p>以谢希仁《计算机网络》第五版教学课件为参考整理.</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><ul>
<li>分组交换和电路交换的比较.</li>
<li>有关码元、信道、香农定律、奈式准则、信噪比的计算.</li>
<li>码分复用的计算</li>
<li>CRC</li>
<li>0比特填充</li>
<li>CSMA/CD 协议</li>
<li>网桥自学习转发表</li>
<li>VLAN</li>
<li>虚电路和数据报</li>
<li>ARQ、滑动窗口、停止等待</li>
<li>RIP和OSPF</li>
<li>IP分类、子网掩码计</li>
<li>TCP的握手和挥手</li>
<li>路由表更新</li>
<li>局域网组网配置</li>
</ul>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>计算机网络的定义:计算机网络是一些互相连接的、自治的计算机的集合</li>
<li>我们平时说的网络包含三个:电信网络、有线电视网络、计算机网络.</li>
<li>internet指多个计算机网络互联形成的网络.Internet是专有名词,指的是全球最大的计算机网络,前身是ARPANET.</li>
<li>计算机网络发展的三个阶段:第一个阶段是从单个网络 ARPANET 向互联网发展、第二个阶段是建成了三级结构的因特网(主干网、地区网、企业网)、第三阶段是多层次ISP结构的因特网.</li>
<li>万维网 WWW 在20世纪九十年代被CERN开发.</li>
<li>网络边缘端系统的通信方式有客户服务器方式(C/S)和对等方式(P2P).</li>
<li>路由器的作用是实现分组交换,这是网络核心部分最重要的功能.处理分组的方案是:先收入缓存,查找转发表找到下一跳,在适当的端口转发出去,.</li>
<li>电路交换的特点:面向连接.三个阶段:建立连接、通信、释放连接.由于计算机数据具有突发性导致通信线路利用率很低</li>
<li>分组交换的特点:在发送端将较长的豹纹划分成固定长度的数据段,添加首部,依次把分组传输到接收端.首部中含有地址等控制信息.交换机根据地址信息实现存储转发.收到分组后还原.</li>
<li>分组交换的优点:高效、灵活、迅速、可靠</li>
<li>分组交换的问题:分组在转发时需要时延,首部信息带来额外开销.</li>
<li>计算机网络的性能指标:<ul>
<li>比特:一个二进制数字.速率即数据率(data rate)或比特率(bit rate).</li>
<li>带宽:数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b/s (bit/s).</li>
<li>吞吐量:在单位时间内通过某个网络（或信道、接口）的数据量</li>
<li>传输时延: 发送数据时，数据块从结点进入到传输媒体所需要的时间.数据块长度（比特）/信道带宽（比特/秒）</li>
<li>传播时延:电磁波在信道中需要传播一定的距离而花费的时间.信道长度（米）/信号在信道上的传播速率（米/秒）</li>
<li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）</li>
</ul>
</li>
<li>网络协议的组成要素:语法、语义、同步</li>
<li>分层的好处:各层独立、灵活、结构可分割、便于实现和维护、促进标准化工作.</li>
<li>五层协议体系结构:物理层、数据链路层、网络层、运输层、应用层.</li>
<li>实体(entity) 表示任何可发送或接收信息的硬件或软件进程</li>
<li>协议是控制两个对等实体进行通信的规则的集合</li>
<li>协议是水平的,服务是垂直的</li>
<li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP </li>
</ul>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul>
<li>物理层的主要任务是确定与传输媒体接口的特性.如机械特性、电气特性、功能特性、过程特性.</li>
<li>中继器：又叫转发器，功能是将信号整形放大再转发出去，以消除信号的失真和衰减，扩大网络传输的距离，其原理是信号再生，仅作用于电气部分，不管数据中是否有错误</li>
<li>集线器(HUB):实质上是多端口的中继器，也工作在物理层。一口接受数据信号，将其整形放大转发到其他所有(输入端除外)处于工作状态的端口上，多口输入，冲突-&gt;无效</li>
<li>码元:在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形.</li>
<li>几种通信:单工通信、半双工通信(双方交替)、全双工通信</li>
<li>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重。 </li>
<li>奈氏准则:在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决（即识别）成为不可能.</li>
<li>信道的极限信息传输速率 C : C = W log2(1+S/N)  b/s ; W 为信道的带宽（以 Hz 为单位）；S 为信道内所传信号的平均功率；N 为信道内部的高斯噪声功率。  ·</li>
<li>导引型传播媒体:双绞线(屏蔽、无屏蔽)、同轴电缆、光缆(单模光纤、双模光纤)、非导引型传输媒体:无线传输介质:无线电波、微波、红外线、激光.</li>
<li>频分复用:所有用户在同样的时间占用频率不同的带宽资源.</li>
<li>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙</li>
<li>波分复用：光的频分复用</li>
<li>码分复用:各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现</li>
<li>宽带接入技术:ADSL、HFC、FTTx</li>
</ul>
<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul>
<li>数据链路层使用的信道:点对点信道ppp协议和广播信道.</li>
<li>链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。<br>一条链路只是一条通路的一个组成部分。数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</li>
<li>数据链路的基本单位是帧.</li>
<li>数据链路层解决的三个问题是封装成帧、透明传输、差错控制</li>
<li>封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。</li>
<li>透明传输:原始数据中出现控制符如何转义.0比特填充.</li>
<li>循环冗余检验 CRC:现在 k = 6, M = 101001。设 n = 3, 除数 P = 1101，被除数是 2nM = 101001000。 模 2 运算的结果是：商 Q = 110101，余数 R = 001。把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2nM + R 即：101001001，共 (k + n) 位。 </li>
<li>在数据后面添加上的冗余码称为帧检验序列 FCS . CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法 </li>
<li>CRC不能实现可靠传输,需要确认和重传机制.</li>
<li>0比特填充:连续五个1之后加入一个0.</li>
<li>数据链路层的两个子层:逻辑链路控制 LLC (Logical Link Control)子层<br>媒体接入控制 MAC (Medium Access Control)子层.</li>
<li>通信适配器,也就是网卡,作用是:进行串行/并行转换。对数据进行缓存。在计算机的操作系统安装设备驱动程序。实现以太网协议。 </li>
<li>CSMA/CD 协议: Carrier Sense Multiple Access with Collision Detection.“多点接入”表示许多计算机以多点接入的方式连接在一根总线上。“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。 “碰撞检测”就是计算机边发送数据边检测信道上的信号电压大小。当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。只能实现半双工通信.</li>
<li>退避算法:发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</li>
<li>在局域网中，硬件地址又称为物理地址，或 MAC 地址。 </li>
<li>集线器的优缺点:使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信,扩大了局域网覆盖的地理范围.缺点是碰撞域增大了，但总的吞吐量并未提高。如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。   </li>
<li>网桥:在数据链路层扩展局域网.根据 MAC 帧的目的地址对收到的帧进行转发.具有过滤帧的功能</li>
<li>网桥的优缺点: 过滤通信量。 扩大了物理范围。提高了可靠性。可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。缺点:存储转发增加了时延。 在MAC 子层并没有流量控制功能。 具有不同 MAC 子层的网段桥接在一起时时延更大。网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。  </li>
<li>网桥和集线器的不同:集线器转发时不进行检查,而网桥会进行CSMA/CD算法.</li>
<li>透明网桥:“透明”是指局域网上的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的。 </li>
<li>在网桥的转发表中写入的信息除了地址和接口外，还有帧进入该网桥的时间。</li>
<li>避免产生转发的帧在网络中不断地兜圈子的方法是生成树.</li>
<li>以太网交换机:以太网交换机的每个接口都直接与主机相连，并且一般都工作在全双工方式。交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，进行无碰撞地传输数据。 以太网交换机由于使用了专用的交换结构芯片，其交换速率就较高。    </li>
<li>虚拟局域网:虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组。这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。</li>
</ul>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul>
<li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li>
<li>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</li>
<li>IP协议.地址解析协议 ARP.(IP地址-&gt;物理地址)逆地址解析协议 RARP.网际控制报文协议 ICMP.网际组管理协议 IGMP都是网络层的协议,TCP、UDP是运输层的协议.</li>
<li>中间设备又称为中间系统或中继(relay)系统。物理层中继系统：转发器(repeater)。数据链路层中继系统：网桥或桥接器(bridge)。网络层中继系统：路由器(router)。网桥和路由器的混合物：桥路器(brouter)。网络层以上的中继系统：网关(gateway)。  </li>
<li>四类IP地址:A类0开头网络号8位,主机号24位.B类10开头网络号16位.C类110开头网络号24位.D类1110开头,多播地址.E类1111开头,保留地址.</li>
<li>IP分网络号和主机号:第一，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。第二，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。 </li>
<li>ARP:每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。</li>
<li>ICMP:ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告.有两种报文种类:即 ICMP 差错报告报文和 ICMP 询问报文.Ping和Traceroute指令通过ICMP协议,不经过TCP或者UDP.</li>
<li>路由选择协议:内部网关协议 IGP( RIP 和 OSPF)和外部网关协议EGP( BGP-4)</li>
<li>RIP:是一种分布式的基于距离向量的路由选择协议,每一个路由器都要维护从它自己到其他每一个目的网络的距离记录.RIP 允许一条路径最多只能包含 15 个路由器.</li>
<li>RIP协议三个要点:仅和相邻路由器交换信息。 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 按固定的时间间隔交换路由信息，例如，每隔 30 秒。 </li>
<li>RIP的优缺点:优点:实现简单开销小,缺点是故障传输慢、网络规模小.</li>
<li>OSPF协议:是分布式的链路状态协议.OSPF 不用 UDP 而是直接用 IP 数据报传送。</li>
<li>OSPF的三个要点:向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。  </li>
<li>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫作区域。减少了整个网络上的通信量。</li>
<li>OSPF的五种分组类型:问候、数据库描述、链路状态请求、链路状态更新、链路状态确认.</li>
<li>MTU(路径最大传输单元)</li>
<li>CIDR:无类别域间路由.缓解了地址枯竭的趋势；控制甚至缩减了路由表的开销<br>分配IP地址的时候不再以类别来分，而是按照可变长的地址块来分配.基于可变长子网掩码VLSM.</li>
<li>拥塞控制:流量感知路由、准入控制、流量调节、负载丢弃、随机早期检测RED.</li>
<li>流量整形:漏桶、令牌桶.</li>
</ul>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><ul>
<li>应用进程之间的通信又称为端到端的通信。 运输层的一个很重要的功能就是复用和分用。应用层不同进程的报文通过不同的端口向下交到运输层，再往下就共用网络层提供的服务。IP协议提供主机之间的逻辑通信,而TCP/UDP提供进程之间的逻辑通信.</li>
<li>用户数据报协议 UDP  和  传输控制协议 TCP  ,TCP 要提供可靠的、面向连接的运输服务.</li>
<li>两个对等运输实体在通信时传送的数据单位叫作运输协议数据单元 TPDU .</li>
<li>UDP 只在 IP 的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能,不保证可靠交付，同时也不使用拥塞控制</li>
<li>TCP 是面向连接的运输层协议。每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 TCP 提供可靠交付的服务。 TCP 提供全双工通信。面向字节流。  </li>
<li>TCP 连接的端点叫做套接字(socket)或插口。</li>
<li>ARQ:使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。这种可靠传输协议常称为自动重传请求ARQ (Automatic Repeat reQuest), ARQ 表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组 。</li>
<li>连续ARQ和回退NARQ.</li>
</ul>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ul>
<li>DNS:同时使用TCP和UDP:53</li>
<li>FTP:TCP:21</li>
<li>NFS:UDP</li>
<li>TFTP:UDP</li>
<li>TELNET:TCP:23</li>
<li>RPC:TCP</li>
<li>HTTP:TCP:80</li>
<li>SMTP:TCP:25,发邮件</li>
<li>POP3:TCP:110</li>
<li>IMAP:TCP</li>
<li>MIME:MIME类型是一种通知客户端其接收文件的多样性的机制:</li>
<li>DHCP:UDP</li>
<li>SNMP:UDP</li>
<li>POP3和IMAP的区别:POP3协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。而IMAP提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass入门]]></title>
      <url>/2018/01/09/Sass%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="Sass入门"><a href="#Sass入门" class="headerlink" title="Sass入门"></a>Sass入门</h1><p>编写css的工具主要有less、sass、stylus.具体谁优谁略很难定论.昨天看了下less,感觉有些用法理解起来很奇怪,而且功能上比sass稍弱一点,所以决定使用sass作为以后编写css的工具.sass和scss是一种东西的两种写法,scss与css的写法一致,而sass需要缩进,无分号等特性.以下介绍的是scss的写法.</p>
<h2 id="CIL"><a href="#CIL" class="headerlink" title="CIL"></a>CIL</h2><p>安装</p>
<pre><code class="bash">gem install sass
</code></pre>
<p>编译风格:</p>
<ul>
<li>nested：嵌套缩进的css代码，它是默认值。</li>
<li>expanded：没有缩进的、扩展的css代码。</li>
<li>compact：简洁格式的css代码。</li>
<li>compressed：压缩后的css代码。</li>
</ul>
<p>监听:</p>
<pre><code class="bash">　// watch a file
　　sass --watch input.scss:output.css
　　// watch a directory
　　sass --watch app/sass:public/stylesheets
</code></pre>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>¥开头,声明方式如css属性一样使用<code>:</code>,如果嵌套在字符串中,比如放在属性名称中,需要写在#{}中.</p>
<h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>支持计算.</p>
<h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>这里比较特别的是属性也是可以嵌套的.比如:</p>
<pre><code>font: {
    family:xxx;
    size:xxx;
}
</code></pre><p>另外&amp;可以在嵌套中表示上一层.</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>/* */</code>样式的注视可以保留到css文件中,如果想要保留到压缩后,需要在一个*之后添加叹号,而<code>//</code>只会保留在sass文件中.</p>
<h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><code>@extend 选择器</code>可以继承所选中选择器的所有属性.</p>
<h4 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h4><p>继承只能死板地复制粘贴过来,而mixin则更强大,它可以指定参数和缺省值.声明需要@mixin,使用需要@include</p>
<pre><code class="sass">　　@mixin left($value: 10px) {
　　　　float: left;
　　　　margin-right: $value;
　　}
</code></pre>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>通过@import可以插入外部文件,局部文件,也就是并不是想要编译出来的文件的用户名以下划线开始.</p>
<p>默认变量名.这是为了提高复用灵活性的一个特性,你可以在局部文件中声明变量时使用!default,在包含它的文件中另外声明覆盖掉这个default块.</p>
<h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>这些高级功能可以说是sass与less抉择中最重要的一部分,虽然less也可以实现,但是其实现方案实在是太过诡异.</p>
<h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>@if、@else用法和常规编程语言高度类似.</p>
<pre><code class="sass">　　@if lightness($color) &gt; 30% {
　　　　background-color: #000;
　　} @else {
　　　　background-color: #fff;
　　}
</code></pre>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><pre><code class="sass">//for
　　@for $i from 1 to 10 {
　　　　.border-#{$i} {
　　　　　　border: #{$i}px solid blue;
　　　　}
　　}
//while
　　$i: 6;
　　@while $i &gt; 0 {
　　　　.item-#{$i} { width: 2em * $i; }
　　　　$i: $i - 2;
　　}
//each
　　@each $member in a, b, c, d {
　　　　.#{$member} {
　　　　　　background-image: url(&quot;/image/#{$member}.jpg&quot;);
　　　　}
　　}
</code></pre>
<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>使用@function可以编写函数,使用时实际产生的是retrn出来的语句.</p>
<pre><code class="sass">　　@function double($n) {
　　　　@return $n * 2;
　　}
　　#sidebar {
　　　　width: double(5px);
　　}
</code></pre>
<p>参考资料:</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS用法指南 - 阮一峰的网络日志</a></li>
<li><a href="https://www.sass.hk/guide/" target="_blank" rel="noopener">https://www.sass.hk/guide/</a></li>
<li><a href="https://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">sass入门 - sass教程</a></li>
<li><a href="https://www.w3cplus.com/preprocessor/sass-other-function.html" target="_blank" rel="noopener">Sass基础——Sass函数_Preprocessor, Sass, SCSS 教程_w3cplus</a></li>
<li><a href="https://www.sass.hk/skill/sass25.html" target="_blank" rel="noopener">Sass基础——颜色函数 | Sass中文网</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> sass </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[操作系统总结]]></title>
      <url>/2018/01/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="操作系统总结"><a href="#操作系统总结" class="headerlink" title="操作系统总结"></a>操作系统总结</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>计算机系统的四个组成部分:计算机硬件、操作系统、系统程序与应用程序、用户.</li>
<li>计算机硬件包含什么:CPU、内存、IO.</li>
<li>什么是操作系统:管理计算机硬件的程序.</li>
<li>操作系统的目标:方便性、有效性、可扩充性、开放性.</li>
<li>操作系统的基本特征:并发性、共享性、虚拟性、异步性.</li>
<li>操作系统的基本类型:批处理系统、分时系统、实时系统</li>
<li>内核态和用户态的区别:内核态:控制计算机的硬件资源,并提供上层应用程序运行的环境.用户态:上层应用程序的活动空间,应用程序的执行依赖于内核提供的资源.内核态可以很好的保护硬件和资源的访问.<a id="more"></a></li>
<li>信号量semaphore的操作:P、V、wait.</li>
<li>管程Monitor:信号量机制功能强大，但使用时对信号量的操作分散，而且难以控制，读写和维护都很困难。因此后来又提出了一种集中式同步进程——管程。其基本思想是将共享变量和对它们的操作集中在一个模块中.管程就是代表共享资源的数据结构以及由对该共享数据结构实施操作的一组过程所组成的资源管理程序共同构成的一个操作系统的资源管理模块.</li>
<li>多处理器调度:多处理器调度是根据处理器调度策略每次取出一个任务，将任务分配到处理器上运行的方法。多处理器调度包括给处理器分配进程、在单个处理器上是否使用多道程序技术、实际分派进程三个相关的方面。多处理器系统中线程调度通常有负载共享、成组调度、专用处理器分配、动态调度四种方式.非对称处理、对称多处理.</li>
<li>处理器亲和性:由于使缓存无效或重构的代价高，因而SMP努力的使一个进程在同一个处理器上运行，这被称为处理器亲和性.</li>
<li>负载平衡:负载平衡设法将工作负载平均地分配到SMP系统中的所有处理器上.</li>
<li>竞争范围:多对一和多对多模型上:PCS,进程竞争范围.一对一SCS,系统竞争范围.</li>
<li>用户态和内核态的转换:系统调用、异常、外围设备中断</li>
<li>多道程序设计:同时把多个作业放入内存交替执行,共享系统资源.可以减少CPU时间的浪费,增加系统吞吐量,提高系统效率.</li>
<li>中断和异常:中断也称为外中断,指来自CPU执行指令外部的事件,比如IO等,通常与当前程序无关.异常也称为内中断,是来自CPU执行指令内的事件,如非法操作码、地址越界等.</li>
<li>机制和策略:机制mechanism提供干什么,策略policy提供怎么做.</li>
<li>系统调用类别:进程控制、文件管理、设备管理、信息维护、通信</li>
<li>操作系统的结构:简单结构、分层结构、微内核结构、模块结构</li>
<li>原语是由若干条机器指令构成的一段程序，用以完成特定功能，这段程序在执行期间不可分割。即原语的执行不能被中断，原语操作具有原子性.</li>
<li>系统调用:指运行在用户态的程序向内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2></li>
<li>进程:执行中的程序.</li>
<li>创建新进程的过程:分配进程号、分配空间、初始PCB、设置连接、创建或拓展其他数据结构.</li>
<li>非抢占和抢占的区别:让进程运行直到结束或阻塞的调度方式;允许将逻辑上可继续运行的在运行过程暂停的调度方式;抢占可以放置单一进程长时间占用cpu.</li>
<li>CPU调度的原因:提高CPU利用率;每个进程存在io、cpu两个过程,当进行io时可以进程进程调度以改善cpu利用率.</li>
<li>进程的三状态和无状态:运行、就绪、阻塞;创建、就绪、运行、等待、结束.</li>
<li>PCB的主要信息:进程状态、程序计数器、CPU寄存器、CPU调度信息.</li>
<li>长中短期调度:长期:哪一个程序被选中创建进程.中期:是否将进程调度内存.短期:哪个进程获得处理器资源.</li>
<li>上下文切换:CPU切换到另一个进程需要保存当前进程状态并且恢复另一个进程状态.上下文切换包括保存当前任务运行环境和恢复将要运行任务的运行环境.</li>
<li>共享内存和消息传递的比较:共享内存有公共状态,消息传递是显示传递.</li>
<li>线程:CPU使用的基本单位.包括线程ID、程序计数器、寄存器集合、栈.</li>
<li>线程和进程的比较:进程是系统资源分配的单位,线程的资源调度的单位.进程之间不能共享资源,进程有独立的地址空间,线程必须依赖进程存在.</li>
<li>多线程模型:一对一、多对一、多对多.</li>
<li>调度和分派的区别:调度是从就绪队列选择程序,分派是将进程加载到CPU.</li>
<li>常用调度算法:先到先服务、最短作业优先、最短剩余时间优先、轮转法、多级队列、多级反馈队列.</li>
<li>死锁:两个及以上的进程或者线程在执行过程中,因争夺资源造成的一种互相等待的现象.</li>
<li>死锁发生条件:互斥、占有等待、非抢占、循环等待.</li>
<li>临界资源和临界区:临界资源是每次仅允许一个进程访问的资源,每个进程中访问临界资源的那段代码称为临界区.</li>
<li>临界区问题解决的 三个条件:呼哧、空闲让进、有限等待.</li>
<li>调度基本特征:周转时间=作业完成时刻-到达时刻;带权周转时间=周转时间/服务时间;平均周转时间=作业周转总时间/昨夜个数;平均带权周转时间=带权周转总时间.<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2></li>
<li>内存交换的概念:把处于等待（阻塞）状态（或在CPU调度原则下被剥夺运行权利）的程序（进程）从内存移到辅存（外存），把内存空间腾出来，这一过程又叫换出。把准备好竞争CPU运行的程序从辅存移到内存，这一过程又称为换入。中级调度（策略）就是釆用交换技术。</li>
<li>连续内存分配方案:单一连续分配、固定分区分配、动态分区分配.</li>
<li>内部碎片和外部碎片:内部碎片就是已经被分配出去（能明确指出属于哪个进程）却不能被利用的内存空间.外部碎片指的是还没有被分配出去（不属于任何进程），但由于太小了无法分配给申请内存空间的新进程的内存空闲区域.</li>
<li>页表结构:层次页表、哈希页表、反向页表.</li>
<li>分页和分段的区别: (1) 页是信息的物理单位，分页是为实现离散分配方式，以消减内存的外零头，提高内存的利用率。段则是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好地满足用户的需要。(2) 页的大小固定且由系统决定；而段的长度却不固定，决定于用户所编写的程序。(3) 分页的地址空间是一维的，程序员只需利用一个记忆符，即可表示一个地址；而分段的作业地址空间是二维的，程序员在标识一个地址时，既需给出段名，又需给出段内地址。</li>
<li>TLB:TLB是一个小的，虚拟寻址的缓存，其中每一行都保存着一个由单个PTE(Page Table Entry,页表项)组成的块。如果没有TLB，则每次取数据都需要两次访问内存，即查页表获得物理地址和取数据.</li>
<li>虚拟内存:虚拟内存是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换.</li>
<li>按需调页:只有程序执行需要时才载入页，那些从未访问的页不会调入到物理内存，也把这种页交换方式称为懒惰交换.</li>
<li>抖动问题:在请求分页存储管理中，刚被替换出去的页，立即又要被访问因无空,此时因无空闲内存，又要替换另一页，而后者又是下一次要被访问的页，于是系统需花费大量的时间忙于进行这种频繁的页面交换，致使系统的实际效率很低，这种现象称为抖动现象。一般都是由于置换算法不佳引起.</li>
<li>buffer和cache的区别:cache 是为了弥补高速设备和低速设备的鸿沟而引入的中间层，最终起到<strong>加快访问速度</strong>的作用。而 buffer 的主要目的进行流量整形，把突发的大数量较小规模的 I/O 整理成平稳的小数量较大规模的 I/O，以<strong>减少响应次数</strong>。</li>
<li>cache写机制:write through:CPU向cache写入数据时，同时向memory(后端存储)也写一份，使cache 和memory的数据保持一致。优点是简单，缺点是每次都要访问memory，速度比较慢.write back:cpu更新cache时，只是把更新的cache区标记一下，并不同步更新memory,(后端存储)。只是在cache区要被新进入的数据取代时，才更新memory.</li>
</ul>
<h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><ul>
<li>文件属性有哪些:名称、标识符、类型、位置、大小、保护等.</li>
<li>文件:记录在外存上的相关信息具有名称的集合.文件是逻辑外存的最小分配单位.</li>
<li>文件访问模型:顺序访问、直接访问、索引访问.</li>
<li>目录结构:单层结构、双层结构、树状结构.</li>
<li>目录的实现方式:线性、哈希.</li>
<li>数据分配方式:连续、链式、索引.</li>
<li>空闲空间管理方式:位向量、链表、组、计数.</li>
<li>磁盘调度算法:FCFS、SSTF、SCAN、C-SCAN、CLOCK.</li>
<li>DMA:直接内存访问（Direct Memory Access，DMA）是计算机科学中的一种内存访问技术。它允许某些电脑内部的硬件子系统（电脑外设），可以独立地直接读写系统内存，而不需中央处理器（CPU）介入处理.</li>
<li>DMA解决CPU同访问主存方式:(1)停止CPU访内存；(2)周期挪用；(3)DMA与CPU交替访问内存.</li>
<li>DMA使用方式:周期存取方式、直接存取方式、数据块传送方式.</li>
<li>DMA过程:1.告知设备驱动器2.设备驱动器告知磁盘3.磁盘初始化DMA传输.4.磁盘控制器向DMA传送字节5.DMA控制器向缓冲区传输.6.DMA中断CPU.</li>
</ul>
<ul>
<li>调度算法甘特图</li>
<li>信号量实现同步互斥</li>
<li>银行家算法</li>
<li>磁盘调度算法</li>
<li>页面置换算法</li>
<li>页表计算</li>
</ul>
]]></content>
      
        <categories>
            
            <category> os </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> os </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[游戏策划-社交网络]]></title>
      <url>/2018/01/05/%E6%B8%B8%E6%88%8F%E7%AD%96%E5%88%92%E6%A1%88-%E8%AF%B4%E6%83%B3%E6%B3%95%E6%9B%B4%E5%90%88%E9%80%82-%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<h1 id="游戏策划-《社交网络》"><a href="#游戏策划-《社交网络》" class="headerlink" title="游戏策划-《社交网络》"></a>游戏策划-《社交网络》</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>这不像是一个游戏策划案,更像是一篇对人性探讨的哲学向论文.</p>
<h2 id="游戏概述"><a href="#游戏概述" class="headerlink" title="游戏概述:"></a>游戏概述:</h2><p>人本思想随着资本主义遍布全球.一句“我不在乎大国崛起,我只在乎小民尊严.”将所有人引导到了一个现实问题的岔路口上:做一个精致的利己主义者还是一个仁义道德的卫道士?<br><a id="more"></a><br>马克思和恩格斯说:</p>
<blockquote>
<p>“资产阶级在它已经取得了统治的地方把一切封建的、宗法的和田园诗般的关系都破坏了。它无情地斩断了把人们束缚于天然首长的形形色色的封建羁绊,它使人和人之间除了赤裸裸的利害关系,除了冷酷无情的“现金交易’ ,就再也没有任何别的联系了。”</p>
<p>你的思考呢?人生路上,这个社交网络拓扑图的每一条关联,是愈发健壮还是妻离子散,面对突如其来的疾病、失业、不快,你和你的亲友又会发生怎样的变化.</p>
</blockquote>
<p>这是一款人生模拟游戏,但是它并没有华丽的视图,或者应该用更恰当的说法——不需要.没有每天起床吃饭,而是直接面对最冰冷的现实,人生路上最难处理的事情,就是人与人的关系.</p>
<p>在这款游戏当中,你会和其他玩家一起诞生在一个错综复杂的人际网络中,每个玩家会被包围在众多AI和真实玩家中,每一个抉择,都会影响你的一级关系网络甚至更多,也许是越发稳健,也许是越发远离.你将面临生离死别,做出一个个切身利益相关的选择,金币和声望值等评价也会做出动态调整.社会整体面临的选项也会与当前社会的整体导向相关.当游戏时间结束,全社会的整体趋向将会导致评价体系内各个指标权重的不同,进而得到你最终的得分.当然,如果你因为某些选择导致众叛亲离或者自身死亡,游戏也将终止,并且会即时进行结算.</p>
<p>我们不设定任何的价值导向.所有的成功和失败的定义,都由所有玩家一起构建.</p>
<p>这里到底是温暖的伊甸园还是现实的名利场抑或是悲惨的人间炼狱?这不是一个简单的游戏,这是一个冰冷的问题,你的选择也并非仅仅是游戏中的一个变量,而可能就是现实生活的一次演习.</p>
<p>这款游戏,将引发你对于社会关系的深层次思考.回到最初那个问题:做一个精致的利己主义者还是一个仁义道德的卫道士?</p>
<h2 id="游戏背景"><a href="#游戏背景" class="headerlink" title="游戏背景:"></a>游戏背景:</h2><p>游戏的直接起因是一系列的知乎问题:</p>
<ul>
<li>如何看待丈夫28岁肝癌晚期，妻子打掉腹中五个月的孩子并要求离婚这一事件:<a href="https://www.zhihu.com/question/265004594" target="_blank" rel="noopener">https://www.zhihu.com/question/265004594</a></li>
<li>岳父重病生活不能自理，我提出离婚，妻子不同意。我该怎么办:<a href="https://www.zhihu.com/question/66231199" target="_blank" rel="noopener">https://www.zhihu.com/question/66231199</a></li>
</ul>
<p>面对这之类的问题,我看到了两个点,其一是女权婊的双标,这与游戏无关不赘述,其二就是一群回答者的“冷静客观”的思考,当然,基于利益的思考.</p>
<p>我们应该如何抉择呢?究竟是关注个人利益本身还是遵守现有的道德秩序?精英们的“不要站在道德高地上对他人的行为指手画脚”到底是真理还是婊子立牌坊式的价值观扭曲呢?</p>
<p>我并非是一个哲学家,无法给出结论,我只能根据自己的思考写下我自己的结论:</p>
<p>知乎的精致利己主义真是让人恶心，资产阶级利益驱动下生怕别人耽误自己的丑陋嘴脸。女权婊的双标也是恶心。读多了仁义道德，便矫枉过正，反对世人认同的，支持世人不认同的，仿佛就是真理，精英群体们的理性思考，不过是取反吗？</p>
<p>一个人道德败坏并不可怕，可怕的事社会竟然批判起别人的道德来，还要啐一口唾沫，歪着嘴说要是你赶上这样的事。此所谓以小人之心度君子之腹也。键盘上的道德不一定是行动上的道德，但至少还意味着整个社会的道德还未崩塌。你诚然可以选择不道德的选项，但没必要大张旗鼓颠倒黑白。</p>
<p>至于道德不道德，或者单纯的好不好的界定，简单的很，我有我的道，你有你的道，和自己的父母以及认识自己的爱人友人之前都声明出来。我声明的是孝悌，是死生不离，仁义礼智信。你声明的是不要耽误我的利益。</p>
<p>道德是一种社会群体契约，它在保证整个社会的互信和共赢，它在用社会导向来保证有仁义信者，虽然难免吃亏，但是依然受人尊重，依然有人激赏，以后得到更多人的帮助。个人的精致利己，着眼于人这一个独立单位，而以利益作为最小单位之间的关联。这里是零和游戏，世人都不是傻子，你要求一分利，我便少一分利，自以为地沾沾自喜，旁人却唯恐避之不及。</p>
<p>恶魔不可怕，可怕的是人心向魔鬼，私德崩塌不可怕，可怕的是社会舆论扭曲。你说道德高地上的圣人何以强制别人？我说你何以强制我不得发声呢？你说赶明天你遇上就好了，我说我会伤心难过，绝不会背信弃义。</p>
<p>嗟乎！大阉之乱，缙绅而能不易其志者，四海之大，有几人欤？而五人生于编伍之间，素不闻诗书之训，激昂大义，蹈死不顾，亦曷故哉？且矫诏纷出，钩党之捕遍于天下，卒以吾郡之发愤一击，不敢复有株治；大阉亦逡巡畏义，非常之谋难于猝发，待圣人之出而投缳道路，不可谓非五人之力也。</p>
<p>道不同者，不相为谋。大家频率不在同一波段上，你看我对牛弹琴，我看你油盐不进，全无意义。不认同的，可以直接删除拉黑。</p>
<p>当然,我个人的选择只能代表我自己,社会中的每一个人如何做出自己的选择呢?所以我想到了做这一款模拟游戏.不设定任何立场.基于人自己的选择模拟整个社会关系的演变,为玩家做一个提醒.</p>
<p>但是,我仍然希望,所有人,能够在这个游戏里面最终发现一个充满仁义礼智信的道德社会比一个充满金钱利益的资本社会更合理.这是我的初心,但是并不会故意如此设定,因为它的定位不仅是一个以教育为目的,希望引发玩家思考的游戏,更是一场残酷的社会实验.</p>
<h2 id="目标用户"><a href="#目标用户" class="headerlink" title="目标用户:"></a>目标用户:</h2><p>从游戏的概述和背景可以看出来,这个游戏的定位有两个:一是引发群体性思考,二是借助玩家的选择完成一场宏大的社会实验.</p>
<p>为了完成目的,这个游戏的用户应当是包含普罗大众的,因为社会也是这个样子,但是由于深入了解这款游戏所需要的哲学思考甚至计算过多,对于游戏感兴趣的可能更多是有一定文化知识,对心理和社会关系有过思考的小众群体.</p>
<p>另外,这个模拟游戏也有很好的教育意义,可以引入到中小学生群体进行人际关系教育.或者引入到监狱等机构,辅助进行改造教育.需要注意的是,这个游戏原本没有最终设定或者导向.所以如果明确用于教育作用,需要初期引入行为引导或参数更改.</p>
<p>为了完成游戏本身的目的,我们需要引入AI角色,达到社会网络整体的真实和平衡.但是由于缺乏足够的覆盖面积广的真实玩家,这个游戏的第二个目的可能注定失败.这是一款注定失败的游戏,但如果它能引发一定的思考,也足够光荣.</p>
<h2 id="游戏机制"><a href="#游戏机制" class="headerlink" title="游戏机制:"></a>游戏机制:</h2><p>每一局100个玩家,可以利用手中虚拟货币在进入游戏前选择自己诞生的身份.</p>
<p>进入游戏后,将会以玩家为中心呈现出一个简单的网络关系拓扑图.游戏中包含一定的AI角色.各个真实玩家之间不会有一级关联.每个玩家(包括AI)视作一个节点.并且有初始化的评价指标:财富值、声望值、道德值.每个玩家(包括AI)之间的会有默认的关联值.</p>
<p>多人组队时每个队伍都会建立一个社群.如果没有组队,则会随机分配一个社群.</p>
<p>在不同的时间段会解锁玩家不同的操作.并且会随机引入各种情况.比如生病、破产,玩家的所有操作将会广播给一级关联人,也可以付出一定的金币来请求屏蔽这条信息的广播.每隔十分钟,所有一级关联人和社群的声望前三名可以对每个人进行评议,决定对其声望和道德的增减.</p>
<p>玩家可以进行的操作有:</p>
<ol>
<li>解除与任意一个人的关系.(包括出卖)</li>
<li>建立与任意一个人的关系(主动建立关系需要对方同意)</li>
<li>与其他人(个人或者群体)发生互动:工作、交流、交易、游戏、嘲讽、打架等.</li>
<li>退出和加入其他社群.</li>
</ol>
<p>面板提示玩家进行各种操作可以获得的指标提升或者衰减.并且会导致人际关联值的变化.</p>
<p>指标的提升和衰减与否和具体值要根据不同的身份所在的社群的声望值前三名进行商定并通过全体投票通过.</p>
<p>社群所有成员的实时加权分数将会累加作为社群势力.社群势力将会在每隔十分钟进行排名.排名前30%、20%、10%的社群可以调整指标,调整额度分别为3分、2分、1分.第一名的社群可以强制指定其他社群的一个指标,但是需要付出本社群的财富值.被指定社群可以接受或者抵制,接受则获得财富值,抵制则损失财富值.做指定的社群的声望值相应变化.</p>
<p>随着游戏的进行,玩家的性格将会得到固化,自己的评价指标将会显示给关系网络中关联度较高的人.在固化之后,如果做出与自己已经被判定的性格相反的事情会付出额外的代价并且削弱判定的力度.如果是与判定的性格相同的事情则会增加判定的力度.</p>
<p>玩家会收到系统推荐的相同性格的人并且建立关联.</p>
<p>注意!游戏支持直接交流和金钱交易,所以所有的评议等可能存在并不公正的情况.</p>
<p>当死亡、所有关联破裂、游戏计时结束任意一种情况发生时,将会结束玩家操作并实时计算分数,其指标将在整场游戏结束时按照最终权重再次结算.两者直接相加作为总得分.</p>
<p>游戏结束后将会展示玩家在游戏过程中的社群势力、性格及其转变、直接相关关系图及其转变、最终得分.作为玩家对局信息供所有人查看.</p>
<p>得分将折算为金币,可以用于选择之后游戏的身份选择.</p>
<h2 id="游戏特色"><a href="#游戏特色" class="headerlink" title="游戏特色:"></a>游戏特色:</h2><p>这款游戏注定是一个小众游戏.一个看起来怪异SIM游戏.但是怪异往往意味着特色鲜明.</p>
<ol>
<li>教育意义.从游戏脱离出来到引发群体思考.</li>
<li>玩家构建的社交网络整体趋势影响评分权重,没有硬性指标,游戏高度灵活</li>
<li>面临的问题现实,更有模拟游戏的意义.</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记:"></a>后记:</h2><p>这不是一个普通的打怪升级酣畅淋漓的游戏,你可能体会不到快感,反而感受到压力,这压力不是我给予你,而是社会给予你,至于是游戏里的社会还是现实生活的社会,只有你自己知道答案.<br>这是一个危险的游戏.我会像三体的1379号监听员一样给叶文洁最初发出的信号同样的回复:“不要回答！不要回答！不要回答！”</p>
<p>这里到底是温暖的伊甸园还是现实的名利场抑或是悲惨的人间炼狱?这不是一个简单的游戏,这是一个冰冷的问题,你的选择也并非仅仅是游戏中的一个变量,而可能就是现实生活的一次演习.</p>
<p>这款游戏,将引发你对于社会关系的深层次思考.回到最初那个问题:做一个精致的利己主义者还是一个仁义道德的卫道士?<br>给我你的回答吧.</p>
<p>Give me your answer.</p>
<p>Me Votre réponse.</p>
<p>私にあなたの回答をください.</p>
<p>너의 대답.</p>
<p>Дай мне свой ответ.</p>
]]></content>
      
        <categories>
            
            <category> 随感 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 感想 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3完全学习笔记三:BFC、IFC、GFC、FFC]]></title>
      <url>/2017/12/30/CSS3%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89-BFC%E3%80%81IFC%E3%80%81GFC%E3%80%81FFC/</url>
      <content type="html"><![CDATA[<h1 id="CSS3完全学习笔记三-BFC、IFC、GFC、FFC"><a href="#CSS3完全学习笔记三-BFC、IFC、GFC、FFC" class="headerlink" title="CSS3完全学习笔记三:BFC、IFC、GFC、FFC"></a>CSS3完全学习笔记三:BFC、IFC、GFC、FFC</h1><p>//待续!</p>
<p>FC的全称是Formatting Contexts,格式上下文.它决定了其子元素如何定位以及和其他元素的关系.原本的FC有两种,也就是BFC和IFC,其余两者是CSS3中定义的.</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>Block Formatting Context 叫做“块级格式化上下文”.</p>
<p>规则如下:</p>
<ul>
<li>内部的盒子会在垂直方向，一个个地放置；</li>
<li>盒子垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的上下margin会发生重叠；</li>
<li>每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此；</li>
<li>BFC的区域不会与float重叠；</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也如此；</li>
<li>计算BFC的高度时，浮动元素也参与计算。</li>
</ul>
<p>产生原因如下:</p>
<ul>
<li>根元素-body</li>
<li>float的属性不为none；</li>
<li>position为absolute或fixed；</li>
<li>display为table-cell, table-caption, inline-block//?</li>
<li>overflow不为visible</li>
</ul>
<p>用处:</p>
<ul>
<li>清除浮动</li>
<li>解决margin重叠<a id="more"></a>
</li>
</ul>
<h2 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h2><p>Inline Formatting Context叫做“内联格式化上下文”.</p>
<p>规则如下:</p>
<ul>
<li>框会从包含块的顶部开始，一个接一个地水平摆放。</li>
<li>摆放这些框的时候，它们在水平方向上的外边距、边框、内边距所占用的空间都会被考虑在内。在垂直方向上，这些框可能会以不同形式来对齐：它们可能会把底部或顶部对齐，也可能把其内部的文本基线对齐。能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框。水平的margin、padding、border有效，垂直无效。不能指定宽高。</li>
<li>行框的宽度是由包含块和存在的浮动来决定。</li>
</ul>
<p>用处:</p>
<ul>
<li>水平居中：当一个块要在环境中水平居中时，设置其为inline-block则会在外层产生IFC，通过text-align则可以使其水平居中。</li>
<li>垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>
</ul>
<h2 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h2><p>GridLayout Formatting Contexts叫做”网格布局格式化上下文“.</p>
<p>产生原因:</p>
<ul>
<li>display值为grid</li>
</ul>
<h2 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h2><p>Flex Formatting Contexts叫做”自适应格式化上下文”.Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。</p>
<p>产生原因:</p>
<ul>
<li>display值为flex或者inline-flex</li>
</ul>
<p>参考资料:</p>
<ul>
<li><a href="http://www.cnblogs.com/fsjohnhuang/p/5259121.html" target="_blank" rel="noopener">CSS魔法堂：重新认识Box Model、IFC、BFC和Collapsing margins - ^_^肥仔John - 博客园</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> bfc </tag>
            
            <tag> ifc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS计数器:counter]]></title>
      <url>/2017/12/27/CSS%E8%AE%A1%E6%95%B0%E5%99%A8-counter/</url>
      <content type="html"><![CDATA[<h1 id="CSS计数器-counter"><a href="#CSS计数器-counter" class="headerlink" title="CSS计数器:counter"></a>CSS计数器:counter</h1><p>Css计数器是css2开始支持的,只能用在content属性上.//关于css3的变化,语焉不详.援引css88的说法是:<code>在CSS2.1中counter()只能被使用在content属性上。</code></p>
<p>Counter并非只是一个单纯的属性,而是包含了以下几部分:</p>
<ul>
<li>counter-reset</li>
<li>counter-increment</li>
<li>counter</li>
<li>counters</li>
</ul>
<h2 id="counter-reset"><a href="#counter-reset" class="headerlink" title="counter-reset"></a>counter-reset</h2><p>在某个地方声明一个计数器,并且最初值为0.</p>
<p>语法:</p>
<pre><code class="css">counter-reset: [&lt;user-ident&gt; &lt;integer&gt;?]+ | none
</code></pre>
<p>可以看出来,这里还可以设置初始值,需要注意的是,0是不会被显示在第一个上的,真正的显示是1,类似于++i.</p>
<h2 id="counter-increment"><a href="#counter-increment" class="headerlink" title="counter-increment"></a>counter-increment</h2><p>计数器增加.</p>
<p>这里还可以设置增量的不长,取负值也是允许的,如<code>counter-increment: counter-name 2;</code></p>
<h2 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h2><p>用在content属性内,控制显示的值.</p>
<p>可以设置表现形式,比如字母,罗马数字,具体的选项有:decimal, decimal-leading-zero, lower-roman, upper-roman, lower-greek, lower-latin, upper-latin, armenian, georgian, lower-alpha, upper-alpha.</p>
<p>设置的语法为:<code>content: counter(counter-name, lower-roman);</code></p>
<p>你也可以设置更灵活的方法,比如设置为第1章,第2章.只需要在content中进行拼凑即可.<code>content: &quot;第 &quot; counter(section) &quot; 章:</code></p>
<h2 id="counters"><a href="#counters" class="headerlink" title="counters"></a>counters</h2><p>支持嵌套.</p>
<p>语法:</p>
<pre><code class="css">counters( &lt;ident&gt;, &lt;string&gt; [, [ &lt;counter-style&gt; | none ] ]? )
</code></pre>
<p>如果想要支持嵌套,<code>content: counters(section, &quot;.&quot;);</code>,需要使用counters并且声明使用的分割符号.</p>
<hr>
<p>在查阅资料的时候,偶然发现了以下两个规则:<code>@counter-style</code>和<code>symbols()</code>,他们可以用来在list里显示自定义的前缀,但是只有firefox支持,所以不做进一步学习.</p>
<p>参考资料:</p>
<ul>
<li><a href="http://www.css88.com/archives/6394" target="_blank" rel="noopener">http://www.css88.com/archives/6394</a></li>
<li><a href="https://css-tricks.com/almanac/properties/c/counter-increment/" target="_blank" rel="noopener">counter-increment | CSS-Tricks</a></li>
<li><a href="https://css-tricks.com/almanac/properties/c/counter-reset/" target="_blank" rel="noopener">https://css-tricks.com/almanac/properties/c/counter-reset/</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Counters" target="_blank" rel="noopener">使用CSS计数器 - Web开发者指南 | MDN</a></li>
<li><a href="https://www.quackit.com/css/functions/css_counters_function.cfm" target="_blank" rel="noopener">CSS counters() Function</a></li>
<li><a href="https://www.quackit.com/css/functions/css\_symbols_function.cfm" target="_blank" rel="noopener">https://www.quackit.com/css/functions/css\_symbols_function.cfm</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> counter </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3完全学习笔记二: 属性全解]]></title>
      <url>/2017/12/26/CSS3%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C-%E5%B1%9E%E6%80%A7%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="CSS3完全学习笔记二-属性全解"><a href="#CSS3完全学习笔记二-属性全解" class="headerlink" title="CSS3完全学习笔记二: 属性全解"></a>CSS3完全学习笔记二: 属性全解</h1><p>对于目前没有主流浏览器支持的属性和一些需要特别学习的属性,在这篇笔记中没有学习.</p>
<h2 id="动画属性"><a href="#动画属性" class="headerlink" title="动画属性"></a>动画属性</h2><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>使用@keyframes规则，你可以创建动画。<br>创建动画是通过逐步改变从一个CSS样式设定到另一个。指定的变化时发生时使用％，或关键字”from”和”to”，这是和0％到100％相同。</p>
<p>语法:</p>
<pre><code class="css">@keyframes animationname {keyframes-selector {css-styles;}}
</code></pre>
<a id="more"></a>
<p>值:</p>
<ul>
<li>animationname    必需的。定义animation的名称。</li>
<li>keyframes-selector    必需的。动画持续时间的百分比。合法值：0-100%;from (和0%相同);to (和100%相同)</li>
<li>css-styles    必需的。一个或多个合法的CSS样式属性</li>
</ul>
<h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>动画复合属性.</p>
<p>语法:</p>
<pre><code class="css">animation: name duration timing-function delay iteration-count direction fill-mode play-state;
</code></pre>
<p>值:</p>
<ul>
<li>animation-name</li>
<li>animation-duration :时间,s或者ms</li>
<li>animation-timing-function:速度曲线;linear; ease;ease-in;ease-out;ease-in-out;cubic-bezier(n,n,n,n)</li>
<li>animation-delay:延迟</li>
<li>animation-iteration-count:播放次数,infinite表示无限次</li>
<li>animation-direction:是否反向;normal;reverse; alternate;alternate-reverse</li>
<li>animation-fill-mode//?不理解;none;forwards; backwards; both</li>
<li>animation-play-state: 运行或者暂停.paused;running</li>
</ul>
<h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>背景复合属性.</p>
<p>语法:</p>
<pre><code class="css">ackground:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;
</code></pre>
<p>值:</p>
<ul>
<li>background-color:默认情况下是transparent<blockquote>
<p>合法的颜色值有:十六进制、rgb、rgba、hsl、hsla、浏览器定义颜色名称</p>
</blockquote>
</li>
<li>background-position:起始位置.可以用百分比、css单位、left、top等值<blockquote>
<p>注意对于这个工作在Firefox和Opera，background-attachment必须设置为 “fixed（固定）”.<br>关于css长度单位额外进行学习.</p>
</blockquote>
</li>
<li>background-size:背景图片大小。length:宽度-高度,未设置的为auto; percentage; cover(保持横纵比的最小); contain(保持横纵比的最大).这里可以想象正方形盒子和长方形图片.</li>
<li>background-repeat:repaat、repeat-x、repeat-y、repeat-y、inherit</li>
<li>background-origin:定位;padding-box;border-box;content-box;//设置repeat为no-repeat和position时可以看出效果</li>
<li>background-clip:背景绘制区域;border-box;padding-box;content-bo</li>
<li>background-attachment:是否固定:scroll、fixed</li>
<li>background-image:背景图:<blockquote>
<p>提示：请设置一种可用的背景颜色，这样的话，假如背景图像不可用，可以使用背景色带代替。</p>
</blockquote>
</li>
</ul>
<h2 id="边框和outline属性"><a href="#边框和outline属性" class="headerlink" title="边框和outline属性"></a>边框和outline属性</h2><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p>边框复合属性.</p>
<p>值:</p>
<ul>
<li>border-width: thin、medium、thick、length</li>
<li>border-style:none;hidden;dotted;dashed;solid;double;groove; ridge; inset;outset<blockquote>
<p>hidden:与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。//边框冲突另外学习</p>
</blockquote>
</li>
<li>border-color</li>
</ul>
<h3 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h3><p>outline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。与border高度类似,区别是不占用盒子.</p>
<p>值:</p>
<ul>
<li>outline-color</li>
<li>outline-style:没有hidden</li>
<li>outline-width</li>
</ul>
<h3 id="outline-offset"><a href="#outline-offset" class="headerlink" title="outline-offset"></a>outline-offset</h3><p>outline在border外边的便宜</p>
<h3 id="border-image"><a href="#border-image" class="headerlink" title="border-image"></a>border-image</h3><p>Css3新属性.九宫格划分.浏览器支持不佳</p>
<p>语法:</p>
<pre><code class="css">border-image: source slice width outset repeat|initial|inherit;
</code></pre>
<p>值:</p>
<ul>
<li>border-image-source</li>
<li>border-image-slice//?不懂</li>
<li>border-image-width:number(倍数)、%、auto</li>
<li>border-image-outset //不懂</li>
<li>border-image-repeat:填充方式;stretch、repeat、round、space、</li>
</ul>
<h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><p>语法:</p>
<pre><code class="css">border-radius: 1-4 length|% / 1-4 length|%;
</code></pre>
<h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><p>阴影.</p>
<p>语法:</p>
<pre><code class="css">box-shadow: h-shadow v-shadow blur spread color inset;
</code></pre>
<p>值:</p>
<ul>
<li>h-shadow:必选</li>
<li>v-shadow:必选</li>
<li>blur:模糊距离</li>
<li>spread:阴影大小//?为什么是可选,默认多少</li>
<li>color</li>
<li>inset//不从右下角开始而是从左上角开始</li>
</ul>
<h2 id="盒子属性"><a href="#盒子属性" class="headerlink" title="盒子属性"></a>盒子属性</h2><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>内容溢出框的处理方式</p>
<p>值:</p>
<ul>
<li>visible</li>
<li>hidden</li>
<li>scroll//不论是否剪裁都显示滚动条,至少在ie下如此</li>
<li>auto//只有超出才会显示滚动条</li>
</ul>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>值:length/%(规定基于父元素的宽度的百分比的填充)</p>
<h3 id="height-width"><a href="#height-width" class="headerlink" title="height/width"></a>height/width</h3><p>值:auto;length;%(基于包含它的块级对象的百分比高度)</p>
<h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>值与padding类似</p>
<h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>盒子大小.</p>
<p>值:</p>
<ul>
<li>content-box</li>
<li>border-box</li>
</ul>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>可否调整大小</p>
<p>值:</p>
<ul>
<li>none</li>
<li>both</li>
<li>horizontal</li>
<li>vertical</li>
</ul>
<h2 id="颜色属性"><a href="#颜色属性" class="headerlink" title="颜色属性"></a>颜色属性</h2><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>透明度,从0-1.1表示完全透明.</p>
<h2 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h2><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><p>字体复合属性.</p>
<p>值:</p>
<ul>
<li>font-style: normal、italic、oblique//oblique: 指的是将正常竖直文本倾斜;</li>
<li>font-variant:小型大写字母样式.normal/small-caps//存在的意义是什么???</li>
<li>font-weight:normal、bold、bolder、lighter;100-900.400等于normal,而700等于bold.//er是跟父元素比较</li>
<li>font-size/line-height:xx-small;x-small;small;medium;large;x-large;xx-large; smaller; larger;length;%(与父元素比较)</li>
<li>font-family:family-name - 指定的系列名称：具体字体的名称，比如：”times”、”courier”、”arial”。generic-family - 通常字体系列名称：比如：”serif”、”sans-serif”、”cursive”、”fantasy”、”monospace。</li>
</ul>
<hr>
<p>对于以下存在疑惑://表现大小差异</p>
<ul>
<li>caption</li>
<li>icon</li>
<li>menu</li>
<li>message-box</li>
<li>small-caption</li>
<li>status-bar</li>
</ul>
<h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h3><blockquote>
<p> Internet Explorer 9 只支持 .eot 类型的字体, Firefox, Chrome, Safari, 和 Opera 支持 .ttf 与.otf 两种类型字体.</p>
</blockquote>
<p>值:</p>
<ul>
<li>font-family:自行定义的名称</li>
<li>src</li>
<li>font-stretch</li>
<li>font-style</li>
<li>font-weight</li>
<li>unicode-range</li>
</ul>
<h2 id="内容生成属性"><a href="#内容生成属性" class="headerlink" title="内容生成属性"></a>内容生成属性</h2><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>在:before和:after中添加内容.</p>
<p>值:</p>
<ul>
<li>none</li>
<li>normal</li>
<li>counter//计数器内容额外学习</li>
<li>attr(attribute)</li>
<li>string</li>
<li>open-quote</li>
<li>close-quote</li>
<li>no-open-quote//</li>
<li>no-close-quote//没看见效果</li>
<li>url(url)</li>
</ul>
<h3 id="quotes"><a href="#quotes" class="headerlink" title="quotes"></a>quotes</h3><p>定义选择器和嵌套时的引号包裹.</p>
<p>值:</p>
<ul>
<li>none</li>
<li>string string string string。前两个是一级引号,后两个是下一级</li>
</ul>
<h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><h3 id="list-style"><a href="#list-style" class="headerlink" title="list-style"></a>list-style</h3><p>语法:</p>
<pre><code class="css"> list-style-type, list-style-position, list-style-image.
</code></pre>
<p>值:</p>
<ul>
<li>list-style-type:列表项标记,可选值过多,不一一指出,详细见附录</li>
<li>list-style-position:标记放在content内还是padding内. inside/outside</li>
<li>list-style-image:url()/none</li>
</ul>
<h2 id="多列属性"><a href="#多列属性" class="headerlink" title="多列属性"></a>多列属性</h2><h3 id="column-count"><a href="#column-count" class="headerlink" title="column-count"></a>column-count</h3><p>文本划分为几列//间隙如何控制。1em.列数和宽度同时满足必须挤压height吗?</p>
<p>值:</p>
<ul>
<li>number</li>
<li>auto</li>
</ul>
<h3 id="column-fil"><a href="#column-fil" class="headerlink" title="column-fil"></a>column-fil</h3><p>如何填充.</p>
<p>值:</p>
<ul>
<li>balance     长短均衡</li>
<li>auto 顺序填充</li>
</ul>
<h3 id="column-gap"><a href="#column-gap" class="headerlink" title="column-gap"></a>column-gap</h3><p>指定每一列之间的差距.</p>
<p>值:</p>
<ul>
<li>length</li>
<li>normal:1em</li>
</ul>
<h3 id="column-rule"><a href="#column-rule" class="headerlink" title="column-rule"></a>column-rule</h3><p>列之间规则的复合属性.</p>
<p>值:</p>
<ul>
<li>column-rule-width:列中间间隔线的宽度: thin medium thick length</li>
<li>column-rule-style:与border相同</li>
<li>column-rule-color</li>
</ul>
<h3 id="column-span"><a href="#column-span" class="headerlink" title="column-span"></a>column-span</h3><p>指定某个元素应该横跨多少列.在划分好container的列数之后,可能会有想要让其中某些跨的多,某些少.</p>
<p>值:</p>
<ul>
<li>1</li>
<li>all//所有</li>
</ul>
<h3 id="columns"><a href="#columns" class="headerlink" title="columns"></a>columns</h3><p>列宽和列数.</p>
<p>语法:</p>
<pre><code class="css">columns: column-width column-count;
</code></pre>
<h2 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h2><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p>是否可见.//与display:none相比仍然会占据空间</p>
<p>值:</p>
<ul>
<li>visible</li>
<li>hidden</li>
<li>collapse<blockquote>
<p>当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。//具体情境<a href="http://www.runoob.com/try/try.php?filename=trycss_visibility_collapse" target="_blank" rel="noopener">菜鸟教程在线编辑器</a></p>
</blockquote>
</li>
</ul>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>堆叠顺序.拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面.<br>对非static元素起作用.</p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>定位方式.</p>
<p>值:</p>
<ul>
<li>absolute :相对于 static 定位以外的第一个父元素进行定位</li>
<li>fixed</li>
<li>relative</li>
<li>static :元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>元素生成的框属性.</p>
<p>值过多,参考<a href="http://www.runoob.com/cssref/pr-class-display.html" target="_blank" rel="noopener">CSS display 属性 | 菜鸟教程</a></p>
<h3 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h3><p>光标样式.</p>
<p>值:</p>
<ul>
<li>url</li>
<li>crosshair</li>
<li>wait</li>
<li>help</li>
<li>等…</li>
</ul>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>盒子浮动.</p>
<p>值:</p>
<ul>
<li>left</li>
<li>right</li>
<li>none//默认值,不浮动</li>
</ul>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>指定段落的左侧或右侧不允许浮动的元素</p>
<p>值:</p>
<ul>
<li>left</li>
<li>right</li>
<li>both</li>
<li>none</li>
</ul>
<h3 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h3><p>对图像进行剪裁.</p>
<blockquote>
<p>注意：: 如果先有”overflow：visible”，clip属性不起作用。//那么根据这个说法,是不是clip是修改了盒子大小.</p>
</blockquote>
<p>值:</p>
<ul>
<li>shape:rect(top, right, bottom,left)</li>
<li>auto</li>
</ul>
<h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><h3 id="border-collapse"><a href="#border-collapse" class="headerlink" title="border-collapse"></a>border-collapse</h3><p>设置表格的边框是否被合并为一个单一的边框，还是象在标准的 HTML 中那样分开显示。</p>
<p>值:</p>
<ul>
<li>collapse</li>
<li>separate</li>
</ul>
<h3 id="border-spacing"><a href="#border-spacing" class="headerlink" title="border-spacing"></a>border-spacing</h3><p>相邻单元格边框之间的距离</p>
<p>值:</p>
<ul>
<li>length</li>
<li>length length //先水平,后垂直</li>
</ul>
<h3 id="caption-side"><a href="#caption-side" class="headerlink" title="caption-side"></a>caption-side</h3><p>表格标题的位置</p>
<p>值:</p>
<ul>
<li>top</li>
<li>bottom</li>
</ul>
<h3 id="empty-cells"><a href="#empty-cells" class="headerlink" title="empty-cells"></a>empty-cells</h3><p>隐藏表中的空单元格的边框和背景//有意义吗?</p>
<p>值:</p>
<ul>
<li>hide</li>
<li>show</li>
</ul>
<h3 id="table-layout"><a href="#table-layout" class="headerlink" title="table-layout"></a>table-layout</h3><p>列宽度的设定</p>
<p>值:</p>
<ul>
<li>automatic:根据内容适应</li>
<li>fixed:写死width</li>
</ul>
<h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>值:</p>
<ul>
<li>color_name</li>
<li>hex</li>
<li>rgb</li>
</ul>
<h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><p>文本方向.</p>
<p>值:</p>
<ul>
<li>ltr</li>
<li>rtl</li>
</ul>
<h3 id="letter-spacing"><a href="#letter-spacing" class="headerlink" title="letter-spacing"></a>letter-spacing</h3><p>字符间隔.</p>
<p>值:</p>
<ul>
<li>normal</li>
<li>length(允许负值)</li>
</ul>
<h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>行高.</p>
<p>值:</p>
<ul>
<li>normal</li>
<li>number //与字体大小相乘</li>
<li>length</li>
<li>% //基于字体的</li>
</ul>
<h3 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h3><p>文本水平对齐.</p>
<p>值:</p>
<ul>
<li>left</li>
<li>right</li>
<li>center</li>
<li>justify</li>
</ul>
<h3 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h3><p>文本装饰//下划线及其他</p>
<p>值:</p>
<ul>
<li>none</li>
<li>underline</li>
<li>overline</li>
<li>line-through</li>
<li>blink//没有看到效果</li>
</ul>
<h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h3><p>文本首行缩进.</p>
<p>值:</p>
<ul>
<li>length</li>
<li>%//基于父元素宽度</li>
</ul>
<h3 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h3><p>控制文本的大小写</p>
<p>值:</p>
<ul>
<li>none</li>
<li>capitalize</li>
<li>uppercase</li>
<li>lowercase</li>
</ul>
<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p>垂直对齐方式.<br>//关于vertical-align和line-height进一步学习.<br>值:</p>
<ul>
<li>baseline</li>
<li>sub</li>
<li>super</li>
<li>top</li>
<li>text-top</li>
<li>middle</li>
<li>bottom</li>
<li>text-bottom</li>
<li>length</li>
<li>%:使用 “line-height” 属性的百分比值来排列此元素。允许使用负值。</li>
</ul>
<h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><p>空白如何处理//?</p>
<p>值:</p>
<ul>
<li>normal</li>
<li>pre 类似于pre标签</li>
<li>nowrap</li>
<li>pre-wrap:保留空白但是换行</li>
<li>pre-line 合并空白但是换行</li>
</ul>
<h3 id="word-spacing"><a href="#word-spacing" class="headerlink" title="word-spacing"></a>word-spacing</h3><p>单词间距.</p>
<p>值:</p>
<ul>
<li>normal</li>
<li>length</li>
</ul>
<h3 id="text-align-last"><a href="#text-align-last" class="headerlink" title="text-align-last"></a>text-align-last</h3><p>针对textalign=justify时的文本最后一行对齐.</p>
<p>值:</p>
<ul>
<li>auto</li>
<li>left</li>
<li>right</li>
<li>center</li>
<li>justify</li>
<li>start//根据text-derection而定</li>
<li>end</li>
</ul>
<h3 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h3><p>文本溢出处理方式.</p>
<p>值:</p>
<ul>
<li>clip</li>
<li>ellipsis :省略号</li>
<li>string:给定字符串表示,火狐下</li>
</ul>
<h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3><p>文本阴影</p>
<p>值:</p>
<ul>
<li>h-shadow 必须</li>
<li>v-shadow 必须</li>
<li>blur</li>
<li>color</li>
</ul>
<h3 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h3><p>非cjk(中日韩)字符的断行规则</p>
<p>值: </p>
<ul>
<li>normal</li>
<li>break-all//单词内换行</li>
<li>keep-all //半角空格和连字符</li>
</ul>
<h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h3><p>换行规则.//与break的区别是什么?!!</p>
<p>值:</p>
<ul>
<li>normal</li>
<li>break-word:在长单词和url地址内部换行</li>
</ul>
<h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>⚠️,并非所有属性都可以过渡.与keyframes相比过渡更强调两种状态之间的平稳过渡,而后者强调关键帧的存在.</p>
<p>语法:</p>
<pre><code class="css">transition: property duration timing-function delay;
</code></pre>
<p>值:</p>
<ul>
<li>transition-property:过渡生效的属性:none/all/属性名称列表逗号分割</li>
<li>transition-duration:秒或者毫秒</li>
<li>transition-timing-function:速度曲线</li>
<li>transition-delay:开始延迟</li>
</ul>
<p>参考资料:</p>
<ul>
<li><a href="http://www.runoob.com/cssref/css-animatable.html" target="_blank" rel="noopener">CSS 动画 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/cssref/css-units.html" target="_blank" rel="noopener">CSS 单位 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss_border-style" target="_blank" rel="noopener">菜鸟教程在线编辑器</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2010/01/css3-border-image/" target="_blank" rel="noopener">CSS3 border-image详解、应用及jQuery插件 «  张鑫旭-鑫空间-鑫生活</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice</a></li>
<li><a href="http://www.runoob.com/try/playit.php?f=playcss_border-image-repeat&amp;preval=stretch" target="_blank" rel="noopener">在线实例</a></li>
<li><a href="http://www.css88.com/archives/6394" target="_blank" rel="noopener">http://www.css88.com/archives/6394</a></li>
<li><a href="http://www.runoob.com/cssref/pr-list-style-type.html" target="_blank" rel="noopener">CSS list-style-type 属性 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/cssref/css3-pr-column-span.html" target="_blank" rel="noopener">CSS3 column-span 属性 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/try/try.php?filename=trycss_visibility_collapse" target="_blank" rel="noopener">菜鸟教程在线编辑器</a></li>
<li><a href="http://www.runoob.com/cssref/pr-class-display.html" target="_blank" rel="noopener">CSS display 属性 | 菜鸟教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> css3 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3完全学习笔记一:选择器]]></title>
      <url>/2017/12/25/CSS3%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="CSS3完全学习笔记一-选择器"><a href="#CSS3完全学习笔记一-选择器" class="headerlink" title="CSS3完全学习笔记一:选择器"></a>CSS3完全学习笔记一:选择器</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul>
<li>.class   .intro 选择所有class中包含该值的元素</li>
<li>#id #intro  选择所有id=intro的元素</li>
<li>* 所有元素</li>
<li>element p 选择所有的p元素</li>
<li>,   div,p 选择所有的div元素和p元素</li>
<li>elment element 选择子(包含直接子元素和孙元素等)元素</li>
<li>> 直接子元素</li>
<li>+ 紧挨着前者的后者(直接弟节点)</li>
<li>[attribute] 包含该属性的</li>
<li>[attribute=value] 属性值为value的元素,加不加引号都可以</li>
<li>[attribute~=value] 属性值中包含该部分,类似于文本的匹配</li>
<li>[attribute|=value] 选择指定属性具有指定值开始(以-分隔开)的元素,可以没有后续部分</li>
<li>:link 未访问链接<a id="more"></a></li>
<li>:visited 访问过的链接</li>
<li>:active 活动链接,当点击链接时,该链接变为活动链接<br>这里为了显示正确需要按照顺序lvha书写</li>
<li>:hover 鼠标在链接上边时</li>
<li>:focus  获得焦点的输入元素</li>
<li>:first-letter 第一个字母<blockquote>
<p>只能设置以下属性: font properties;color properties ;background properties;margin properties;padding properties;border properties;text-decoration;vertical-align (only if float is ‘none’);text-transform;line-height;float;clear</p>
</blockquote>
</li>
</ul>
<p>这个地方的具体选择元素仍有困惑,比如设置为div:first-letter时,内直接嵌套p,那么p的首字母可以表现,而在p之前填充其他span、img标签则p没有表现.</p>
<ul>
<li>:first-line 第一行</li>
<li>:first-child  p:first-child  当p元素是父元素的第一个子元素时</li>
<li>:before 在元素之前添加内容,使用content 属性来指定要插入的内容。</li>
<li>:after 之后</li>
<li>:lang(language) p:lang(it) lang属性值的起始值为it的p元素</li>
</ul>
<hr>
<p>之后为css3新定义选择器</p>
<ul>
<li>element1~element2 p~ul p元素同一父元素之后的每一个ul元素. 与+类似,非直接弟节点</li>
<li>[attribute^=value] 属性以value开头,与|=类似,但是不要求以-分割</li>
<li>[attribute$=value] 结尾</li>
<li>[attribute*=value] 包含子串</li>
<li>:first-of-type  p:first-of-type, 是其父元素的第一个p子元素,与:nth-of-type(1)相同</li>
<li>:last-of-type,与:nth-last-of-type(1)相同</li>
<li>:only-of-type 唯一,不排除其他元素</li>
<li>:only-child 是父亲的唯一子元素</li>
<li>:nth-child(n) 是父亲的第n的子元素<blockquote>
<p>选择父元素E的第n个子元素F。其中n可以是整数（1，2，3）、关键字（even，odd）、可以是公式（2n+1）,而且n值起始值为1，而不是0.</p>
</blockquote>
</li>
<li>:last-child 最后一个子元素</li>
<li>:nth-last-child(n) 倒数第n</li>
<li>:nth-of-type(n)。第n个该类型的</li>
<li>:nth-last-of-type(n) 倒数第n</li>
<li>:root。根元素,在html中始终是<html></html></li>
<li>:empty 没有子元素和文本节点</li>
<li>:target//??? 匹配hash与id相对应的元素,但是safari、chrome没有效果</li>
<li>:enabled 启用的输入元素</li>
<li>:disabled</li>
<li>:checked 选中的输入元素</li>
<li>:not(selector)     排除</li>
<li>::selection 被选中的部分<blockquote>
<p>只可以应用于少数的CSS属性：color, background, cursor,和outline。</p>
</blockquote>
</li>
<li>:out-of-range 匹配值在指定区间之外的input元素</li>
<li>:in-range    </li>
<li>:read-write  用于匹配可读及可写的元素/区别于只读元素</li>
<li>:read-only 匹配设置 “readonly”（只读） 属性的元素</li>
<li>:optional 可选的输入元素,区别于required</li>
<li>:required </li>
<li>:valid 输入值合法的元素</li>
<li>:invalid 输入值不合法的元素</li>
</ul>
<hr>
<h2 id="Css选择器的分类"><a href="#Css选择器的分类" class="headerlink" title="Css选择器的分类:"></a>Css选择器的分类:</h2><p><img src="http://ozc9m7ly1.bkt.clouddn.com/282324267509975.jpg" alt=""></p>
<h2 id="伪-pseudo-类和伪选择器"><a href="#伪-pseudo-类和伪选择器" class="headerlink" title="伪(pseudo)类和伪选择器:"></a>伪(pseudo)类和伪选择器:</h2><p>伪类:对现有元素进行筛选;伪选择器:创造出不存在的新元素.</p>
<blockquote>
<p>The pseudo-class concept is introduced to permit selection based on information that lies outside of the document tree or that cannot be expressed using the other simple selectors.</p>
<p>Pseudo-elements create abstractions about the document tree beyond those specified by the document language. For instance, document languages do not offer mechanisms to access the first letter or first line of an element’s content. Pseudo-elements allow authors to refer to this otherwise inaccessible information. Pseudo-elements may also provide authors a way to refer to content that does not exist in the source document.</p>
</blockquote>
<p>伪类总是以一个冒号开头。伪元素通常以两个冒号开头。在 CSS2 时代，伪元素和伪类均是以一个冒号开头的；在 CSS2.1 之后，为了对伪元素和伪类加以区分，规定伪类继续以一个冒号开头，而伪元素改为以两个冒号开头。但是为了向前兼容，浏览器同样接受 CSS2 时代已经存在的伪元素（它们包括:before, :after, :first-line, :first-letter）的单冒号写法。但是对于 CSS2 之后所有新增的伪元素（例如::selection），必须采用双冒号写法。</p>
<p>一些老旧的浏览器不支持双冒号的写法，因此如果必须兼容旧浏览器，则应该使用单冒号写法。IE 从 9 开始支持双冒号写法。//是否意味着ie9之前的浏览器无法使用::selection?</p>
<p>参考资料:</p>
<ul>
<li><a href="https://www.cnblogs.com/AllenChou/p/4684753.html" target="_blank" rel="noopener">最全CSS3选择器 - AllenChou - 博客园</a></li>
<li><a href="https://www.renfei.org/blog/css-pseudo-class-and-pseudo-element.html" target="_blank" rel="noopener">CSS 伪类和伪元素的区别 - Blog - Renfei Song</a></li>
<li><a href="http://www.runoob.com/cssref/css-ref-aural.html" target="_blank" rel="noopener">CSS 听觉参考手册 | 菜鸟教程</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> css3 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT]]></title>
      <url>/2017/12/25/http%E6%97%A0%E7%8A%B6%E6%80%81%E5%92%8C%E9%89%B4%E6%9D%83%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-cookie%E3%80%81session%E3%80%81token%E3%80%81oauth2%E5%8F%8AJWT/</url>
      <content type="html"><![CDATA[<h1 id="http无状态和鉴权解决方案-cookie、session、token、oauth2及JWT"><a href="#http无状态和鉴权解决方案-cookie、session、token、oauth2及JWT" class="headerlink" title="http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT"></a>http无状态和鉴权解决方案:cookie、session、token、oauth2及JWT</h1><p>http协议本身是无状态的,但是在实际的web开发中常有一些操作需要有状态.比如想要访问一些私人访问权限的文章,或者这种操作需要明确当前用户身份.</p>
<p>显然,最简单的方案就是每次都发送账户和密码,但是这样重复操作用用户并不友好,对服务器页增添了额外的压力.为了解决无状态带来的鉴权问题,一般有以下几种解决方案:cookie、session、token.至于标题中提及的outh2、jwt本质上也是token方案.</p>
<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>Cookie是储存在客户端的一串字符,一般说来大小不超过4kb.比如我们常见的记住密码功能,或者一些基于之前输入的提醒和默认配置,就是通过cookie来实现的,cookie简单说来就是一种本地存储方法.但是这里存储的信息常用来进行鉴权操作.cookie只能保存文本信息,浏览器可以禁止cookie.cookie的期限可以被自由设定,可以是仅仅一次浏览起效,也可以长达一年.如果是短期的,那么这些信息会被存储在内存中,如果是长期则会存储在硬盘上.cookie的起效范围是路径下的所有子路径.不允许其他来源的访问.</p>
<p>单纯的采用cookie来认证身份会带来一个比较麻烦的问题,就是伪造比较容易.因为这样处理,cookie中必然要带有身份信息,但是服务器也要解析这个身份信息,所以必然要在原理上支持双向的编码和解码,那么这个信息很容易被破解和进一步伪造.想一想,如果想要解决这个问题,我们常用的方案应该是加一个secret,而这个secret应该是放在服务器上的,服务器返回这样一个<code>带有secret编码的字符串</code>,而在服务器端再带上这个secret反向解密,如此一来,问题不就解决了吗?确实如此,但是这不代表cookie就安全,因为这已经不叫cookie了,而是我们要讲的第二个对象:session.<br><a id="more"></a></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>通过上面说的东西,我们已经能够获得身份信息,额外的,我们还可以把更复杂形式的信息都存储进来,因为这里没有cookie的纯文本限制.但是刚才说的<code>带有secret编码的字符串</code>也就是sessionid,依然要存储在客户端.是不是意味着session必定要依赖cookie呢?不是!想一想,我们实际上需要的是在每一次请求(至少是需要判定身份状态的请求中),都带上这个字符串,我们有以下这几种解决方案:</p>
<ul>
<li>cookie</li>
<li>表单隐藏字段:在form中放置一个隐藏的域</li>
<li>url重写:在url后边加上session的query段</li>
</ul>
<p>Session也可以设定有效时间.其实际的存储可以在内存、缓存、文件中.通过类似//可能具体实现不同.//hash表的数据结构存储.cookie是一个存在的实体,session是一种机制.</p>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>对token的理解还不够,可能多有纰漏之处,待之后再进行修改.</p>
<p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>
<ul>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端<br>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</li>
</ul>
<p>可以看出来,这里的token与sessionid有些类似,其区别:</p>
<ul>
<li>sessionid是带着之前的状态的,在服务器端可以getSession(sessionid)</li>
<li>token是在登录验证之后发放的一个包含着用户基本信息的较长的字符串,用处是验证身份以及简化后续获取信息的难度.</li>
<li>token机制更灵活,可以实现跨域</li>
</ul>
<h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><p>Jwt简单说来是一种token的具体实现规范!</p>
<p>Jwt标准的token有三个部分,中间用点分隔开，并且都会使用 Base64 编码:</p>
<ul>
<li>header<blockquote>
<p>header 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法</p>
</blockquote>
</li>
<li>Payload <blockquote>
<p>里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容</p>
</blockquote>
</li>
<li>Signature<blockquote>
<p>编码以上两个部分并且加入一个secret使用信息摘要算法得出一个字符串</p>
</blockquote>
</li>
</ul>
<h3 id="oauth2"><a href="#oauth2" class="headerlink" title="oauth2"></a>oauth2</h3><p>简单来说,oauth是用来向第三方平台提供可以细致的权限管理的一种方案.</p>
<p>如何直接向第三方提供账号和密码,可能存在的问题有:</p>
<ul>
<li>不安全</li>
<li>无法更细致的限制授权范围和有效期</li>
<li>只有修改密码才能收回权限</li>
<li>一个第三方程序被破解将会导致用户密码泄漏</li>
</ul>
<p>OAuth的基本思路如下:</p>
<blockquote>
<p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。”客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这篇文章讲解的三种方案:cookie、session、token的理解可能会有问题,尤其是token和session很容易让人觉得token就是一种sessionid而已.简单的理解方式:</p>
<ul>
<li>Cookie 就是一个写着自己是谁的小纸条.共产党看到你,就无条件相信了你是狗蛋</li>
<li>Session是加入了领导最喜欢的一首诗的名字,然后和同志姓名拼起来编码成了一个字符串交给你.当共产党拿到的时候要先反向破解,然后认定你就是狗蛋,再去查找记事本上狗蛋的编制给他发了这个月的口粮.</li>
<li>Token是组织上经过审查认定你就是狗蛋,为了嫌麻烦不想下次再查记事本,所以把你的编制信息直接拼起来编码发给你,下次去的时候他们翻译出来你的编制直接给你发.</li>
</ul>
<p>目前对于这篇文章的内容依然有不理解之处,等待进一步修改.</p>
<p>参考资料:</p>
<ul>
<li><a href="https://my.oschina.net/biezhi/blog/490242#OSC_h2_3" target="_blank" rel="noopener">Http Session和Cookie - _</a></li>
<li><a href="http://blog.csdn.net/java_faep/article/details/78082802" target="_blank" rel="noopener">服务器端Session和客户端Session（和Cookie区别） - 曾梦想仗剑走天涯的博客 - CSDN博客</a></li>
<li><a href="https://www.zhihu.com/question/31079651" target="_blank" rel="noopener">https://www.zhihu.com/question/31079651</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">http://blog.leapoahead.com/2015/09/06/understanding-jwt/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0 - 阮一峰的网络日志</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28295641" target="_blank" rel="noopener">Web App Token 鉴权方案的设计与思考</a></li>
<li><a href="https://www.zhihu.com/question/39137156/answer/80228149" target="_blank" rel="noopener">app开发token、cookie的区别，账号密码加密又是如何保证安全？ - 知乎</a></li>
<li><a href="http://tech.colla.me/zh/show/token_session_cookie" target="_blank" rel="noopener">cookie &amp; session &amp; token的简单理解 | colla.me</a></li>
<li><a href="https://ninghao.net/blog/2834" target="_blank" rel="noopener">基于 Token 的身份验证 - 宁皓网</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> http </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记四：api全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9Aapi%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记四：api全解"><a href="#HTML5完全学习笔记四：api全解" class="headerlink" title="HTML5完全学习笔记四：api全解"></a>HTML5完全学习笔记四：api全解</h1><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>地理位置 API 通过 navigator.geolocation 提供。默认不开启,需要请求.<br>Geolocation API 的数据来源可能是 GPS、IP 地址、RFID、WiFi、蓝牙 MAC 地址、GSM/CDMA 卡 ID 等。</p>
<p>方法如下:</p>
<ul>
<li>Geolocation.getCurrentPosition():获取位置返回position对象</li>
</ul>
<blockquote>
<p>这会异步地请求获取用户位置，并查询定位硬件来获取最新信息。当定位被确定后，定义的回调函数就会被执行。您可以选择性地提供第二个回调函数，当有错误时会被执行。第三个参数也是可选的，您可以通过该对象参数设定最长可接受的定位返回时间、等待请求的时间和是否获取高精度定位。</p>
</blockquote>
<a id="more"></a>
<pre><code class="javascript">var options = {
  enableHighAccuracy: true,
  timeout: 5000,
  maximumAge: 0
};

function success(pos) {
  var crd = pos.coords;
  console.log(&#39;Your current position is:&#39;);
  console.log(&#39;Latitude : &#39; + crd.latitude);
  console.log(&#39;Longitude: &#39; + crd.longitude);
  console.log(&#39;More or less &#39; + crd.accuracy + &#39; meters.&#39;);
};

function error(err) {
  console.warn(&#39;ERROR(&#39; + err.code + &#39;): &#39; + err.message);
};
</code></pre>
<ul>
<li>Geolocation.watchPosition():位置监听器,每当改变,返回一个long类型的监听器id,用来传递给clearwatch停止监听.</li>
<li>Geolocation.clearWatch():取消由 watchPosition()注册的位置监听器。</li>
</ul>
<p>关于getCurrentPosition返回undefined的原因:</p>
<blockquote>
<p>This is because navigator.geolocation.getCurrentPosition is asynchronous. The getGeoLocation function returns before the anonymous callback function passed to getCurrentPosition has been executed, and since the getGeoLocation function has no return statement, it returns undefined.</p>
</blockquote>
<p>这是一个异步执行的函数,由于本身没有返回值,所以返回了undefined.</p>
<h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>H5的本地存储方案主要分为两类:webStorage和IndexedDB.其中webStorage分为localStorage和sessionStorage.indexedDB则是web SQL的替代方案.</p>
<h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><p>localStorage和sessionStorage的操作一致,主要区别是在保存时间上,前者可以一直保存,后者只保存在一个session内.大小限制视不同浏览器在5-20M之间.内部保存方式都是字符串方式,如果需要保存其他类型的数据需要自行转换.方法如下:</p>
<ul>
<li>保存数据：localStorage.setItem(key,value);</li>
<li>读取数据：localStorage.getItem(key);</li>
<li>删除单个数据：localStorage.removeItem(key);</li>
<li>删除所有数据：localStorage.clear();</li>
<li>得到某个索引的key：localStorage.key(index);</li>
</ul>
<h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>IndexedDB是为了能够在客户端存储大量的结构化数据，并且使用索引高效检索的API。采用异步API,其存储方式类似于Nosql.存储空间一般来说不少于250MB。支持事务和二进制存储.</p>
<blockquote>
<p>indexedDB 对象在旧版本的浏览器上是带有前缀的 (在 Gecko &lt; 16的情况下是 mozIndexedDB 属性，Chrome 中是 webkitIndexedDB ，以及IE10 的 msIndexedDB )。</p>
</blockquote>
<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p>
<p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</p>
<p>manifest 文件可分为三个部分：</p>
<ul>
<li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li>
<li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li>
<li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li>
</ul>
<p>一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。</p>
<h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>web worker 是运行在后台的 JavaScript,独立于UI进程,可以用来做一些高度消耗CPU的工作.</p>
<p>在外部文件中用postMessage来传送消息,在原文件用onmessage获取消息. <code>w=new Worker(&quot;demo_workers.js&quot;);</code>创建worker,<code>w.terminate();</code>终止worker.</p>
<h2 id="Server-Sent-Events"><a href="#Server-Sent-Events" class="headerlink" title="Server-Sent Events"></a>Server-Sent Events</h2><p>实现服务器向浏览器的推送.SSE使用的是http协议,而WebSocket 是一个独立协议.其用来传送文本信息,可以自定义发送的消息类型.SSE 要求服务器与浏览器保持连接.</p>
<blockquote>
<p>严格地说，HTTP 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p>
</blockquote>
<h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><p><code>var source = new EventSource(url, { withCredentials: true });</code>生成示例,可以跨域.连接一旦建立，就会触发open事件，可以在onopen属性定义回调函数。客户端收到服务器发来的数据，就会触发message事件，可以在onmessage属性的回调函数。<code>source.close();</code>关闭连接.</p>
<pre><code class="javascript">source.onmessage = function (event) {
  var data = event.data;
  // handle message
};
</code></pre>
<p>默认情况下，服务器发来的数据，总是触发浏览器EventSource实例的message事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发message事件。</p>
<h3 id="服务器端实现"><a href="#服务器端实现" class="headerlink" title="服务器端实现"></a>服务器端实现</h3><p>Content-Type必须指定 MIME 类型为event-steam.每一次发送的信息，由若干个message组成，每个message之间用\n\n分隔。每个message内部由若干行组成，每一行都是如下格式:<code>[data/event/id/retry]: value\n</code>,此外，还可以有冒号开头的行，表示注释。如果data很长，可以分成多行，最后一行用\n\n结尾，前面行都用\n结尾。数据标识符用id字段表示，相当于每一条数据的编号。event字段表示自定义的事件类型，默认是message事件。服务器可以用retry字段，指定浏览器重新发起连接的时间间隔。</p>
<blockquote>
<p>浏览器用lastEventId属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的Last-Event-ID头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p>
</blockquote>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。     </p>
<pre><code class="javascript">var ws = new WebSocket(&quot;wss://echo.websocket.org&quot;);
ws.onopen = function(evt) { 
  console.log(&quot;Connection open ...&quot;); 
  ws.send(&quot;Hello WebSockets!&quot;);
};
ws.onmessage = function(evt) {
  console.log( &quot;Received Message: &quot; + evt.data);
  ws.close();
};
ws.onclose = function(evt) {
  console.log(&quot;Connection closed.&quot;);
};
</code></pre>
<p>服务器数据可能是文本，也可能是二进制数据（blob对象或Arraybuffer对象）。实例对象的bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p>
<p>参考资料:</p>
<ul>
<li><a href="http://javascript.ruanyifeng.com/bom/indexeddb.html" target="_blank" rel="noopener">IndexedDB：浏览器端数据库 — JavaScript 标准参考教程（alpha）</a></li>
<li><a href="http://www.runoob.com/html/html5-webstorage.html" target="_blank" rel="noopener">HTML5 Web 存储 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/LuckyWinty/p/5699117.html" target="_blank" rel="noopener">前端HTML5几种存储方式的总结 - 小蚊 - 博客园</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers" target="_blank" rel="noopener">Functions and classes available to Web Workers - Web APIs | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation" target="_blank" rel="noopener">Geolocation - Web API 接口 | MDN</a></li>
<li><a href="http://www.alloyteam.com/2015/11/deep-in-web-worker/" target="_blank" rel="noopener">【转向Javascript系列】深入理解Web Worker | AlloyTeam</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noopener">Server-Sent Events 教程 - 阮一峰的网络日志</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程 - 阮一峰的网络日志</a></li>
<li><a href="http://websocketd.com" target="_blank" rel="noopener">websocketd</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记三：canvas全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9Acanvas%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记三：canvas全解"><a href="#HTML5完全学习笔记三：canvas全解" class="headerlink" title="HTML5完全学习笔记三：canvas全解"></a>HTML5完全学习笔记三：canvas全解</h1><p>Canvas用于通过js绘制图片和动画。最早由apple引入webkit。</p>
<p>Canvas元素只有width和height属性，默认情况下的值为300*150.该元素可以使用CSS来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。尽量使用width和height来设定canvas的形状大小而非css。</p>
<h2 id="getContext"><a href="#getContext" class="headerlink" title="getContext"></a>getContext</h2><p>访问绘图上下文，检测是否支持canvas也可以通过检测getcontext。</p>
<pre><code>var canvas = document.getElementById(&#39;tutorial&#39;);

if (canvas.getContext){
  var ctx = canvas.getContext(&#39;2d&#39;);
} else {
}
</code></pre><a id="more"></a>
<h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><p>Canvas只支持一种原生的图像绘制，就是矩形。其他图形的绘制都需要路径实现。</p>
<p>绘制矩形的方式：</p>
<ul>
<li>fillRect(x, y, width, height)//fill表示填充</li>
<li>strokeRect(x, y, width, height)//stroke表示边框</li>
<li>clearRect(x, y, width, height)//清除使之变透明</li>
<li>rect(x, y, width, height)//该方法执行时，笔触自动回复道默认位置//？执行时？是指绘制完之后再绘制下一个的时候吗？</li>
</ul>
<h2 id="通过路径绘图"><a href="#通过路径绘图" class="headerlink" title="通过路径绘图"></a>通过路径绘图</h2><ul>
<li>首先，你需要创建路径起始点。<blockquote>
<p>beginPath()：当前路径为空，即调用beginPath()之后，或者canvas刚建的时候，第一条路径构造命令通常被视为是moveTo（），无论最后的是什么。出于这个原因，你几乎总是要在设置路径之后专门指定你的起始位置。</p>
</blockquote>
</li>
<li>然后你使用画图命令去画出路径。</li>
<li>之后你把路径封闭。<blockquote>
<p>cloasepath（）：绘制一条从当前点到开始点的直线来闭合图形。如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做。</p>
</blockquote>
</li>
<li>一旦路径生成，你就能通过描边或填充路径区域来渲染图形。<blockquote>
<p>当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。</p>
</blockquote>
</li>
</ul>
<h3 id="移动笔触"><a href="#移动笔触" class="headerlink" title="移动笔触"></a>移动笔触</h3><p>moveTo（x，y）：用来绘制不连续的路径。</p>
<h3 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h3><p>lineTo（x，y）：绘制从当前到目的坐标的直线。</p>
<h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><p>arc(x, y, radius, startAngle, endAngle, anticlockwise)：画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</p>
<p>其中的角度单位是弧度而非度数。<code>radians=(Math.PI/180)*degrees</code>。</p>
<h3 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h3><p>quadraticCurveTo(cp1x, cp1y, x, y)：绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</p>
<p>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)：绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</p>
<h2 id="path2D"><a href="#path2D" class="headerlink" title="path2D"></a>path2D</h2><p>Path2D用来缓存或记录绘画命令。简单来说，可以认为它用来存储一系列的绘画指令，用以简化重复操作。</p>
<pre><code class="javascript">function draw() {
  var canvas = document.getElementById(&#39;canvas&#39;);
  if (canvas.getContext){
    var ctx = canvas.getContext(&#39;2d&#39;);

    var rectangle = new Path2D();
    rectangle.rect(10, 10, 50, 50);

    var circle = new Path2D();
    circle.moveTo(125, 35);
    circle.arc(100, 35, 25, 0, 2 * Math.PI);

    ctx.stroke(rectangle);
    ctx.fill(circle);
  }
}
</code></pre>
<h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><p>fillStyle = color：设置图形的填充颜色；strokeStyle = color：设置图形轮廓的颜色。</p>
<blockquote>
<p>注意: 一旦您设置了 strokeStyle 或者 fillStyle 的值，那么这个新值就会成为新绘制的图形的默认值。如果你要给每个图形上不同的颜色，你需要重新设置 fillStyle 或 strokeStyle 的值。</p>
<p>globalAlpha = transparencyValue；可选的范围是0.0-1.0，会设置之后所有被绘制的canvas图形的透明度。但是由于支持rgba格式的颜色，所以这个方法并不必要。</p>
</blockquote>
<h2 id="线型"><a href="#线型" class="headerlink" title="线型"></a>线型</h2><ul>
<li>lineWidth = value<br>设置线条宽度。</li>
<li>lineCap = type<br>设置线条末端样式。butt(默认)，round 和 square。<br><img src="https://developer.mozilla.org/@api/deki/files/88/=Canvas_linecap.png" alt=""></li>
<li>lineJoin = type<br>设定线条与线条间接合处的样式。round, bevel 和 miter(默认).<br><img src="https://developer.mozilla.org/@api/deki/files/89/=Canvas_linejoin.png" alt=""></li>
<li>miterLimit = value<br>限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度。</li>
<li>getLineDash()<br>返回一个包含当前虚线样式，长度为非负偶数的数组。</li>
<li>setLineDash(segments)<br>设置当前虚线样式。<br>这里的参数一般情况下应该为两个，表示线长和间隔长度，其他情况时代表从左侧到右侧的每一块长度的循环单元，这里的长度块既包含线也包含间隔。</li>
<li>lineDashOffset = value<br>设置虚线样式的起始偏移量。</li>
</ul>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>我们用下面的方法新建一个 canvasGradient 对象，并且赋给图形的 fillStyle 或 strokeStyle 属性。</p>
<p>createLinearGradient(x1, y1, x2, y2)：createLinearGradient 方法接受 4 个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。<br>createRadialGradient(x1, y1, r1, x2, y2, r2)：createRadialGradient 方法接受 6 个参数，前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。</p>
<p>创建出 canvasGradient 对象后，我们就可以用 addColorStop 方法给它上色了。</p>
<p>gradient.addColorStop(position, color)：addColorStop 方法接受 2 个参数，position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。color 参数必须是一个有效的 CSS 颜色值（如 #FFFFFF rgba(0,0,0,1)，等等）。这里的相对位置就是图形化后的色标位置。</p>
<pre><code class="javascript">var lineargradient = ctx.createLinearGradient(0,0,150,150);
lineargradient.addColorStop(0,&#39;white&#39;);
lineargradient.addColorStop(1,&#39;black&#39;);
</code></pre>
<h2 id="图案样式"><a href="#图案样式" class="headerlink" title="图案样式"></a>图案样式</h2><p>createPattern(image, type)：该方法接受两个参数。Image 可以是一个 Image 对象的引用，或者另一个 canvas 对象。Type 必须是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。<br><strong><em> 使用 Image 对象的 onload handler 来确保设置图案之前图像已经装载完毕。</em></strong></p>
<pre><code class="javascript">function draw() {
  var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);
  // 创建新 image 对象，用作图案
  var img = new Image();
  img.src = &#39;images/wallpaper.png&#39;;
  img.onload = function(){
    // 创建图案
    var ptrn = ctx.createPattern(img,&#39;repeat&#39;);
    ctx.fillStyle = ptrn;
    ctx.fillRect(0,0,150,150);

  }
}
</code></pre>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><ul>
<li>shadowOffsetX = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li>
<li>shadowOffsetY = float<br>shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。</li>
<li>shadowBlur = float<br>shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。</li>
<li>shadowColor = color<br>shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</li>
</ul>
<h2 id="填充规则"><a href="#填充规则" class="headerlink" title="填充规则"></a>填充规则</h2><p>用fill、clip、ispointinpath时可以选择填充规则：nonzero（默认）/evenodd<br>（填充中间部分）</p>
<h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>fillText(text, x, y [, maxWidth]):在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的.<br>strokeText(text, x, y [, maxWidth]):在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的.</p>
<p>文本还可以设置样式：</p>
<ul>
<li>font = value<br>当前我们用来绘制文本的样式. 这个字符串使用和 CSS font 属性相同的语法. 默认的字体是 10px sans-serif。</li>
<li>textAlign = value<br>文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。</li>
<li>textBaseline = value<br>基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li>
<li>direction = value<br>文本方向。可能的值包括：ltr, rtl, inherit。默认值是 inherit。</li>
</ul>
<p>文本测量：measureText()：将返回一个 TextMetrics对象的宽度、所在像素，这些体现文本特性的属性。</p>
<h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p>在绘制之前，要先通过dom方法来获取图片/视频的帧/canvas对象。</p>
<p>drawImage(image, x, y):其中 image 是 image 或者 canvas 对象，x 和 y 是其在目标 canvas 里的起始坐标。</p>
<pre><code class="javascript">function draw() {
    var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);
    var img = new Image();
    img.onload = function(){
      ctx.drawImage(img,0,0);
      ctx.beginPath();
      ctx.moveTo(30,96);
      ctx.lineTo(70,66);
      ctx.lineTo(103,76);
      ctx.lineTo(170,15);
      ctx.stroke();
    }
    img.src = &#39;images/backdrop.png&#39;;
  }
</code></pre>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>drawImage(image, x, y, width, height)：这个方法多了2个参数：width 和 height，这两个参数用来控制 当像canvas画入时应该缩放的大小。</p>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)：第一个参数和其它的是相同的，都是一个图像或者另一个 canvas 的引用。其它8个参数，前4个是定义图像源的切片位置和大小，后4个则是定义切片的目标显示位置和大小。</p>
<h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><p>save()restore()：save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>
<blockquote>
<p>Canvas状态存储在栈中，每当save()方法被调用后，当前的状态就被推送到栈中保存。一个绘画状态包括：当前应用的变形（即移动，旋转和缩放，见下）strokeStyle, fillStyle, globalAlpha, lineWidth, lineCap, lineJoin,miterLimit,shadowOffsetX, shadowOffsetY, shadowBlur,shadowColor,globalCompositeOperation 的值当前的裁切路径（clipping path）</p>
</blockquote>
<pre><code class="javascript">function draw() {
  var ctx = document.getElementById(&#39;canvas&#39;).getContext(&#39;2d&#39;);

  ctx.fillRect(0,0,150,150);   // 使用默认设置绘制一个矩形
  ctx.save();                  // 保存默认状态

  ctx.fillStyle = &#39;#09F&#39;       // 在原有配置基础上对颜色做改变
  ctx.fillRect(15,15,120,120); // 使用新的设置绘制一个矩形

  ctx.save();                  // 保存当前状态
  ctx.fillStyle = &#39;#FFF&#39;       // 再次改变颜色配置
  ctx.globalAlpha = 0.5;    
  ctx.fillRect(30,30,90,90);   // 使用新的配置绘制一个矩形

  ctx.restore();               // 重新加载之前的颜色状态
  ctx.fillRect(45,45,60,60);   // 使用上一次的配置绘制一个矩形

  ctx.restore();               // 加载默认颜色配置
  ctx.fillRect(60,60,30,30);   // 使用加载的配置绘制一个矩形
}
</code></pre>
<p><img src="https://mdn.mozillademos.org/files/249/Canvas_savestate.png" alt=""></p>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>translate(x, y)：translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。用来移动 canvas 和它的原点到一个不同的位置。</p>
<p>translate和moveto的区别是什么？</p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>rotate(angle)：这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。旋转的中心点始终是 canvas 的原点，如果要改变它，我们需要用到 translate 方法。</p>
<h3 id="缩放-1"><a href="#缩放-1" class="headerlink" title="缩放"></a>缩放</h3><p>scale(x, y)：scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。</p>
<h3 id="变形-1"><a href="#变形-1" class="headerlink" title="变形"></a>变形</h3><p>transform(m11, m12, m21, m22, dx, dy)</p>
<pre><code>m11 m21 dx
m12 m22 dy
0     0     1
</code></pre><p>用以上矩阵进行图像变换。</p>
<p>setTransform()：将当前的变换矩阵设置为默认的单位矩阵，然后在单位矩阵之上运用用户指定的变换。</p>
<p>resetTransform()：重置为单位矩阵。</p>
<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>globalCompositeOperation：覆盖规则，当其为“source-over”，后来者居上，当其为“destination-over”则相反。</p>
<h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><blockquote>
<p>clip()方法从原始画布中剪切任意形状和尺寸。提示：一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）</p>
</blockquote>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>requestAnimationFrame(callback)</p>
<blockquote>
<p>。这个方法提供了更加平缓并更加有效率的方式来执行动画，当系统准备好了重绘条件的时候，才调用绘制动画帧。一般每秒钟回调函数执行60次，也有可能会被降低。<br>回调函数只会被传入一个参数，DOMHighResTimeStamp，指示当前被 requestAnimationFrame 序列化的函数队列被触发的时间。即使经过了许多对之前回调的计算工作时间，单个帧中的多个回调也都将被传入相同的时间戳。此数值是一个十进制数，单位毫秒，最小精度为1ms(1000μs)。</p>
</blockquote>
<h2 id="ImageData-对象"><a href="#ImageData-对象" class="headerlink" title="ImageData 对象"></a>ImageData 对象</h2><p>其包含的内容有:width、height、data:Uint8ClampedArray 类型</p>
<p>createImageData(width, height):创建对象,颜色为黑色.</p>
<p>getImageData(left, top, width, height):这个方法会返回一个ImageData对象，它代表了画布区域的对象数据.</p>
<p>putImageData(myImageData, dx, dy):对场景进行像素数据的写入.</p>
<h2 id="反锯齿"><a href="#反锯齿" class="headerlink" title="反锯齿"></a>反锯齿</h2><p>imageSmoothingEnabled属性//默认情况下启用(true)</p>
<p>参考资料：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes" target="_blank" rel="noopener">使用canvas来绘制图形 - Web API 接口 | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas" target="_blank" rel="noopener">像素操作 - Web API 接口 | MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记二：events全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9Aevents%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记二：events全解"><a href="#HTML5完全学习笔记二：events全解" class="headerlink" title="HTML5完全学习笔记二：events全解"></a>HTML5完全学习笔记二：events全解</h1><h2 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h2><p>适用于body标签</p>
<ul>
<li>onafterprint<blockquote>
<p>注意： 目前只有 Internet Explorer 和 Firefox 浏览器支持 onafterprint 事件属性。在 IE 浏览器中, onafterprint 属性在打印对话框之前执行Javascript而不是之后。//?是否意味着在ie中onafterprint=onberforeprint</p>
<a id="more"></a></blockquote>
</li>
<li>onbeforeprint</li>
<li>onbeforeunload    <blockquote>
<p> 在onload之前执行，可以阻止unload的执行，在页面关闭页面或者刷新时执行</p>
</blockquote>
</li>
<li>onblur</li>
<li>onerror<blockquote>
<p>此外，onerror方法还提供了三个参数用来确定错误确切的信息，分别是：1）message：一个字符串，声明了出现的错误的信息(不同的浏览器中返回的消息内容略有差异)。2）url：一个字符串，声明了出现错误的文档的URL。3）line：一个数字，声明了出现错误的代码行的行号。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>当JavaScript运行时错误（包括语法错误）发生时，window会触发一个ErrorEvent接口的error事件，并执行window.onerror()。当一项资源（如<img>或<script>）加载失败，加载资源的元素会触发一个Event接口的error事件，并执行该元素上的onerror()处理函数。这些error事件不会向上冒泡到window，不过（至少在Firefox中）能被单一的window.addEventListener捕获。</p>
<ul>
<li>onfocus</li>
<li>onhaschange<br>锚改变时触发，有两个属性newURL和oldURL。</li>
<li>onload<br>onload 通常用于 <body> 元素，在页面完全载入后(包括图片、css文件等等。)执行脚本代码。</li>
<li>onmessage<br>Web Workers </li>
<li>onoffline</li>
<li>ononline<br>使用navigator.onLine 也可以检测是否在线</li>
<li>onpagehide</li>
<li>onpageshow<br>onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发。</li>
<li>onpopstate<br>每当处于激活状态的历史记录条目发生变化时,popstate事件就会在对应window对象上触发. 如果当前处于激活状态的历史记录条目是由history.pushState()方法创建,或者由history.replaceState()方法修改过的, 则popstate事件对象的state属性包含了这个历史记录条目的state对象的一个拷贝.调用history.pushState()或者history.replaceState()不会触发popstate事件. popstate事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用history.back()、history.forward()、history.go()方法).当网页加载时,各浏览器对popstate事件是否触发有不同的表现,Chrome 和 Safari会触发popstate事件, 而Firefox不会.</li>
<li>onredo</li>
<li>onresize</li>
<li>onstorage<br>web存储区域（DOM Storage）更新时触发onstorage事件。如果变更了Storage对象的属性值，或者调用了setItem()、removeItem()等方法，就会触发onstorage事件。//这里的或者是什么意思，如果调用setitem但并不更改值只是设定为和之前的值一样，是否会触发这个事件。</li>
<li>onundo</li>
<li>onunload</li>
</ul>
</blockquote>
<p>//有些类似于生命周期函数或者就是生命周期函数？</p>
<h2 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h2><p>适用于在form内部的所有元素</p>
<ul>
<li>onblur</li>
<li>onchange</li>
<li>oncontextmenu<blockquote>
<p>此事件会发生在没有阻止右键事件的情况下而且这不取决于此元素是否拥有了”contextmenu”属性.</p>
</blockquote>
</li>
<li>onfocus</li>
<li>onformchange</li>
<li>onforminput</li>
<li>oninput</li>
<li>oninvalid</li>
<li>onselect</li>
<li>onsubmit</li>
</ul>
<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><ul>
<li>onkeydown</li>
<li>onkeypress</li>
<li>onkeyup</li>
</ul>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><ul>
<li>onclick</li>
<li>ondbclick</li>
<li>ondrag</li>
<li>ondragend</li>
<li>ondragenter</li>
<li>ondragleave</li>
<li>ondragover</li>
<li>ondragstart</li>
<li>ondrop</li>
<li>onmousedown</li>
<li>onmousemove</li>
<li>onmouseout</li>
<li>onmouseover</li>
<li>onmouseup</li>
<li>onmousewheel</li>
<li>onscrolll</li>
</ul>
<h2 id="多媒体事件"><a href="#多媒体事件" class="headerlink" title="多媒体事件"></a>多媒体事件</h2><ul>
<li>onabort</li>
<li>oncanplay</li>
<li>oncanplaythrough</li>
<li>ondurationchange</li>
<li>onemptied</li>
<li>onended</li>
<li>onerror</li>
<li>onloadeddata</li>
<li>onloadedmetadata</li>
<li>onloadstart</li>
<li>onpause</li>
<li>onplay</li>
<li>onplaying</li>
<li>onprogress</li>
<li>onratechange</li>
<li>onreadystatechange</li>
<li>onseeked</li>
<li>onseeking</li>
<li>onstalled</li>
<li>onsuspend</li>
<li>ontimeupdate</li>
<li>onvolumechage</li>
<li>onwaiting</li>
</ul>
<h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><ul>
<li>onshow：menu显示时触发，兼容性不佳</li>
<li>ontoggle：打开或关闭details时触发</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.runoob.com/tags/ref-eventattributes.html">HTML 事件 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/arinna/archive/2011/08/08/2130629.html">JavaScript中的onerror事件 - arinna - 博客园</a></li>
</ul>
</script></p></blockquote>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5完全学习笔记一：element全解]]></title>
      <url>/2017/12/23/HTML5%E5%AE%8C%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9Aelement%E5%85%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="HTML5完全学习笔记一：element全解"><a href="#HTML5完全学习笔记一：element全解" class="headerlink" title="HTML5完全学习笔记一：element全解"></a>HTML5完全学习笔记一：element全解</h1><h2 id="lt-DOCTYPE-gt"><a href="#lt-DOCTYPE-gt" class="headerlink" title="&lt;!DOCTYPE&gt;"></a>&lt;!DOCTYPE&gt;</h2><h3 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h3><p>Doctype并不是html标签，它是一个声明，必须在html文件第一行，告诉浏览器用哪种模式进行渲染。对大小写不敏感。</p>
<h3 id="H4和h5中的不同："><a href="#H4和h5中的不同：" class="headerlink" title="H4和h5中的不同："></a>H4和h5中的不同：</h3><p>在html4中，需要引用DTD，因为html4基于SGML，在h5中则不需要引用DTD。在html4中有三种声明，在h5中只有一种声明，即<code>&lt;!DOCTYPE html&gt;</code>。</p>
<h3 id="浏览器的三种模式："><a href="#浏览器的三种模式：" class="headerlink" title="浏览器的三种模式："></a>浏览器的三种模式：</h3><p>浏览器有三种模式：怪异模式（Quirks mode）、接近标准模式（Almost standards mode）、以及标准模式（Standards mode）。</p>
<p>怪异模式，有时也称混合模式，是为了解决在W3C标准制定之前的页面兼容问题，而标准模式则会以W3C标准进行解析。接近标准模式和标准模式几乎一样。当doctype有问题或者不存在时会启动怪异模式。</p>
<p>除了doctype以外，还可以通过<code>x-ua-compatible</code>来进行文档类型的判定。这种设定要比doctype的优先级高。既可以写在head里，也可以在发送请求时写在header里。</p>
<p>怪异模式和标准模式的区别主要有盒模型、内联元素、溢出处理等处。<br><a id="more"></a></p>
<h4 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h4><p>盒模型有两种：IE盒模型和标准盒模型。</p>
<p> IE盒模型将盒子的padding和border都算入了盒子的尺寸里。在这种情况下：<br>box width = content width + padding left + padding right + border left + border right；<br>box height = content height + padding top + padding bottom + border top + border bottom；</p>
<p>在标准盒模型中，box的大小就是content的大小。</p>
<p>具体而言，你设置的块级元素的width和height就是box 的width和height。</p>
<h4 id="图片元素的垂直对齐方式"><a href="#图片元素的垂直对齐方式" class="headerlink" title="图片元素的垂直对齐方式"></a>图片元素的垂直对齐方式</h4><p>CSS有一个<code>vertical-align</code>属性，用来设置inline和table-cell元素的垂直对齐方式。其取值默认为baseline，可取的值还有bottom、middle等。</p>
<p>当行内元素只有图片，那么标准模式下的属性值默认为bottom，因此会在图片底部显示几px的空间。//此处存在疑问，IBM的教材和大多数地方都表明是怪异模式下有几个px空间，而IBM的示例图片和少数文章表明是标准模式下存在问题。</p>
<p>这里实测在标准模式下，默认应该为baseline，存在空白，当设置为bottom时不存在空白部分。怪异模式下baseline和bottom的表现都一样，不存在空白。</p>
<blockquote>
<p>之所以有这个问题，可以想象原本图片后边有文字，那么按照默认的消除空白的方式有，将外层块设置<code>font-size:0</code>，或者<code>line-height</code>足够小。<a href="https://www.zybuluo.com/yangfch3/note/669414" target="_blank" rel="noopener">vertical-align 与 web 图文排版 - 作业部落 Cmd Markdown 编辑阅读器</a>  </p>
</blockquote>
<h4 id="table元素中的字体"><a href="#table元素中的字体" class="headerlink" title="table元素中的字体"></a>table元素中的字体</h4><p>CSS中字体的相关属性有font-family、font-style、font-weight、font-size。在标准模式下，table将会继承上一层的字体样式，而在怪异模式下，字体的某些属性将不会被继承，特别是font-size属性。</p>
<h4 id="内联元素的尺寸"><a href="#内联元素的尺寸" class="headerlink" title="内联元素的尺寸"></a>内联元素的尺寸</h4><p>首先介绍下inline元素的类别：non-replaced和replaced。简单而言，默认具有css样式的就是replaced元素，比如input、select。none-replaced元素比如span。</p>
<p>标准模式下non-replaced无法自定义大小，而怪异模式下，可以通过width和height修改。</p>
<h4 id="元素的百分比高度"><a href="#元素的百分比高度" class="headerlink" title="元素的百分比高度"></a>元素的百分比高度</h4><p>标准模式下的元素高度尤其包含的内容决定，如果父元素没有设置高度，子元素设置一个百分比高度是无效的。实测怪异模式下如果子元素设置百分比高度，那么最终高度实际上是相对于整个文档高度？也可能是视窗高度？但是父元素的高度上实际上还是被子元素撑满。</p>
<h4 id="元素溢出的处理"><a href="#元素溢出的处理" class="headerlink" title="元素溢出的处理"></a>元素溢出的处理</h4><p>标准模式下的overflow默认取值为visible，也就是溢出内容可以显示，但是看起来是显示在元素框之外。但是在怪异模式下，当溢出时则会把元素框撑开。</p>
<h4 id="图像padding"><a href="#图像padding" class="headerlink" title="图像padding"></a>图像padding</h4><p>怪异模式下的图像padding会失效。//部分文章有这一条，但是实测和IBM教程没有。</p>
<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p>用来表示超链接。<br>三种形式：</p>
<ul>
<li><code>&lt;a href=&quot;[URI]&quot;&gt;[Anchor text or image tag]&lt;/a&gt;</code></li>
<li><code>&lt;a id=&quot;#[identifier]&quot;&gt;[Anchor text or image tag]&lt;/a&gt;</code></li>
<li><p><code>&lt;a&gt;[Anchor text or image tag]&lt;/a&gt;</code></p>
<p>属性：</p>
</li>
<li>download：可以声明为下载链接，在chrome下可以直接下载，还可以指定文件名</li>
<li>href：可以为链接也可以设置为页内锚点，对于h4来说需要name属性，对于h5来说使用id</li>
<li>hreflang：iso语言代码</li>
<li>rel：规定被链接网页和当前网页的关系</li>
<li>target：在何处打开文档，在不使用frame的情况下，除了_blank之外的其他属性表现都相同，在当前页面直接打开，而_blank会打开一个新的标签页。</li>
<li>media：说明被链接的页面是为什么媒介优化的，存在运算符</li>
<li>type：被链接文档的MIME类型</li>
</ul>
<p>其中如果没有href属性，那么不能使用hreflang、media、rel、target、type属性。<br>//在最新的html5.2的标准文档中提及的属性存在差异。</p>
<h2 id="abbr"><a href="#abbr" class="headerlink" title="abbr"></a>abbr</h2><p>用来表示一个缩写。在某些浏览器中，当使用某些浏览器时，abbr的title属性可以用来展示完整版本。</p>
<h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><p>用来表示文档作者/所有者的联系信息。注意这里的联系信息并非只包括邮政地址。当它在article标签中表示这个文章的所有者，当在body标签中，表示文档的所有者。</p>
<h2 id="area"><a href="#area" class="headerlink" title="area"></a>area</h2><p>定义图像映射内部区域，必须包含在map标签内</p>
<p>属性：</p>
<ul>
<li>alt:代替文本，存在href时必须存在这个属性//不写也没问题，不知这是不是代码规范的要求</li>
<li>coords：规定区域的坐标</li>
<li>href</li>
<li>hreflang</li>
<li>media</li>
<li>rel</li>
<li>shape：规定了区域的形状，如rect、circle。默认值是default，其具体表现取决于coords的表示方式。</li>
<li>target</li>
<li>type</li>
</ul>
<p>很明显，area标签和a标签有很多类似的属性，两者的实现方式应该有相同之处。</p>
<h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><p>定义独立的内容如：帖子、博客文章、评论。<br>//由于我以往的理解认为article就是包含文章内容，所以对评论产生怀疑，查阅了相关资料得到的结论是section是一个有一定关联度的块，而article则更关联，当仅仅是需要添加一个整体的样式时，则应该直接使用div。可以说，这里让我对h5的语义化产生了一定的疑问，因为这种定义并不明确，更像是在做阅读理解。</p>
<h2 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h2><p>与article有关但是是article之外的部分，可以是文章的附属信息，也可以是网站的侧栏。<br>//！！！完全不知所云，具体应用情景到底是什么？需要阅读W3C规范还是看一下相关的书呢？</p>
<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>定义音乐。支持的文件格式有mp3、wav、ogg。不同浏览器支持的格式有区别，同时包含mp3和ogg可以解决主流浏览器的兼容问题。<br>在audio标签内写文本可以显示在不支持audio标签的浏览器上。//如果是图片可以吗？或者其他标签？canvas中至少支持图片.</p>
<p>属性：</p>
<ul>
<li>autoplay：存在该属性时音频马上播放。</li>
<li>controls：存在该属性显示音频控件。</li>
<li>loop：重新播放</li>
<li>muted： 静音</li>
<li>preload：音乐加载方式，如果存在autoplay，则忽略该属性。//那么实际上是怎样的方式，是auto吗？可选的有：auto、meta、none。</li>
<li>src：如果想要兼容使用多个可选值，那么需要使用source标签。</li>
</ul>
<h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><p>粗体文本。</p>
<blockquote>
<p>根据 HTML 5 的规范，<code>&lt;b&gt;</code> 标签应该做为最后的选择，只有在没有其他标记比较合适时才使用它。HTML 5 规范声明：标题应该用 <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标签表示，被强调的文本应该用 <code>&lt;em&gt;</code> 标签表示，重要的文本应该用 <code>&lt;strong&gt;</code> 标签表示，被标记的或者高亮显示的文本应该用 <code>&lt;mark&gt;</code> 标签表示。—菜鸟教程</p>
</blockquote>
<h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><p>相对链接的基准url。一个文档中最多一个，必须在head中。最好放在head的第一个。base必须要href属性或者target属性的至少一个。</p>
<p>属性：</p>
<ul>
<li>href</li>
<li>target</li>
</ul>
<h2 id="bdi"><a href="#bdi" class="headerlink" title="bdi"></a>bdi</h2><p>双向隔离元素，隔离可能以不同方向进行格式化的外部文本。浏览器兼容差。//没理解应用场景，似乎是和bdo搭配？</p>
<h2 id="bdo"><a href="#bdo" class="headerlink" title="bdo"></a>bdo</h2><p>用来覆盖默认的文本方向。用在多语言混合编排当中。</p>
<p>属性：</p>
<ul>
<li>dir：文本方向。rtl/ltr</li>
</ul>
<h2 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h2><p>引用，且是长引用，与q区别开。blockquote有缩进，是块级元素。q自带引号。</p>
<p>属性：</p>
<ul>
<li>cite：引用来源。</li>
</ul>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>文档的主体。</p>
<h2 id="br"><a href="#br" class="headerlink" title="br"></a>br</h2><p>换行符，空标签。</p>
<h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><p>按钮。不要在表单中使用button，应当使用input，否则导致问题：IE提交button之间的文本，其他浏览器提交value。//？不要使用指的是把button作为表段？</p>
<p>form中的button将默认作为submit。</p>
<blockquote>
<p>内部可以放置文本和图像，这是和input元素创建按钮的不同之处。 — 菜鸟教程</p>
<p>请始终为按钮规定 type 属性：Internet Explorer 的默认类型是 “button”，而其他浏览器中（包括 W3C 规范）的默认值是 “submit”。 —csdn</p>
</blockquote>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>disabled</li>
<li>form：规定按钮属于某个或多个表单。填写id值，多个用空格隔开。</li>
<li>formaction：提交表单的地址。与type=submit合作使用//？之前提到了button 放在form内默认是submit，是否不需要？</li>
<li>formenctype：编码。可选值：application/x-www-form-urlencoded；multipart/form-data（文件上传）；text/plain。<a href="http://www.runoob.com/tags/att-form-enctype.html" target="_blank" rel="noopener">HTML form enctype 属性 | 菜鸟教程</a></li>
<li>formmethod：http方法</li>
<li>formnovalidate：提交时不验证。对input诸如type=email而言。</li>
<li>formtarget：打开方式。</li>
<li>name</li>
<li>type：类型：button、reset、submit</li>
<li>value</li>
</ul>
<p>Button的关于form的属性可以覆盖掉form的属性。有关form的属性都需要跟type==submit配合。</p>
<h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><p>通过脚本绘制图形。canvas中的文本会显示在不支持的浏览器内。</p>
<h2 id="caption"><a href="#caption" class="headerlink" title="caption"></a>caption</h2><p>Table的标题，紧挨着table放置。</p>
<h2 id="cite"><a href="#cite" class="headerlink" title="cite"></a>cite</h2><p>作品标题。//具体应用场景？文章的标题应该用h1而非cite吧？</p>
<p>H4中cite表示引用。</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><p>代码块。</p>
<h2 id="col"><a href="#col" class="headerlink" title="col"></a>col</h2><p>包裹在colgroup，定义table每一列的样式。//是否违反了语义化的要求？</p>
<p>属性：</p>
<ul>
<li>span：应该包含的列数</li>
</ul>
<h2 id="colgroup"><a href="#colgroup" class="headerlink" title="colgroup"></a>colgroup</h2><p>在table之内，caption之后，thead、tbody、tfoot、tr之前使用。</p>
<p>属性：</p>
<ul>
<li>span：列数</li>
</ul>
<h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>除了IE9，其他都不支持。不做了解。</p>
<h2 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h2><p>规定input值的选项列表，提供自动完成的特性。需要使用input的list属性绑定datalist的id值。内部包含option标签。</p>
<h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>自定义列表中的具体描述。与dl、dt一起使用。用于标题/内容的组合列表。与ul等的区别是，ul只包含列表项，而没有标题/内容的定义。</p>
<h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><p>删除的文本。和ins使用表示文档的删除和更正。</p>
<p>属性：</p>
<ul>
<li>cite：解释删除原因的URl</li>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD。被删除的时间</li>
</ul>
<h2 id="details"><a href="#details" class="headerlink" title="details"></a>details</h2><p>和summary一起使用，summary定义一个标题，details定义具体解释内容。结合起来的效果类似手风琴组件。使用的方法是details在外，summary是第一个子元素。</p>
<p>兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>open：是否可见</li>
</ul>
<h2 id="dfn"><a href="#dfn" class="headerlink" title="dfn"></a>dfn</h2><p>定义项目。//具体使用情景？</p>
<h2 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h2><p>定义一个对话框、确认框或者窗口。//？</p>
<p>兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>open：是否可交互</li>
</ul>
<h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>文档的一个分割区块。常用于组合块级元素，以便通过css添加样式。</p>
<h2 id="dl"><a href="#dl" class="headerlink" title="dl"></a>dl</h2><p>与dt、dd一起使用，定义一个描述列表。</p>
<h2 id="dt"><a href="#dt" class="headerlink" title="dt"></a>dt</h2><p>描述列表的名字。</p>
<h2 id="em"><a href="#em" class="headerlink" title="em"></a>em</h2><p>表示强调。</p>
<h2 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h2><p>用来嵌入外部应用或者互动程序。//部分文章指出其有更多属性，但是菜鸟教程没有更多说明。<a href="http://www.jianshu.com/p/a702ab3530f6" target="_blank" rel="noopener">HTML embed标签使用方法和属性详解 - 简书</a></p>
<p>属性：</p>
<ul>
<li>src</li>
<li>type：MIME类型</li>
</ul>
<h2 id="fieldset"><a href="#fieldset" class="headerlink" title="fieldset"></a>fieldset</h2><p>对form的相关元素进行分组，并且绘制边框。</p>
<p>属性：</p>
<ul>
<li>Disabled：该组中的表单是否可用。</li>
<li>form: form id</li>
<li>name</li>
</ul>
<h2 id="figcaption"><a href="#figcaption" class="headerlink" title="figcaption"></a>figcaption</h2><p>和figure一起使用，为figure定义标题。放在figure的第一个或者最后一个位置。//figure的必要性：img加title是否并不能显示，figcaption显示在图片下方。</p>
<h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><p>定义独立的流内容，如图像图表代码等。//？图表自己有caption，用figure包裹后还需要添加figcaption吗？</p>
<h2 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h2><p>文档或或文档一部分的页脚//文档一部分如何理解？一个文档可以包含多个footer。这个部分应该包括作者名字、版权信息、条款、联系方式。如果需要联系方式，应该通过address来实现。</p>
<h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p>表单。应该包含以下一个或者多个表单元素：</p>
<ul>
<li>input</li>
<li>textarea</li>
<li>button</li>
<li>select</li>
<li>option</li>
<li>optgruop ??</li>
<li>fieldset</li>
<li>label</li>
</ul>
<p>属性：</p>
<ul>
<li>accept-charset：可以处理的表单数据字符集</li>
<li>action</li>
<li>autocomplete： on|off</li>
<li>enctype：编码方法</li>
<li>method</li>
<li>name</li>
<li>novalidate</li>
<li>target</li>
</ul>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>头部元素容器。包含以下内容，其中title必须。</p>
<ul>
<li>title</li>
<li>style</li>
<li>base</li>
<li>link</li>
<li>meta</li>
<li>script</li>
<li>noscript</li>
</ul>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>文档或文档一部分的页眉。作为介绍内容或者导航的容器。<br>不能放置在footer、address、header之中。</p>
<h2 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a>hgroup</h2><p>存在副标题时对标题元素进行分组。</p>
<h2 id="h1-h6"><a href="#h1-h6" class="headerlink" title="h1-h6"></a>h1-h6</h2><p>各级标题，h1重要等级最高。</p>
<h2 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h2><p>水平线，用来分隔内容。</p>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>用来表示和其余部分不同的文本，显示为斜体//各种富有语义、样式化的文本标签的区别是什么？</p>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>规定一个内联框架，在当前html文档中嵌入另一个文档。在之间的文本可以显示在不支持该标签的浏览器中。</p>
<p>属性：</p>
<ul>
<li>name：用于在js中引用，或者作为a、form的target属性或者input、button的formtarget</li>
<li>sandbox：额外限制。取值包括：“”，allow-forms（允许表单提交）,allow-same-origin（视作普通来源？//没有任何限制？）,allow-scripts（允许脚本执行）,allow-top-navigation（可以加载内容到顶级上下文）.</li>
<li>seamless：使得看起来更像父文档的一部分//？无边框或者滚动条 浏览器支持不佳</li>
<li>src</li>
<li>srcdoc：直接写html</li>
</ul>
<h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><p><img> 标签有两个必需的属性：src 和 alt。</p>
<blockquote>
<p>从技术上讲，图像并不会插入 HTML 页面中，而是链接到 HTML 页面上。<img> 标签的作用是为被引用的图像创建占位符。—-菜鸟教程</p>
</blockquote>
<p>属性：</p>
<ul>
<li>alt：替代文本</li>
<li>crossorigin：跨域属性：anonymous 、use-credentials//?</li>
<li>ismap：服务器端图像映射?<blockquote>
<p>ismap 属性将图像定义为服务器端图像映射（图像映射指的是带有可点击区域的图像）。当点击一个服务器端图像映射时，点击坐标会以 URL 查询字符串的形式发送到服务器。注意：只有当 <img> 元素属于带有有效 href 属性的 <a> 元素的后代时，才允许使用 ismap 属性。      —菜鸟教程</a></p>
</blockquote>
</li>
<li>src</li>
<li>usemap：客户器端图像映射，与mao对应</li>
</ul>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>输入字段。没有闭合标签。</p>
<p>属性：</p>
<ul>
<li>accept：audio/<em> video/</em> image/* MIME_type 只针对type=file</li>
<li>alt：只针对type=image</li>
<li>autocomplete</li>
<li>autofocus</li>
<li>checked：只针对type=checkbox/radio</li>
<li>disabled</li>
<li>form：form_id</li>
<li>formaction：针对type=submit/image</li>
<li>formenctype</li>
<li>formmethod</li>
<li>fomnovalidate</li>
<li>form_target：针对type=submit/image</li>
<li>list：datalist_id</li>
<li>max</li>
<li>maxlength</li>
<li>min</li>
<li>multiple：允许输入多个值，针对type=email/file</li>
<li>name</li>
<li>pattern：用于验证的正则表达式</li>
<li>placeholder</li>
<li>readonly</li>
<li>required</li>
<li>size：以字符数算的宽度</li>
<li>src：type=image</li>
<li>step：数字步长</li>
<li>type：button <ul>
<li>checkbox </li>
<li>color </li>
<li>date </li>
<li>datetime </li>
<li>datetime-local </li>
<li>email </li>
<li>file </li>
<li>hidden </li>
<li>image </li>
<li>month </li>
<li>number </li>
<li>password </li>
<li>radio </li>
<li>range </li>
<li>reset </li>
<li>search </li>
<li>submit </li>
<li>tel </li>
<li>text </li>
<li>time </li>
<li>url </li>
<li>week</li>
</ul>
</li>
<li>value</li>
</ul>
<h2 id="ins"><a href="#ins" class="headerlink" title="ins"></a>ins</h2><p>插入文本，与del配合</p>
<p>属性：</p>
<ul>
<li>cite：url</li>
<li>datetime</li>
</ul>
<h2 id="kbd"><a href="#kbd" class="headerlink" title="kbd"></a>kbd</h2><p>格式化文本。用于表示用户输入，通常是键盘输入，也可以包括语音输入。</p>
<h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>为input定义标注。当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>
<p>属性：</p>
<ul>
<li>for：element_id</li>
<li>form</li>
</ul>
<h2 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h2><p>为fileset设定标题。</p>
<h2 id="li"><a href="#li" class="headerlink" title="li"></a>li</h2><p>列表项目，可以用在ol、menu、ul之中。</p>
<h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p>定义外部资源，主要用来加载css。只能存在于head部分。</p>
<p>属性：</p>
<ul>
<li>href</li>
<li>hreflang</li>
<li>media：media_query</li>
<li>rel </li>
<li>sizes：链接属性大小，只对rel=link起作用。//几乎不被支持</li>
<li>type：MIME_type</li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>客户端图像映射，带有可点击区域的图像。</p>
<blockquote>
<p><img>中的 usemap 属性可引用 <map> 中的 id 或 name 属性（取决于浏览器），所以我们应同时向 <map> 添加 id 和 name 属性。—-菜鸟教程</map></map></p>
</blockquote>
<p>属性：</p>
<ul>
<li>name：必须，为img-map规定名称。</li>
</ul>
<h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>带记号的突出文本。自带背景颜色。//！！这么多类似的标签需要分类对比，w3c的标准文件有详细的分类。</p>
<h2 id="menu"><a href="#menu" class="headerlink" title="menu"></a>menu</h2><p>定义命令列表或者菜单。主流浏览器不支持。</p>
<p>属性：</p>
<ul>
<li>label：描述</li>
<li>type：context、toolbar、list 菜单类型。</li>
</ul>
<h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>元数据，不会显示在客户端，会被浏览器解析。META元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。</p>
<p>通常位于head内//？也可以不在？</p>
<p>属性：</p>
<ul>
<li>charset</li>
<li>content：定义http-equiv或者name属性相关的元信息</li>
<li>http-equiv：content-type；default-style；refresh</li>
<li>name：application-name；author；description；generator；keywords</li>
</ul>
<h2 id="meter"><a href="#meter" class="headerlink" title="meter"></a>meter</h2><p>展示给定的数据范围，类似progress条。但标准认为它不应该用做进度条而是类似于磁盘使用情况，查询结果相关性。可以认为是表示了度量关系的非进度信息。</p>
<p>属性：</p>
<ul>
<li>form</li>
<li>high</li>
<li>low：认定为低的值，但是这里并不会影响meter的表示，例如不会因此而显示为红色</li>
<li>max</li>
<li>min</li>
<li>optimum：最优</li>
<li>value</li>
</ul>
<h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p>导航连接。//与menu的区别是什么</p>
<h2 id="noscript"><a href="#noscript" class="headerlink" title="noscript"></a>noscript</h2><p>在不支持script的时候显示其中的文本。</p>
<blockquote>
<p>无法识别 <script> 标签的浏览器会把标签的内容显示到页面上。为了避免浏览器这样做，您应当在注释标签中隐藏脚本。老式的（无法识别 <script> 标签的）浏览器会忽略注释，这样就不会把标签的内容写到页面上，而新式的浏览器则懂得执行这些脚本，即使它们被包围在注释标签中！</p>
</blockquote>
<h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>定义一个嵌入的对象，插入多媒体。//与embed的不同？在不支持该元素的时候会把其中的文本显示出来。</p>
<p>属性：</p>
<ul>
<li>data：url//href、src和data的区别是什么</li>
<li>form</li>
<li>type：MIME</li>
<li>usemap：#mapname</li>
</ul>
<h2 id="ol"><a href="#ol" class="headerlink" title="ol"></a>ol</h2><p>有序列表。</p>
<p>属性：</p>
<ul>
<li>reversed：列表倒序</li>
</ul>
<p>start和type建议使用css代替。</p>
<h2 id="optgroup"><a href="#optgroup" class="headerlink" title="optgroup"></a>optgroup</h2><p>把相关的选项组合起来。内部包含option。会在option选项之上显示一个描述，如果有label的话。</p>
<p>属性：</p>
<ul>
<li>label</li>
<li>diabled</li>
</ul>
<h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><p>下拉列表的一个选项。作为select或者datalist的元素使用。</p>
<p>属性：</p>
<ul>
<li>disabled</li>
<li>label：显示出来的值，value是实际的值，如果没有显式指定label，则显示为value</li>
<li>selected</li>
<li>value</li>
</ul>
<h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>输出结果。IE不支持。</p>
<p>属性：</p>
<ul>
<li>for：element_id，结果的得出与什么有关系，不需要用#指明</li>
<li>form</li>
<li>name</li>
</ul>
<h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><p>段落。</p>
<h2 id="param"><a href="#param" class="headerlink" title="param"></a>param</h2><blockquote>
<p><param>元素允许您为插入 XHTML 文档的对象规定 run-time 设置，也就是说，此标签可为包含它的 <object> 或者 <applet> 标签提供参数。<br>简单说来，是为object提供参数的另一种写法。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>name</li>
<li>value：值</li>
</ul>
<h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><p>与格式化文本，保留空格和换行符，文本显示为等宽字体。常用来表示源代码。</p>
<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>最外层，除了doctype之外的容器。</p>
<p>属性：</p>
<ul>
<li>manifest：url，在链接文件中定义如何缓存。每个页面需要单独声明。//？是否适合单页面应用。</li>
</ul>
<h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><p>任务进度。使用场景与meter要分开。//不需要使用原始的width，但是如何实现平滑的过渡效果呢？</p>
<p>属性：</p>
<ul>
<li>max</li>
<li>value</li>
</ul>
<h2 id="q"><a href="#q" class="headerlink" title="q"></a>q</h2><p>短引用。对于来自另一个源的块引用使用blockquote。自带引号。</p>
<p>属性：</p>
<ul>
<li>cite//既然这里要定义来源，那么也就是允许其他来源的，所以除了长短之外 q和 blockquote的区别到底是什么？</li>
</ul>
<h2 id="rp"><a href="#rp" class="headerlink" title="rp"></a>rp</h2><p>Ruby注释。用来在不支持ruby的时候显示里边的内容。//此ruby非彼ruby！</p>
<h2 id="rt"><a href="#rt" class="headerlink" title="rt"></a>rt</h2><p>定义字符的解释或者发音。rt显示在头部。</p>
<blockquote>
<p><code>&lt;ruby&gt;</code> 元素由一个或多个需要解释/发音的字符和一个提供该信息的 <code>&lt;rt&gt;</code> 元素组成，还包括可选的 <code>&lt;rp&gt;</code> 元素，定义当浏览器不支持 “ruby” 元素时显示的内容。</p>
</blockquote>
<h2 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h2><p>注音或者字符注释。</p>
<h2 id="s"><a href="#s" class="headerlink" title="s"></a>s</h2><p>标记不正确的文本。与del表现相同。//与del的区别？</p>
<h2 id="samp"><a href="#samp" class="headerlink" title="samp"></a>samp</h2><p>短语标签，定义计算机程序的样本文本。</p>
<h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>脚本。当src使用时，内容必须为空。</p>
<blockquote>
<p>有多种执行外部脚本的方法：如果 async=”async”：脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）;如果不使用 async 且 defer=”defer”：脚本将在页面完成解析时执行;如果既不使用 async 也不使用 defer：在浏览器继续解析页面之前，立即读取并执行脚本。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>async：外部脚本异步执行</li>
<li>charset：外部脚本字符编码</li>
<li>deffer：外部脚本页面解析后执行</li>
<li>src</li>
<li>type：MIME，默认为text/javascript</li>
</ul>
<h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><p>文章的某块区域。</p>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>下拉选项。</p>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>disabled</li>
<li>form：form_id</li>
<li>multiple</li>
<li>name</li>
<li>required</li>
<li>size：可见选项的数目。如果 size 属性的值大于 1，但是小于列表中选项的总数目，浏览器会显示出滚动条，表示可以查看更多选项。//safari实测直接把所有选项显示出来了。chrome正常。</li>
</ul>
<h2 id="small"><a href="#small" class="headerlink" title="small"></a>small</h2><p>小型文本。</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>为video和audio定义媒体资源。</p>
<p>属性：</p>
<ul>
<li>media：都不支持</li>
<li>src</li>
<li>type</li>
</ul>
<h2 id="span"><a href="#span" class="headerlink" title="span"></a>span</h2><p>对行内元素进行组合。不带有任何自带的样式。</p>
<h2 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h2><p>加粗。</p>
<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>样式。</p>
<blockquote>
<p>注释：如果没有使用 “scoped” 属性，则每一个 <code>&lt;style&gt;</code> 标签必须位于 head 头部区域。</p>
</blockquote>
<p>属性：</p>
<ul>
<li>media：为不同的媒体类型规定不同的样式</li>
<li>scoped：仅应用到父元素及其子元素//？不包含子元素的子元素吗？及其子元素是兄弟元素吗？//仅有firefox支持该属性</li>
<li>type：text/css</li>
</ul>
<h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>下标。</p>
<blockquote>
<p>下标文本将会显示在当前文本流中字符高度的一半为基准线的下方，但是与当前文本流中文字的字体和字号都是一样的。下标文本能用来表示化学公式，比如 H2O。        //但是实测字号要小，而且<code>高度的一半为基准</code>是不是病句？</p>
</blockquote>
<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>和details一起使用，为details的第一个元素。浏览器支持不佳。</p>
<h2 id="sup"><a href="#sup" class="headerlink" title="sup"></a>sup</h2><p>上标。</p>
<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>表格。一个表格应该包含table、tr、th、td元素。</p>
<p>属性：</p>
<ul>
<li>border：是否有边框：“”，1//这是不是历史遗留问题，用on、off、tf或者只要有属性就可以的这几种方式的区别是什么。safari没看到显示效果。</li>
</ul>
<h2 id="tbody"><a href="#tbody" class="headerlink" title="tbody"></a>tbody</h2><blockquote>
<p><code>&lt;tbody&gt;</code> 元素应该与 <code>&lt;thead&gt;</code> and <code>&lt;tfoot&gt;</code> 元素结合起来使用，用来规定表格的各个部分（主体、表头、页脚）。通过使用这些元素，使浏览器有能力支持独立于表格表头和表格页脚的表格主体滚动。当包含多个页面的长的表格被打印时，表格的表头和页脚可被打印在包含表格数据的每张页面上。<code>&lt;tbody&gt;</code> 标签必须被用在以下情境中：作为 <code>&lt;table&gt;</code> 元素的子元素，出现在 <code>&lt;caption&gt;</code>、<code>&lt;colgroup&gt;</code> 和 <code>&lt;thead&gt;</code> 元素之后。</p>
</blockquote>
<p>可以简单认为组合多个tr。</p>
<h2 id="td"><a href="#td" class="headerlink" title="td"></a>td</h2><p>标准单元格，和th创建的表头单元格区分。</p>
<p>属性：</p>
<ul>
<li>colspan</li>
<li>headers：ele_id,相关联的一个或者多个表头</li>
<li>rowspan</li>
</ul>
<h2 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h2><p>多行文本输入。其中的文本的默认字体是等宽字体，通常是 Courier。</p>
<p>属性：</p>
<ul>
<li>autofocus</li>
<li>cols</li>
<li>disabled</li>
<li>form</li>
<li>maxlength</li>
<li>name</li>
<li>placeholder</li>
<li>readonly</li>
<li>required</li>
<li>roes</li>
<li>wrap：提交表单该如何换行：hard，soft。hard将包含换行符，必须制定cols才可以用。</li>
</ul>
<h2 id="tfoot"><a href="#tfoot" class="headerlink" title="tfoot"></a>tfoot</h2><p>表格的页脚。固定在下方不动。</p>
<h2 id="th"><a href="#th" class="headerlink" title="th"></a>th</h2><p>表头单元格。粗体居中。而td中的是普通文本左对齐。</p>
<p>属性：</p>
<ul>
<li>colspan</li>
<li>headers//？同级之间也可以相互关联？这些都有dom api支持吗</li>
<li>rowspan</li>
<li>scope：规定表头单元格是否是行、列、行组或列组的头部。col；colgroup；row；rowgroup//只在屏幕阅读器中起作用。</li>
</ul>
<h2 id="thead"><a href="#thead" class="headerlink" title="thead"></a>thead</h2><p>组合表头内容。</p>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>定义公历的时间（24 小时制）或日期，时间和时区偏移是可选的。</p>
<p>属性：</p>
<ul>
<li>datetime：YYYY-MM-DDThh:mm:ssTZD//也可以使用内容定义，并且内容优先级更高。//？总是显示datetime的内容而非这一属性，当设定内容为日期时取datetime会取到内容的值吗？</li>
</ul>
<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><p>标题。</p>
<h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>表格当中的行。</p>
<h2 id="track"><a href="#track" class="headerlink" title="track"></a>track</h2><p>定义媒体元素的外部文本轨道。//兼容性不佳。</p>
<p>属性：</p>
<ul>
<li>default</li>
<li>kind：文本类型：captions，chapters，descriptions，metadata，subtitles</li>
</ul>
<h2 id="u"><a href="#u" class="headerlink" title="u"></a>u</h2><p>定义与常规文本风格不同的文本，像拼写错误的单词或者汉语中的专有名词。//？语焉不详！！💩</p>
<blockquote>
<p>注释：HTML5 规范建议开发者尽量使用其他元素替代 <code>&lt;u&gt;</code> 元素。—菜鸟教程</p>
</blockquote>
<h2 id="ul"><a href="#ul" class="headerlink" title="ul"></a>ul</h2><p>无序列表。</p>
<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><p>对变量格式化。表现为斜体。</p>
<h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>视频标签。支持的格式有MP4、WebM、Ogg。其中mp4支持最好。在video中的内容会在不支持该标签时显示出来。</p>
<p>属性：</p>
<ul>
<li>autoplay//资源的加载顺序是什么？</li>
<li>controls</li>
<li>loop</li>
<li>muted</li>
<li>poster：规定视频正在下载时显示的图像，直到用户点击播放按钮。//或者设置了自动播放？</li>
<li>preload：如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。auto；metadata；none//？</li>
<li>src</li>
</ul>
<h2 id="wbr"><a href="#wbr" class="headerlink" title="wbr"></a>wbr</h2><p>规定当窗口小到需要进行换行时在文本中的何处适合添加换行符。</p>
<hr>
<p>常见分类：</p>
<ul>
<li>document metadata</li>
<li>sections</li>
<li>grouping</li>
<li>text-level</li>
<li>embedded</li>
<li>tabular</li>
<li>forms</li>
</ul>
<hr>
<p>全局属性：</p>
<ul>
<li>Accesskey: 键盘快捷键</li>
<li>class</li>
<li>contenteditabled：可编辑</li>
<li>contextmenu：右键点击该元素的上下文菜单，绑定menuid//支持不佳</li>
<li>data-*：自定义存储数据</li>
<li>dir：文本方向//是否违反结构和样式分离的原则</li>
<li>draggable：是否可以拖动</li>
<li>dropzone：是否将数据复制，移动，或链接，或删除//不知所云，都不支持</li>
<li>hidden</li>
<li>id</li>
<li>lang</li>
<li>spellcheck：检测拼写错误，显示红色虚下划线</li>
<li>style</li>
<li>tabindex</li>
<li>title：鼠标移动到上方时显示额外信息</li>
<li>translate：都不支持</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/index.html">怪异模式（Quirks Mode）对 HTML 页面的影响</a></li>
<li><a href="http://www.runoob.com/tags/tag-abbr.html">HTML <abbr> 标签 | 菜鸟教程</a></li>
<li><a href="http://www.runoob.com/tags/ref-standardattributes.html">HTML 全局属性 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/yxm440/p/7667539.html">HTML哪些是块级元素，哪些是行内元素、 - Dear阿萌 - 博客园</a></li>
<li><a href="http://www.runoob.com/tags/ref-eventattributes.html">HTML 事件 | 菜鸟教程</a></li>
<li><a href="http://blog.csdn.net/tsxw24/article/details/8315672">html5 中创建manifest缓存以及更新方法 - CSDN博客</a></li>
<li><a href="http://www.runoob.com/tags/att-source-media.html">HTML source media 属性 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/Leo_wl/p/5936919.html">WebComponent - HackerVirus - 博客园</a></li>
</ul>
</script></p></blockquote>]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[制作第一个hexo主题]]></title>
      <url>/2017/12/19/%E5%88%B6%E4%BD%9C%E7%AC%AC%E4%B8%80%E4%B8%AAhexo%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="制作第一个hexo主题"><a href="#制作第一个hexo主题" class="headerlink" title="制作第一个hexo主题"></a>制作第一个hexo主题</h1><p>Hexo是一个知名的静态博客生成工具，尤其在github用户中广为人知。hexo的主题可以自由变换，但是想要找到一个完全合自己心意的主题仿佛大海捞针。与其不停寻找，不如自己动手制作一个主题，既解决了自己看什么主题都不合心的问题，还能在其中学习更多知识。  </p>
<p>这里是我写的主题<a href="https://github.com/Vevlins/hexo-theme-toki" target="_blank" rel="noopener">toki</a>以及<a href="https://vevlins.github.io">预览</a>。如果你觉得这篇文章对你起到了一点作用，欢迎你star或者fork进行进一步的学习，不必担心难度，因为这也是我第一个hexo主题。</p>
<h2 id="hexo主题结构"><a href="#hexo主题结构" class="headerlink" title="hexo主题结构"></a>hexo主题结构</h2><p>目录结构如下：</p>
<pre><code> .
├── _config.yml   
├── layout        
│   └── _partial  
└── source        
    ├── css
    ├── fonts
    └── js
</code></pre><p>其中config文件是存储与主题相关的变量，如点赞、评论功能是否开启，在整个站点下也有一个config文件，它是用来存储一些和整个站点有关的，比如站点的标题。而并非所有的hexo主题都支持点赞，所以点赞功能的开启放在具体的theme下更合适。  </p>
<p>Layout文件夹下存放的是布局模板文件，可以用ejs、jade等编写，里边包含index、post等hexo中默认使用的模板，也可以编写一个自己额外定义的页面，比如about页。对于这些自己额外编写的模板，需要用户自己执行<code>hexo new [layout] &lt;title&gt;</code>中声明<code>layout:about</code>才可以。_partial子文件夹中存放的是一些可以服用的组件或者想要细分的部分，如打赏部分、点赞部分，可以分离出来，使得结构更加清晰明了。</p>
<p>Source文件夹下存放的是资源文件，比如css文件，字体文件，图片文件等。source文件在最后生成的时候会把其中的文件都直接放在根目录下，所以在文件中引用地址的时候不需要写<code>source</code>，而是直接写<code>./css/app.css</code>就可以。</p>
<h2 id="hexo变量和函数"><a href="#hexo变量和函数" class="headerlink" title="hexo变量和函数"></a>hexo变量和函数</h2><p>想要编写一个hexo模板，我们在其中必定要添加一些hexo站点下的信息，如网站的title。还有我们之前提到的主题下也有一个config文件，其中的变量我们也需要调用。除了以上两个部分，hexo还提供了一些用来简化操作的辅助函数。<br>具体的变量和辅助函数可以访问<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a>。这里只介绍一些常用的。</p>
<p>变量： </p>
<ul>
<li>page.title</li>
<li>site.posts</li>
<li>page.excerpt<br>关于整个站点下的config文件需要通过config.xxx来进行调用，对于这个主题的config文件需要通过theme.xxx来调用。而诸如page、site等就是hexo自身的一些变量了。</li>
</ul>
<p>函数：</p>
<ul>
<li>&lt;%- list_categories([options]) %&gt;</li>
<li>&lt;%- titlecase(string) %&gt;</li>
</ul>
<h2 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h2><p>Hexo已经定义的模板文件有以下几个：</p>
<ul>
<li>index</li>
<li>post</li>
<li>page</li>
<li>archive</li>
<li>category</li>
<li>tag<br>特别的还有一个layout文件，可以在layout文件中编写一些公共部分，实现在其他页面中的复用，如果你对模板引擎并不了解，我建议你先学习相关知识是非常必要的，不过不用太多，花十几分钟大概理解一下就可以。<br>当然你并不需要都要包括这些模板，只是写了这些模板文件后，你不需要<code>hexo new</code>它，它也有固定的页面地址。每个主题最少可以只包括一个index页面即可。但是为了功能上比较完善，我还是建议最少编写index、post、archive这三个页面。<br>在hexo中编写文件，需要选择一种模板引擎，这里我使用的ejs,hexo自己提供的ejs的支持，而且理解起来也很容易，没什么选择其他的理由。当然如果你想要编写的主题比较庞大，那还是选择自己最顺手的好。<br>我们分别讲解index、post、archive的编写，然后在进行拓展。</li>
</ul>
<h3 id="layout页面"><a href="#layout页面" class="headerlink" title="layout页面"></a>layout页面</h3><p>这一页要包含菜单、页脚声明。</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt;
             &lt;!-- 引入站点的标题--&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        &lt;%- css(&#39;./css/app.css&#39;) %&gt;
          &lt;!-- 这里的css 就是一个辅助函数--&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;%- partial(&#39;_partial/header&#39;) %&gt;
            &lt;!-- 引入其他部分--&gt;
            &lt;main&gt;
                 &lt;%- body %&gt;
                &lt;!-- 这里会将其他页面的内容填充进来组成一个完整的页面 --&gt;
            &lt;/main&gt;
    &lt;%- partial(&#39;_partial/footer&#39;) %&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="index页面"><a href="#index页面" class="headerlink" title="index页面"></a>index页面</h3><p>显然的，这是我们进入网站看到的第一个页面，一般来说，这个页面要包含最近的文章展示，根据个人喜好，也可以添加标签云、最新评论等。</p>
<pre><code class="html">&lt;section class=&quot;posts&quot;&gt;
    &lt;% page.posts.each(function (post) { %&gt;
        &lt;article class=&quot;post&quot;&gt;
            &lt;h1&gt;
                &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt; 
                    &lt;%= post.title %&gt; 
                &lt;/a&gt;
            &lt;/h1&gt;
            &lt;%- partial(&#39;_partial/meta&#39;,{page:post}) %&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;% if(post.excerpt) {%>
                <%- post.excerpt="" %="">
                <%} else{="" %&gt;="" &lt;%-="" post.content="" &lt;%="" }="" &lt;="" div&gt;="" &lt;div="" class="&quot;continue&quot;&gt;" &lt;a="" href="&quot;&lt;%-" url_for(post.path)="" %&gt;&quot;&gt;="" __(&#39;post.continue&#39;)="" -%&gt;="" &lt;i="" fa-angle-right&quot;="" aria-hidden="&quot;true&quot;&gt;&lt;/i&gt;" a&gt;="" article&gt;="" })="" section&gt;="" partial(&#39;_partial="" paginator&#39;)="" <="" code=""></%}></%-></code></pre>
<p>这个页面看起来要复杂了许多。我们从大到小入手：通过page.posts我们获取到了文章列表，对于其中的post，又有title、tag、category等量。content四获取文章的内容，而excerpt是用来获取摘要。如果在书写markdown 文章时加入<code>&lt;!-- more --&gt;</code>那么在这之前的内容将会被视为摘要，如果你懒得做，也可以使用自动生成摘要的插件。<br><code>&lt;%- partial(&#39;_partial/meta&#39;,{page:post}) %&gt;</code>这段代码中比layout页面中的引入要多出了一个参数，这里是将meta这个页面中的page都赋值为post。主要是用来进行参数传递作用，这里是因为meta不仅在主页要用，在文章页也要使用，而文章页中我们时通过page.tags来取得内容的。<br><code>&lt;%- __(&#39;Post.Continue&#39;) -%&gt;</code>这个写法看起来有些奇怪，它也是一个辅助函数吗？虽然在hexo的文档中没有把它明确为一个辅助函数，但实际上这确实是一个函数，它的作用是进行站点国际化。听起来很高大上吧！不过其实实现很简单，在上述的项目结构中我们还可以增加一个language目录，其中针对每一种语言增加一个yml文件，把需要国际化的量储存在里边，根据整个站点config中的language声明的语言而进行动态调整。比如，我们在en.yml 将Continue声明为continue，在zh-CN.yml中声明为继续阅读。<br><code>&lt;%- partial(&#39;_partial/paginator&#39;) %&gt;</code>这里我们引入了一个paginator组件，它是用来分页的，跟普通的分页不同，hexo中分页的实际工作我们丝毫没有涉及，只需要简单地使用辅助函数就可以：</p>
<pre><code class="html">&lt;%- paginator({
      prev_text: &quot;&amp;laquo; &quot;+  __(&#39;Paginator.Prev&#39;),
      next_text: __(&#39;Paginator.Next&#39;)+&quot; &amp;raquo;&quot;
  }) %&gt;
</code></pre>
<h3 id="post页面"><a href="#post页面" class="headerlink" title="post页面"></a>post页面</h3><p>有了前面两个页面的基础，这里就不废话了。</p>
<pre><code class="html">&lt;article class=&quot;post&quot;&gt;
            &lt;h1&gt;
                &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(page.path) %&gt;&quot;&gt; 
                    &lt;%= page.title %&gt; 
                &lt;/a&gt;
            &lt;/h1&gt;
&lt;%- partial(&#39;_partial/meta&#39;) %&gt;
&lt;%- partial(&#39;_partial/toc&#39;) %&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;%- page.content %&gt;
            &lt;/div&gt;
&lt;%- partial(&#39;_partial/copyright&#39;) %&gt;
&lt;/article&gt;
</code></pre>
<h3 id="archive页面"><a href="#archive页面" class="headerlink" title="archive页面"></a>archive页面</h3><pre><code class="html">&lt;section class=&quot;archive&quot;&gt;
  &lt;ul class=&quot;post-archive&quot;&gt;
    &lt;% var last = 1997 %&gt;
    &lt;% page.posts.each(function (post) { %&gt;
    &lt;% if (last != post.date.year()){ %&gt;
     &lt;span class=&quot;year&quot;&gt; &lt;a&gt;&lt;%=post.date.year()%&gt;&lt;/a&gt;&lt;/span&gt;
      &lt;% last = post.date.year()%&gt;
    &lt;%}%&gt;
      &lt;li class=&quot;post-item&quot;&gt;
        &lt;span class=&quot;date&quot;&gt;&lt;%= date(post.date, &quot;MM-DD&quot;) %&gt;&lt;/span&gt;
        &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt;&lt;%= post.title %&gt;&lt;/a&gt;
      &lt;/li&gt;
    &lt;% }) %&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;%- partial(&#39;_partial/paginator&#39;) %&gt;
</code></pre>
<p>对这个页面，我们只讲解一下<code>&lt;% var last = 1997 %&gt;</code>,这里参考了hexo自带主题landscape的方案。为了实现按照不同年份归档，先定义一个很小的年份值，如果以后的年份不同于之前的值，那就把last置为它，并且显示一个较大的年份块。</p>
<h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>这里我们选用的是stylus来书写css，选择它的原因也很简单，因为hexo自带。</p>
<p>这里已经没什么需要额外讲解的了，css总不会也跟其他的有不同吧。只是请注意，为了保证你的主题能够被更多人使用，请务必做好不同浏览器的兼容。类似地，你也应该在配置文件中增加更多的自定义开关，你不能默认认为用户总是想向你提供两个打赏的二维码，所以一个二维码的样式呢？或者索性不想要打赏呢？</p>
<h2 id="提交主题"><a href="#提交主题" class="headerlink" title="提交主题"></a>提交主题</h2><p>经历了以上这些，你的主题已经基本具有可用性了，但是如何让更多人知道并且使用你的主题呢？你可以通过在各种技术型社区发帖，也可以发动身边的人使用。更官方的方案，是向hexo提交自己的主题。你具体可以参考这里<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">主题| Hexo</a>。准备好一份截图，fork一份<a href="https://github.com/hexojs/site" target="_blank" rel="noopener">hexojs/site</a>添加自己的主题信息和截图后再向官方提出pull request请求，不必担心，因为他们真的很友善。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/12/14/Hello-World/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hello </tag>
            
            <tag> world </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一份简历]]></title>
      <url>/2017/12/14/%E4%B8%80%E4%BB%BD%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<p><img src="http://images.ifanr.cn/wp-content/uploads/2015/12/typer.jpg" alt="">  </p>
<p>首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。</p>
<p>其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=450567505&auto=0&height=66"></iframe>

<p>有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。</p>
<p>举个例子，下边内容是虚构的：</p>
<p>2006年，我参与了手机XX网发布系统WAPCMS的开发（这部分是大家都会写的）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（通过量化的数字来增强可信度）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。）。</p>
<p><strong>具体</strong>、量化、有说服力，是技术简历特别需要注重的地方。</p>
<p>以上内容在写完简历后，对每一段进行评估，完成后再删除）</p>
]]></content>
      
        <categories>
            
            <category> 求职 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dillinger]]></title>
      <url>/2017/12/14/Dillinger/</url>
      <content type="html"><![CDATA[<h1 id="Dillinger"><a href="#Dillinger" class="headerlink" title="Dillinger"></a>Dillinger</h1><p><a href="https://nodesource.com/products/nsolid" target="_blank" rel="noopener"><img src="http://cdn2.jianshu.io/assets/web/web-note-ad-1-10f08e404d3887d2d45a4bc8f1831403.png" alt="N|Solid"></a></p>
<p>Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor.</p>
<ul>
<li>Type some Markdown on the left</li>
<li>See HTML in the right</li>
<li>Magic </li>
</ul>
<a id="more"></a>
<h1 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features!"></a>New Features!</h1><ul>
<li>Import a HTML file and watch it magically convert to Markdown</li>
<li>Drag and drop images (requires your Dropbox account be linked)</li>
</ul>
<p>You can also:</p>
<ul>
<li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li>
<li>Drag and drop markdown and HTML files into Dillinger</li>
<li>Export documents as Markdown, HTML and PDF</li>
</ul>
<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As <a href="http://daringfireball.net" target="_blank" rel="noopener">John Gruber</a> writes on the <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown site</a></p>
<blockquote>
<p>The overriding design goal for Markdown’sformatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.</p>
</blockquote>
<p>This text you see here is <em>actually</em> written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right.</p>
<h3 id="Tech"><a href="#Tech" class="headerlink" title="Tech"></a>Tech</h3><p>Dillinger uses a number of open source projects to work properly:</p>
<ul>
<li><a href="http://angularjs.org" target="_blank" rel="noopener">AngularJS</a> - HTML enhanced for web apps!</li>
<li><a href="http://ace.ajax.org" target="_blank" rel="noopener">Ace Editor</a> - awesome web-based text editor</li>
<li><a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener">markdown-it</a> - Markdown parser done right. Fast and easy to extend.</li>
<li><a href="http://twitter.github.com/bootstrap/" target="_blank" rel="noopener">Twitter Bootstrap</a> - great UI boilerplate for modern web apps</li>
<li><a href="http://nodejs.org" target="_blank" rel="noopener">node.js</a> - evented I/O for the backend</li>
<li><a href="http://expressjs.com" target="_blank" rel="noopener">Express</a> - fast node.js network app framework <a href="http://twitter.com/tjholowaychuk" target="_blank" rel="noopener">@tjholowaychuk</a></li>
<li><a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp</a> - the streaming build system</li>
<li><a href="http://breakdance.io" target="_blank" rel="noopener">Breakdance</a> - HTML to Markdown converter</li>
<li><a href="http://jquery.com" target="_blank" rel="noopener">jQuery</a> - duh</li>
</ul>
<p>And of course Dillinger itself is open source with a <a href="https://github.com/joemccann/dillinger" target="_blank" rel="noopener">public repository</a><br> on GitHub.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Dillinger requires <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> v4+ to run.</p>
<p>Install the dependencies and devDependencies and start the server.</p>
<pre><code class="sh">$ cd dillinger
$ npm install -d
$ node app
</code></pre>
<p>For production environments…</p>
<pre><code class="sh">$ npm install --production
$ NODE_ENV=production node app
</code></pre>
<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>README</th>
</tr>
</thead>
<tbody>
<tr>
<td>Dropbox</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/dropbox/README.md" target="_blank" rel="noopener">plugins/dropbox/README.md</a></td>
</tr>
<tr>
<td>Github</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/github/README.md" target="_blank" rel="noopener">plugins/github/README.md</a></td>
</tr>
<tr>
<td>Google Drive</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/googledrive/README.md" target="_blank" rel="noopener">plugins/googledrive/README.md</a></td>
</tr>
<tr>
<td>OneDrive</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/onedrive/README.md" target="_blank" rel="noopener">plugins/onedrive/README.md</a></td>
</tr>
<tr>
<td>Medium</td>
<td><a href="https://github.com/joemccann/dillinger/tree/master/plugins/medium/README.md" target="_blank" rel="noopener">plugins/medium/README.md</a></td>
</tr>
<tr>
<td>Google Analytics</td>
<td><a href="https://github.com/RahulHP/dillinger/blob/master/plugins/googleanalytics/README.md" target="_blank" rel="noopener">plugins/googleanalytics/README.md</a></td>
</tr>
</tbody>
</table>
<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><p>Want to contribute? Great!</p>
<p>Dillinger uses Gulp + Webpack for fast developing.<br>Make a change in your file and instantanously see your updates!</p>
<p>Open your favorite Terminal and run these commands.</p>
<p>First Tab:</p>
<pre><code class="sh">$ node app
</code></pre>
<p>Second Tab:</p>
<pre><code class="sh">$ gulp watch
</code></pre>
<p>(optional) Third:</p>
<pre><code class="sh">$ karma test
</code></pre>
<h4 id="Building-for-source"><a href="#Building-for-source" class="headerlink" title="Building for source"></a>Building for source</h4><p>For production release:</p>
<pre><code class="sh">$ gulp build --prod
</code></pre>
<p>Generating pre-built zip archives for distribution:</p>
<pre><code class="sh">$ gulp build dist --prod
</code></pre>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Dillinger is very easy to install and deploy in a Docker container.</p>
<p>By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.</p>
<pre><code class="sh">cd dillinger
docker build -t joemccann/dillinger:${package.json.version}
</code></pre>
<p>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p>
<p>Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):</p>
<pre><code class="sh">docker run -d -p 8000:8080 --restart=&quot;always&quot; &lt;youruser&gt;/dillinger:${package.json.version}
</code></pre>
<p>Verify the deployment by navigating to your server address in your preferred browser.</p>
<pre><code class="sh">127.0.0.1:8000
</code></pre>
<h4 id="Kubernetes-Google-Cloud"><a href="#Kubernetes-Google-Cloud" class="headerlink" title="Kubernetes + Google Cloud"></a>Kubernetes + Google Cloud</h4><p>See <a href="https://github.com/joemccann/dillinger/blob/master/KUBERNETES.md" target="_blank" rel="noopener">KUBERNETES.md</a></p>
<h3 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h3><ul>
<li>Write MORE Tests</li>
<li>Add Night Mode</li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
<p><strong>Free Software, Hell Yeah!</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> Dillinger </tag>
            
            <tag> Online </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Welcome to MWeb]]></title>
      <url>/2017/12/14/Welcome-to-MWeb/</url>
      <content type="html"><![CDATA[<h1 id="Welcome-to-MWeb"><a href="#Welcome-to-MWeb" class="headerlink" title="Welcome to MWeb"></a>Welcome to MWeb</h1><p>What is MWeb? MWeb is a Pro Markdown writing, note taking and static blog generator App.</p>
<p>MWeb has two Mode, External Mode and Library Mode.<br>In External Mode, you can edit classic text and markdown files from anywhere on your Mac. As an example, you can point MWeb to a folder on Dropbox. Shortcuts <code>CMD + E</code> or <code>View</code> - <code>Open External</code> to open External Mode.<br>Library Mode design for note taking and static blog/website generator. Shortcuts <code>CMD + L</code> or <code>View</code> - <code>Open Library</code> to open Library Mode.<br>External Mode’s folders and Library Mode are supported <strong>Full Text Search</strong>, drag &amp; drop or paste to insert images.</p>
<a id="more"></a>
<h2 id="View-Mode-and-Live-Preview"><a href="#View-Mode-and-Live-Preview" class="headerlink" title="View Mode and Live Preview"></a>View Mode and Live Preview</h2><p>For Minimal UI, MWeb’s interface only has a few buttons. The right-top corner buttons shortcuts: <code>CMD + 7/8/9</code>. <code>CMD + 7</code> is Library Mode only. For enable Typewriter Scrolling, Dark Mode and switch panes, please check the <code>View</code> menu.</p>
<ul>
<li>Shortcut: <code>CMD + 1</code> to toggle Editor Only and Three Panes.</li>
<li>Shortcut: <code>CMD + 2</code> to toggle Two Panes and Editor Only.</li>
<li>Shortcut: <code>CMD + 3</code> to toggle Three Panes and Editor Only.</li>
<li>Shortcut: <code>CMD + 4</code> to toggle Editor/Preview and Three Panes.</li>
<li>Shortcut: <code>CMD + R</code> to toggle Editor and Live Preview.</li>
</ul>
<p><strong>Note</strong>: When <code>Preferences</code> - <code>General</code> - <code>Resize window when hide pane</code> is enable, shortcuts <code>CMD + 1/2/3/4</code> behavior will be changed. You can enable this option and try it. When the <code>Live Preview (CMD + R) open new window</code> is enable, shortcut <code>CMD + R</code> will open new window for Live Preview.</p>
<h2 id="More-about-MWeb"><a href="#More-about-MWeb" class="headerlink" title="More about MWeb"></a>More about MWeb</h2><ul>
<li>MWeb used Github Flavored Markdown syntax, please open <code>Help</code> - <code>Markdown syntax</code> for detail.</li>
<li>MWeb official website: <a href="http://www.mweb.im" target="_blank" rel="noopener">http://www.mweb.im</a></li>
<li>MWeb documents: <code>Help</code> - <code>Help...</code> or <a href="http://www.mweb.im/help.html" target="_blank" rel="noopener">http://www.mweb.im/help.html</a>.</li>
</ul>
<h2 id="Help-us-to-make-MWeb-better"><a href="#Help-us-to-make-MWeb-better" class="headerlink" title="Help us to make MWeb better!"></a>Help us to make MWeb better!</h2><ol>
<li>Tell your friends about MWeb.</li>
<li>Send a feedback: <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x63;&#x6f;&#100;&#101;&#114;&#102;&#x6f;&#114;&#97;&#x72;&#x74;&#x2b;&#x32;&#51;&#51;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#x6f;&#100;&#101;&#114;&#102;&#x6f;&#114;&#97;&#x72;&#x74;&#x2b;&#x32;&#51;&#51;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></li>
<li>Leave a review or at least a rating in Mac App Store.</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MWeb </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎使用MWeb]]></title>
      <url>/2017/12/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8MWeb/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用-MWeb"><a href="#欢迎使用-MWeb" class="headerlink" title="欢迎使用 MWeb"></a>欢迎使用 MWeb</h1><p>首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。</p>
<p>然后这里<strong>重点说明</strong>一下：MWeb 有<strong>两个模式</strong>，外部模式和文档库模式。外部模式中把本地硬盘或 Dropbox 等网盘的文件夹引入，就可以使用 MWeb 的拖拽、粘贴插入图片、图床等特色功能。文档库模式设计为用于记笔记和静态博客生成。对于有<strong>同步和协作需求</strong>的朋友，请使用外部模式！使用视图菜单或者快捷键 <code>CMD + E</code> 可以打开外部模式，<code>CMD + L</code> 可以打开文档库。</p>
<a id="more"></a>
<h2 id="MWeb-大概用法、视图模式和预览界面"><a href="#MWeb-大概用法、视图模式和预览界面" class="headerlink" title="MWeb 大概用法、视图模式和预览界面"></a>MWeb 大概用法、视图模式和预览界面</h2><p>MWeb 使用菜单、快捷键和少量按钮完成所有操作，一般常用的操作都会有快捷键。整个界面使用三栏式结构，非常简洁。左边的第一第二栏是使用<strong>右键</strong>和底部的几个按钮操作，另外就是右上角有三个按钮了（外部模式是两个），快捷键分别是：<code>CMD + 7/8/9</code>。另外就是切换视图模式的快捷键了，建议看一下 <code>标记</code> 菜单和 <code>视图</code> 菜单。</p>
<ul>
<li>快捷键：<code>CMD + 1</code> 是在仅编辑器模式和三栏模式中切换。</li>
<li>快捷键：<code>CMD + 2</code> 是在二栏模式和仅编辑器模式中切换。</li>
<li>快捷键：<code>CMD + 3</code> 是在三栏模式和仅编辑器模式中切换。</li>
<li>快捷键：<code>CMD + 4</code> 是在编辑器/预览模式和三栏模式中切换。</li>
<li>快捷键：<code>CMD + R</code> 是在编辑器和预览模式中切换。</li>
</ul>
<p><strong>特别说明</strong>：当 <code>偏好设置</code> - <code>通用设置</code> 中 <code>切换视图模式（二三栏）时，保持编辑器大小不变</code> 被勾选后，<code>CMD + 1/2/3/4</code> 的行为会发生变化，具体如何，可以尝试一下。而 <code>在新窗口中打开实时预览（CMD + R）</code> 这个选项被选中后，快捷键 <code>CMD + R</code> 会打开新的窗口来预览文档。</p>
<h2 id="更多的了解-MWeb"><a href="#更多的了解-MWeb" class="headerlink" title="更多的了解 MWeb"></a>更多的了解 MWeb</h2><ul>
<li>MWeb 使用的是 Github Flavored Markdown 语法，请一定要打开 <code>帮助</code> - <code>Markdown 语法</code> 菜单看一下。</li>
<li>请一定要去官网首页看看，网址：<a href="http://zh.mweb.im" target="_blank" rel="noopener">http://zh.mweb.im</a>。</li>
<li>请一定要看一下官网的帮助，用菜单 <code>帮助</code> - <code>帮助...</code> 即可打开，也可以用网址：<a href="http://zh.mweb.im/help.html" target="_blank" rel="noopener">http://zh.mweb.im/help.html</a>。</li>
</ul>
<h2 id="帮助我们改进-MWeb"><a href="#帮助我们改进-MWeb" class="headerlink" title="帮助我们改进 MWeb"></a>帮助我们改进 MWeb</h2><p>如果你喜欢 MWeb，想让它变得更好，你可以：</p>
<ol>
<li>推荐 MWeb，让更多的人知道。</li>
<li>给我们发反馈和建议：<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#99;&#x6f;&#100;&#101;&#x72;&#102;&#111;&#x72;&#97;&#114;&#116;&#43;&#x32;&#51;&#51;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#99;&#x6f;&#100;&#101;&#x72;&#102;&#111;&#x72;&#97;&#114;&#116;&#43;&#x32;&#51;&#51;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></li>
<li>在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MWeb </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎使用马克飞象]]></title>
      <url>/2016/12/14/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用马克飞象"><a href="#欢迎使用马克飞象" class="headerlink" title="欢迎使用马克飞象"></a>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>
<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>
<ul>
<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>
<li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li>
<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>
</ul>
<hr>
<h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" target="_blank" rel="noopener">链接</a>或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。 </p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code class="python">@requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None
class SomeClass:
    pass
&gt;&gt;&gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
</code></pre>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 马克飞象 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
