[{"title":"制作第一个hexo主题","date":"2017-12-19T12:39:22.000Z","path":"2017/12/19/制作第一个hexo主题/","text":"制作第一个hexo主题Hexo是一个知名的静态博客生成工具，尤其在github用户中广为人知。hexo的主题可以自由变换，但是想要找到一个完全合自己心意的主题仿佛大海捞针。与其不停寻找，不如自己动手制作一个主题，既解决了自己看什么主题都不合心的问题，还能在其中学习更多知识。 这里是我写的主题toki以及预览。如果你觉得这篇文章对你起到了一点作用，欢迎你star或者fork进行进一步的学习，不必担心难度，因为这也是我第一个hexo主题。 hexo主题结构目录结构如下： . ├── _config.yml ├── layout │ └── _partial └── source ├── css ├── fonts └── js 其中config文件是存储与主题相关的变量，如点赞、评论功能是否开启，在整个站点下也有一个config文件，它是用来存储一些和整个站点有关的，比如站点的标题。而并非所有的hexo主题都支持点赞，所以点赞功能的开启放在具体的theme下更合适。 Layout文件夹下存放的是布局模板文件，可以用ejs、jade等编写，里边包含index、post等hexo中默认使用的模板，也可以编写一个自己额外定义的页面，比如about页。对于这些自己额外编写的模板，需要用户自己执行hexo new [layout] &lt;title&gt;中声明layout:about才可以。_partial子文件夹中存放的是一些可以服用的组件或者想要细分的部分，如打赏部分、点赞部分，可以分离出来，使得结构更加清晰明了。 Source文件夹下存放的是资源文件，比如css文件，字体文件，图片文件等。source文件在最后生成的时候会把其中的文件都直接放在根目录下，所以在文件中引用地址的时候不需要写source，而是直接写./css/app.css就可以。 hexo变量和函数想要编写一个hexo模板，我们在其中必定要添加一些hexo站点下的信息，如网站的title。还有我们之前提到的主题下也有一个config文件，其中的变量我们也需要调用。除了以上两个部分，hexo还提供了一些用来简化操作的辅助函数。具体的变量和辅助函数可以访问hexo官网。这里只介绍一些常用的。 变量： page.title site.posts page.excerpt关于整个站点下的config文件需要通过config.xxx来进行调用，对于这个主题的config文件需要通过theme.xxx来调用。而诸如page、site等就是hexo自身的一些变量了。 函数： &lt;%- list_categories([options]) %&gt; &lt;%- titlecase(string) %&gt; 模板文件Hexo已经定义的模板文件有以下几个： index post page archive category tag特别的还有一个layout文件，可以在layout文件中编写一些公共部分，实现在其他页面中的复用，如果你对模板引擎并不了解，我建议你先学习相关知识是非常必要的，不过不用太多，花十几分钟大概理解一下就可以。当然你并不需要都要包括这些模板，只是写了这些模板文件后，你不需要hexo new它，它也有固定的页面地址。每个主题最少可以只包括一个index页面即可。但是为了功能上比较完善，我还是建议最少编写index、post、archive这三个页面。在hexo中编写文件，需要选择一种模板引擎，这里我使用的ejs,hexo自己提供的ejs的支持，而且理解起来也很容易，没什么选择其他的理由。当然如果你想要编写的主题比较庞大，那还是选择自己最顺手的好。我们分别讲解index、post、archive的编写，然后在进行拓展。 layout页面这一页要包含菜单、页脚声明。 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;&lt;%= config.title %&gt;&lt;/title&gt; &lt;!-- 引入站点的标题--&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;%- css(&#39;./css/app.css&#39;) %&gt; &lt;!-- 这里的css 就是一个辅助函数--&gt; &lt;/head&gt; &lt;body&gt; &lt;%- partial(&#39;_partial/header&#39;) %&gt; &lt;!-- 引入其他部分--&gt; &lt;main&gt; &lt;%- body %&gt; &lt;!-- 这里会将其他页面的内容填充进来组成一个完整的页面 --&gt; &lt;/main&gt; &lt;%- partial(&#39;_partial/footer&#39;) %&gt; &lt;/body&gt; &lt;/html&gt; index页面显然的，这是我们进入网站看到的第一个页面，一般来说，这个页面要包含最近的文章展示，根据个人喜好，也可以添加标签云、最新评论等。 &lt;section class=&quot;posts&quot;&gt; &lt;% page.posts.each(function (post) { %&gt; &lt;article class=&quot;post&quot;&gt; &lt;h1&gt; &lt;a class=&quot;title&quot; href=&quot;&lt;%- url_for(post.path) %&gt;&quot;&gt; &lt;%= post.title %&gt; &lt;/a&gt; &lt;/h1&gt; &lt;%- partial(&#39;_partial/meta&#39;,{page:post}) %&gt; &lt;div class=&quot;content&quot;&gt; &lt;% if(post.excerpt) {%>","tags":[{"name":"hexo","slug":"hexo","permalink":"https://vevlins.github.io/tags/hexo/"},{"name":"教程","slug":"教程","permalink":"https://vevlins.github.io/tags/教程/"}]},{"title":"Hello World","date":"2017-12-14T12:38:07.000Z","path":"2017/12/14/Hello-World/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[{"name":"hello","slug":"hello","permalink":"https://vevlins.github.io/tags/hello/"},{"name":"world","slug":"world","permalink":"https://vevlins.github.io/tags/world/"}]},{"title":"一份简历","date":"2017-12-14T12:18:59.000Z","path":"2017/12/14/一份简历/","text":"首先，一份好的简历不光说明事实，更通过FAB模式来增强其说服力。 其次，写简历和写议论文不同，过分的论证会显得自夸，反而容易引起反感，所以要点到为止。这里的技巧是，提供论据，把论点留给阅读简历的人自己去得出。放论据要具体，最基本的是要数字化，好的论据要让人印象深刻。 有同学问，如果我在项目里边没有那么显赫的成绩可以说怎么办？讲不出成绩时，就讲你的成长。因为学习能力也是每家公司都看中的东西。你可以写你在这个项目里边遇到了一个什么样的问题，别人怎么解决的，你怎么解决的，你的方案好在什么地方，最终这个方案的效果如何。 举个例子，下边内容是虚构的： 2006年，我参与了手机XX网发布系统WAPCMS的开发（这部分是大家都会写的）。作为核心程序员，我不但完成了网站界面、调度队列的开发工作，更提出了高效的组件级缓存系统，通过碎片化缓冲有效的提升了系统的渲染效率。（这部分是很多同学忘掉的，要写出你在这个项目中具体负责的部分，以及你贡献出来的价值。）在该系统上线后，Web前端性能从10QPS提升到200QPS，服务器由10台减少到3台（通过量化的数字来增强可信度）。2008年我升任WAPCMS项目负责人，带领一个3人小组支持着每天超过2亿的PV（这就是Benefit。你能带给前雇主的价值，也就是你能带给新雇主的价值。）。 具体、量化、有说服力，是技术简历特别需要注重的地方。 以上内容在写完简历后，对每一段进行评估，完成后再删除）","tags":[{"name":"简历","slug":"简历","permalink":"https://vevlins.github.io/tags/简历/"}]},{"title":"Dillinger","date":"2017-12-14T11:53:38.000Z","path":"2017/12/14/Dillinger/","text":"Dillinger Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor. Type some Markdown on the left See HTML in the right Magic New Features! Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) You can also: Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site The overriding design goal for Markdown’sformatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. This text you see here is actually written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right. TechDillinger uses a number of open source projects to work properly: AngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub. InstallationDillinger requires Node.js v4+ to run. Install the dependencies and devDependencies and start the server. $ cd dillinger $ npm install -d $ node app For production environments… $ npm install --production $ NODE_ENV=production node app PluginsDillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below. Plugin README Dropbox plugins/dropbox/README.md Github plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md DevelopmentWant to contribute? Great! Dillinger uses Gulp + Webpack for fast developing.Make a change in your file and instantanously see your updates! Open your favorite Terminal and run these commands. First Tab: $ node app Second Tab: $ gulp watch (optional) Third: $ karma test Building for sourceFor production release: $ gulp build --prod Generating pre-built zip archives for distribution: $ gulp build dist --prod DockerDillinger is very easy to install and deploy in a Docker container. By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image. cd dillinger docker build -t joemccann/dillinger:${package.json.version} This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger. Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile): docker run -d -p 8000:8080 --restart=&quot;always&quot; &lt;youruser&gt;/dillinger:${package.json.version} Verify the deployment by navigating to your server address in your preferred browser. 127.0.0.1:8000 Kubernetes + Google CloudSee KUBERNETES.md Todos Write MORE Tests Add Night Mode LicenseMIT Free Software, Hell Yeah!","tags":[{"name":"Dillinger","slug":"Dillinger","permalink":"https://vevlins.github.io/tags/Dillinger/"},{"name":"Online","slug":"Online","permalink":"https://vevlins.github.io/tags/Online/"}]},{"title":"Welcome to MWeb","date":"2017-12-14T05:46:23.000Z","path":"2017/12/14/Welcome-to-MWeb/","text":"Welcome to MWebWhat is MWeb? MWeb is a Pro Markdown writing, note taking and static blog generator App. MWeb has two Mode, External Mode and Library Mode.In External Mode, you can edit classic text and markdown files from anywhere on your Mac. As an example, you can point MWeb to a folder on Dropbox. Shortcuts CMD + E or View - Open External to open External Mode.Library Mode design for note taking and static blog/website generator. Shortcuts CMD + L or View - Open Library to open Library Mode.External Mode’s folders and Library Mode are supported Full Text Search, drag &amp; drop or paste to insert images. View Mode and Live PreviewFor Minimal UI, MWeb’s interface only has a few buttons. The right-top corner buttons shortcuts: CMD + 7/8/9. CMD + 7 is Library Mode only. For enable Typewriter Scrolling, Dark Mode and switch panes, please check the View menu. Shortcut: CMD + 1 to toggle Editor Only and Three Panes. Shortcut: CMD + 2 to toggle Two Panes and Editor Only. Shortcut: CMD + 3 to toggle Three Panes and Editor Only. Shortcut: CMD + 4 to toggle Editor/Preview and Three Panes. Shortcut: CMD + R to toggle Editor and Live Preview. Note: When Preferences - General - Resize window when hide pane is enable, shortcuts CMD + 1/2/3/4 behavior will be changed. You can enable this option and try it. When the Live Preview (CMD + R) open new window is enable, shortcut CMD + R will open new window for Live Preview. More about MWeb MWeb used Github Flavored Markdown syntax, please open Help - Markdown syntax for detail. MWeb official website: http://www.mweb.im MWeb documents: Help - Help... or http://www.mweb.im/help.html. Help us to make MWeb better! Tell your friends about MWeb. Send a feedback: &#99;&#x6f;&#100;&#101;&#x72;&#102;&#111;&#x72;&#97;&#x72;&#x74;&#43;&#x32;&#51;&#x33;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d; Leave a review or at least a rating in Mac App Store.","tags":[{"name":"MWeb","slug":"MWeb","permalink":"https://vevlins.github.io/tags/MWeb/"},{"name":"Markdown","slug":"Markdown","permalink":"https://vevlins.github.io/tags/Markdown/"}]},{"title":"欢迎使用MWeb","date":"2017-12-14T05:42:22.000Z","path":"2017/12/14/欢迎使用MWeb/","text":"欢迎使用 MWeb首先介绍一下 MWeb 是什么，MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件。 然后这里重点说明一下：MWeb 有两个模式，外部模式和文档库模式。外部模式中把本地硬盘或 Dropbox 等网盘的文件夹引入，就可以使用 MWeb 的拖拽、粘贴插入图片、图床等特色功能。文档库模式设计为用于记笔记和静态博客生成。对于有同步和协作需求的朋友，请使用外部模式！使用视图菜单或者快捷键 CMD + E 可以打开外部模式，CMD + L 可以打开文档库。 MWeb 大概用法、视图模式和预览界面MWeb 使用菜单、快捷键和少量按钮完成所有操作，一般常用的操作都会有快捷键。整个界面使用三栏式结构，非常简洁。左边的第一第二栏是使用右键和底部的几个按钮操作，另外就是右上角有三个按钮了（外部模式是两个），快捷键分别是：CMD + 7/8/9。另外就是切换视图模式的快捷键了，建议看一下 标记 菜单和 视图 菜单。 快捷键：CMD + 1 是在仅编辑器模式和三栏模式中切换。 快捷键：CMD + 2 是在二栏模式和仅编辑器模式中切换。 快捷键：CMD + 3 是在三栏模式和仅编辑器模式中切换。 快捷键：CMD + 4 是在编辑器/预览模式和三栏模式中切换。 快捷键：CMD + R 是在编辑器和预览模式中切换。 特别说明：当 偏好设置 - 通用设置 中 切换视图模式（二三栏）时，保持编辑器大小不变 被勾选后，CMD + 1/2/3/4 的行为会发生变化，具体如何，可以尝试一下。而 在新窗口中打开实时预览（CMD + R） 这个选项被选中后，快捷键 CMD + R 会打开新的窗口来预览文档。 更多的了解 MWeb MWeb 使用的是 Github Flavored Markdown 语法，请一定要打开 帮助 - Markdown 语法 菜单看一下。 请一定要去官网首页看看，网址：http://zh.mweb.im。 请一定要看一下官网的帮助，用菜单 帮助 - 帮助... 即可打开，也可以用网址：http://zh.mweb.im/help.html。 帮助我们改进 MWeb如果你喜欢 MWeb，想让它变得更好，你可以： 推荐 MWeb，让更多的人知道。 给我们发反馈和建议：&#99;&#x6f;&#x64;&#x65;&#x72;&#102;&#x6f;&#x72;&#x61;&#x72;&#x74;&#x2b;&#50;&#x33;&#51;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d; 在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。","tags":[{"name":"MWeb","slug":"MWeb","permalink":"https://vevlins.github.io/tags/MWeb/"},{"name":"Markdown","slug":"Markdown","permalink":"https://vevlins.github.io/tags/Markdown/"}]},{"title":"欢迎使用马克飞象","date":"2016-12-14T12:06:45.000Z","path":"2016/12/14/欢迎使用马克飞象/","text":"欢迎使用马克飞象@(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块@requires_authorization def somefunc(param1=&#39;&#39;, param2=0): &#39;&#39;&#39;A docstring&#39;&#39;&#39; if param1 &gt; param2: # interesting print &#39;Greater&#39; return (param2 - param1 + 1) or None class SomeClass: pass &gt;&gt;&gt; message = &#39;&#39;&#39;interpreter ... prompt&#39;&#39;&#39;","tags":[{"name":"马克飞象","slug":"马克飞象","permalink":"https://vevlins.github.io/tags/马克飞象/"}]}]